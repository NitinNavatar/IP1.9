package com.navatar.scripts;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.annotations.Test;
import com.navatar.generic.BaseLib;
import com.navatar.generic.CommonLib;
import com.navatar.generic.EmailLib;
import com.navatar.generic.ExcelUtils;
import com.navatar.generic.SoftAssert;
import com.navatar.generic.CommonLib.ContentGridArrowKeyFunctions;
import com.navatar.generic.CommonLib.EnableDisable;
import com.navatar.generic.CommonLib.FolderType;
import com.navatar.generic.CommonLib.OnlineImportFileAddTo;
import com.navatar.generic.CommonLib.PageName;
import com.navatar.generic.CommonLib.TabName;
import com.navatar.generic.CommonLib.UploadFileActions;
import com.navatar.generic.CommonLib.WorkSpaceAction;
import com.navatar.generic.CommonLib.Workspace;
import com.navatar.generic.CommonLib.accessType;
import com.navatar.generic.CommonLib.action;
import com.navatar.generic.CommonLib.excelLabel;
import com.navatar.generic.CommonLib.investorSideWorkSpace;
import com.navatar.generic.CommonLib.multiInstance;
import com.navatar.generic.CommonLib.sideMenu;
import com.navatar.pageObjects.AllFirmsPageBusinesslayer;
import com.navatar.pageObjects.BasePageBusinessLayer;
import com.navatar.pageObjects.BasePageErrorMessage;
import com.navatar.pageObjects.CommitmentPageBusinessLayer;
import com.navatar.pageObjects.ContactPageBusinessLayer;
import com.navatar.pageObjects.FundRaisingPageBusinessLayer;
import com.navatar.pageObjects.FundsPageBusinessLayer;
import com.navatar.pageObjects.FundsPageErrorMessage;
import com.navatar.pageObjects.HomePageBusineesLayer;
import com.navatar.pageObjects.InstitutionPageBusinessLayer;
import com.navatar.pageObjects.InvestorFirmPage;
import com.navatar.pageObjects.InvestorFirmPageBusinesslayer;
import com.navatar.pageObjects.InvestorFirmPageErrorMessage;
import com.navatar.pageObjects.InvestorProfileBusinessLayer;
import com.navatar.pageObjects.LoginPageBusinessLayer;
import com.navatar.pageObjects.NIMPageBusinessLayer;
import com.navatar.pageObjects.PartnershipPageBusinessLayer;
import static com.navatar.generic.CommonLib.*;
import static com.navatar.generic.CommonVariables.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

/**
 * @author Azhar Alam
 *
 */
public class Module7 extends BaseLib {

	@Test
	public void M7tc001_Module7_preCondition() {
		
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundRaisingPageBusinessLayer frp = new FundRaisingPageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		PartnershipPageBusinessLayer pp = new PartnershipPageBusinessLayer(driver);
		CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
		NIMPageBusinessLayer np = new NIMPageBusinessLayer(driver);
		//To verify
		String crmUser1 = CRMUser1FirstName+" "+CRMUser1LastName;
		String crmUser2 = CRMUser2FirstName+" "+CRMUser2LastName;
		bp.preCondition(superAdminUserName, crmUser1+"<break>"+crmUser2, CRMUser1EmailID+"<break>"+CRMUser2EmailID, EnableDisable.Disable, EnableDisable.Disable, accessType.InternalUserAccess);
		
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		bp = new BasePageBusinessLayer(driver);
		frp = new FundRaisingPageBusinessLayer(driver);
		fp = new FundsPageBusinessLayer(driver);
		ip = new InstitutionPageBusinessLayer(driver);
		cp = new ContactPageBusinessLayer(driver);
		pp = new PartnershipPageBusinessLayer(driver);
		cmp = new CommitmentPageBusinessLayer(driver);
		np = new NIMPageBusinessLayer(driver);
		
		lp.CRMLogin(CRMUser1EmailID, adminPassword);

		// Institution
		if (bp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.createInstitution(M7Institution1)) {
				appLog.info("Institution Created Successfully : " + M7Institution1);
			} else {
				appLog.error("Not Able to Create Institution : " + M7Institution1);
				sa.assertTrue(false, "Not Able to Create Institution : " + M7Institution1);
			}
		}
		if (bp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.createInstitution(M7Institution2)) {
				appLog.info("Institution Created Successfully : " + M7Institution2);
			} else {
				appLog.error("Not Able to Create Institution : " + M7Institution2);
				sa.assertTrue(false, "Not Able to Create Institution : " + M7Institution2);
			}
		} else {
			appLog.error("Not Able to Click Institution tab");
			sa.assertTrue(false, "Not Able to Click Institution tab");
		}

		String M7Contact1EmailID, M7Contact2EmailID;
		M7Contact1EmailID = cp.generateRandomEmailId();
		M7Contact2EmailID = cp.generateRandomEmailId();

		// Contact
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.createContact(M7Contact1FirstName, M7Contact1LastName, M7Institution1, M7Contact1EmailID)) {
				ExcelUtils.writeData(M7Contact1EmailID, "Contacts", excelLabel.Variable_Name, "M7C1",
						excelLabel.Contact_EmailId);
				appLog.info("Contact " + M7Contact1FirstName + " " + M7Contact1LastName + " was successfully created");
			} else {
				appLog.error("Contact " + M7Contact1FirstName + " " + M7Contact1LastName + " could not be created");
				sa.assertTrue(false,
						"Contact " + M7Contact1FirstName + " " + M7Contact1LastName + " could not be created");
			}
		} else {
			appLog.error("Not Able to Click contact Tab");
			sa.assertTrue(false, "Not Able to Click contact Tab");
		}

		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.createContact(M7Contact2FirstName, M7Contact2LastName, M7Institution2, M7Contact2EmailID)) {
				ExcelUtils.writeData(M7Contact2EmailID, "Contacts", excelLabel.Variable_Name, "M7C2",
						excelLabel.Contact_EmailId);
				appLog.info("Contact " + M7Contact2FirstName + " " + M7Contact2LastName + " was successfully created");
			} else {
				appLog.error("Contact " + M7Contact2FirstName + " " + M7Contact2LastName + " could not be created");
				sa.assertTrue(false,
						"Contact " + M7Contact2FirstName + " " + M7Contact2LastName + " could not be created");
			}
		} else {
			appLog.error("Not Able to Click contact Tab");
			sa.assertTrue(false, "Not Able to Click contact Tab");
		}

		// Fund

		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.createFund(M7FundName1, M7FundType, M7FundInvestmentCategory)) {
				appLog.info("New fund " + M7FundName1 + " was successfully created");
			} else {
				appLog.error("New fund " + M7FundName1 + " could not be created");
				sa.assertTrue(false, "New fund " + M7FundName1 + " could not be created");
			}
		} else {
			appLog.error("Not Able to Click Funds tab ");
			sa.assertTrue(false, "Not Able to Click Funds tab ");
		}

		// Fund Raising
		if (bp.clickOnTab(TabName.FundraisingsTab)) {
			if (frp.createFundRaising(M7FundRaisingName1, M7FundName1, M7Institution1)) {
				appLog.info("Fundraising " + M7FundRaisingName1 + " was successfully created");
			} else {
				appLog.error("Fundraising " + M7FundRaisingName1 + " could not be created");
				sa.assertTrue(false, "Fundraising " + M7FundRaisingName1 + " could not be created");
			}
		} else {
			appLog.error("Not Able to Click Fundraising tab");
			sa.assertTrue(false, "Not Able to Click Fundraising tab");
		}
		
		
		if (bp.clickOnTab(TabName.FundraisingsTab)) {
			if (frp.createFundRaising(M7FundRaisingName2, M7FundName1, M7Institution2)) {
				appLog.info("Fundraising " + M7FundRaisingName1 + " was successfully created");
			} else {
				appLog.error("Fundraising " + M7FundRaisingName1 + " could not be created");
				sa.assertTrue(false, "Fundraising " + M7FundRaisingName1 + " could not be created");
			}
		} else {
			appLog.error("Not Able to Click Fundraising tab");
			sa.assertTrue(false, "Not Able to Click Fundraising tab");
		}
		// Limited Partner
		if (bp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.createLimitedPartner(M7LimitedPartner1, M7Institution1)) {
				appLog.info(M7LimitedPartner1 + " limited partner was successfully created");
			} else {
				appLog.error(M7LimitedPartner1 + " LP could not be created");
				sa.assertTrue(false, M7LimitedPartner1 + " LP could not be created");
			}
		} else {
			appLog.error("Not Able to Click Institution tab");
			sa.assertTrue(false, "Not Able to Click Institution tab");
		}

		// Limited Partner
		if (bp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.createLimitedPartner(M7LimitedPartner2, M7Institution2)) {
				appLog.info(M7LimitedPartner1 + " limited partner was successfully created");
			} else {
				appLog.error(M7LimitedPartner1 + " LP could not be created");
				sa.assertTrue(false, M7LimitedPartner1 + " LP could not be created");
			}
		} else {
			appLog.error("Not Able to Click Institution tab");
			sa.assertTrue(false, "Not Able to Click Institution tab");
		}
		// PartnerShip
		if (bp.clickOnTab(TabName.PartnershipsTab)) {
			if (pp.createPartnership(M7Partnership1, M7FundName1)) {
				appLog.info(M7Partnership1 + " was successfully created");
			} else {
				appLog.error(M7Partnership1 + " could not be created");
				sa.assertTrue(false, M7Partnership1 + " could not be created");
			}
		} else {
			appLog.error("Not Able to Click Partnership tab");
			sa.assertTrue(false, "Not Able to Click Partnership tab");
		}
	
		// Commitment
		if (bp.clickOnTab(TabName.CommitmentsTab)) {
			if (cmp.createCommitment(M7LimitedPartner1, M7Partnership1, M7Commitment1, null)) {
				appLog.info(M7Commitment1 + " was successfully created");
			} else {
				appLog.error(M7Commitment1 + " could not be created");
				sa.assertTrue(false, M7Commitment1 + " could not be created");
			}
		} else {
			appLog.error("Not Able to Click Commitments tab");
			sa.assertTrue(false, "Not Able to Click Commitments tab");
		}
		// Commitment
		if (bp.clickOnTab(TabName.CommitmentsTab)) {
			if (cmp.createCommitment(M7LimitedPartner2, M7Partnership1, M7Commitment2, null)) {
				appLog.info(M7Commitment1 + " was successfully created");
			} else {
				appLog.error(M7Commitment1 + " could not be created");
				sa.assertTrue(false, M7Commitment1 + " could not be created");
			}
		} else {
			appLog.error("Not Able to Click Commitments tab");
			sa.assertTrue(false, "Not Able to Click Commitments tab");
		}

		switchToDefaultContent(driver);
		
		//copy firm name to excel
		if (bp.clickOnTab(TabName.NIMTab)) {
		switchToFrame(driver, 30, np.getFrame(PageName.NavatarInvestorManager, 30));
		if (np.clickOnSideMenusTab(sideMenu.Profiles)){
			if (np.clickOnSideMenusTab(sideMenu.MyFirmProfile)) {
				String firm_name = np.getFirmName(60).getText().trim();
				ExcelUtils.writeData(firm_name, "Users", excelLabel.Variable_Name, "AdminUser", excelLabel.Firm_Name);
				appLog.info("firm name "+firm_name+" is successfully written to excel");
			}
			else {
				sa.assertTrue(false, "my firm profile tab is not clickable");
			}
		}
		else {
			sa.assertTrue(false, "profile side menu is not cllickable on nim page");
		}
		switchToDefaultContent(driver);
		}
	
		lp.CRMlogout();
		sa.assertAll();
	}

	@Test
	public void M7tc002_1_BuildWorkspaceAndImportFolderTemplateCheckButton() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID,adminPassword);
		WebElement onlineImport;
		WebElement uploadButton;
		String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
		String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
		String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
		
	
		if (fp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M7FundName1)) {
				String Size = ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M7F1", excelLabel.Fund_Size);
				String vintageyear = ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M7F1",excelLabel.Fund_VintageYear);
				String contact = ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M7F1",excelLabel.Fund_Contact);
				String phone = ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M7F1", excelLabel.Fund_Phone);
				String email = ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M7F1", excelLabel.Fund_Email);
				String description = ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M7F1",excelLabel.Fund_Description);
				String[] data = { Size, vintageyear, contact, phone, email, description };

				if (fp.buildWorkspace(data, WorkSpaceAction.IMPORTFOLDERTEMPLATE, folderTemplateName, null,
						M7Institution1+"<break>"+M7Institution2, Workspace.FundraisingWorkspace, 60)) {
					appLog.info(Workspace.FundraisingWorkspace.toString()+" is build successfully :" + M7FundName1);
					ThreadSleep(5000);

					//
					switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
							"fundraising workspace view");
					// Institution Folder

					if (fp.verifyFolderPathdummy("", M7Institution1, null, M7FundName1, PageName.FundsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + M7Institution1);

						onlineImport = fp.getOnlineImportLink(Workspace.FundraisingWorkspace, 10);
						if (onlineImport == null) {
							appLog.info("Online Import Button is Not Present for Folder : " + M7Institution1);

						} else {
							appLog.error("Online Import Button is  Present for Folder : " + M7Institution1);
							sa.assertTrue(false, "Online Import Button is  Present for Folder : " + M7Institution1);
						}

						uploadButton = fp.getUploadIcon(Workspace.FundraisingWorkspace, 10);
						if (uploadButton == null) {
							appLog.info("Upload Button is Not Present for Folder " + M7Institution1);

						} else {
							appLog.error("Upload Button is Present for Folder : " + M7Institution1);
							sa.assertTrue(false, "Upload Button is Present for Folder : " + M7Institution1);
						}

						// Standard

						if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage,
								Workspace.FundraisingWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + M7Institution1 + "/" + stdPath);

							onlineImport = fp.getOnlineImportLink(Workspace.FundraisingWorkspace, 10);
							if (onlineImport != null) {
								appLog.info("Online Import Button is Present for Folder : " + M7Institution1 + "/"
										+ stdPath);

							} else {
								appLog.error("Online Import Button is Not Present for Folder : " + M7Institution1 + "/"
										+ stdPath);
								sa.assertTrue(false, "Online Import Button is Not Present for Folder : "
										+ M7Institution1 + "/" + stdPath);
							}

							uploadButton = fp.getUploadIcon(Workspace.FundraisingWorkspace, 10);
							if (uploadButton != null) {
								appLog.info("Upload Button is Present for Folder : " + M7Institution1 + "/" + stdPath);

							} else {
								appLog.error(
										"Upload Button is Not Present for Folder :" + M7Institution1 + "/" + stdPath);
								sa.assertTrue(false,
										"Upload Button is Not Present for Folder :" + M7Institution1 + "/" + stdPath);
							}

						} else {
							appLog.error(" Folder Structure Not Verified  : " + M7Institution1 + "/" + stdPath);
							sa.assertTrue(false, " Folder Structure Not Verified  : " + M7Institution1 + "/" + stdPath);
						}

					} else {
						appLog.error(" Folder Structure Not Verified  : " + M7Institution1);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + M7Institution1);
					}

					// Common

					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + cmnPath);

						onlineImport = fp.getOnlineImportLink(Workspace.FundraisingWorkspace, 10);
						if (onlineImport != null) {
							appLog.info("Online Import Button is Present for Folder : " + cmnPath);

						} else {
							appLog.error("Online Import Button is Not Present for Folder : " + cmnPath);
							sa.assertTrue(false, "Online Import Button is Not Present for Folder : " + cmnPath);
						}

						uploadButton = fp.getUploadIcon(Workspace.FundraisingWorkspace, 10);
						if (uploadButton != null) {
							appLog.info("Upload Button is Present for Folder : " + cmnPath);

						} else {
							appLog.error("Upload Button is Not Present for Folder :" + cmnPath);
							sa.assertTrue(false, "Upload Button is Not Present for Folder :" + cmnPath);
						}

					} else {
						appLog.error(" Folder Structure Not Verified  : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
					}

					// Internal

					if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + intPath);

						onlineImport = fp.getOnlineImportLink(Workspace.FundraisingWorkspace, 10);
						if (onlineImport != null) {
							appLog.info("Online Import Button is Present for Folder : " + intPath);

						} else {
							appLog.error("Online Import Button is Not Present for Folder : " + intPath);
							sa.assertTrue(false, "Online Import Button is Not Present for Folder : " + intPath);
						}

						uploadButton = fp.getUploadIcon(Workspace.FundraisingWorkspace, 10);
						if (uploadButton != null) {
							appLog.info("Upload Button is Present for Folder : " + intPath);

						} else {
							appLog.error("Upload Button is Not Present for Folder :" + intPath);
							sa.assertTrue(false, "Upload Button is Not Present for Folder :" + intPath);
						}

					} else {
						appLog.error(" Folder Structure Not Verified  : " + intPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
					}

					// Shared

					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + shdPath);

						onlineImport = fp.getOnlineImportLink(Workspace.FundraisingWorkspace, 10);
						if (onlineImport != null) {
							appLog.info("Online Import Button is Present for Folder : " + shdPath);

						} else {
							appLog.error("Online Import Button is Not Present for Folder : " + shdPath);
							sa.assertTrue(false, "Online Import Button is Not Present for Folder : " + shdPath);
						}

						uploadButton = fp.getUploadIcon(Workspace.FundraisingWorkspace, 10);
						if (uploadButton != null) {
							appLog.info("Upload Button is Present for Folder : " + shdPath);

						} else {
							appLog.error("Upload Button is Not Present for Folder :" + shdPath);
							sa.assertTrue(false, "Upload Button is Not Present for Folder :" + shdPath);
						}

					} else {
						appLog.error(" Folder Structure Not Verified  : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
					}

				} else {
					appLog.error("Not able to bulid "+Workspace.FundraisingWorkspace.toString() +" on fund: " + M7FundName1);
					sa.assertTrue(false, "Not able to bulid "+Workspace.FundraisingWorkspace.toString() +" on fund: " + M7FundName1);
				}

			} else {
				appLog.error("Not able to Click Fund OR Fund is not Present: " + M7FundName1);
				sa.assertTrue(false, "Not able to Click fund OR Fund is not Present: " + M7FundName1);
			}
		} else {
			appLog.error("Not able to Click Fund tab ");
			sa.assertTrue(false, "Not able to Click Fund tab ");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}
@Test
	public void M7tc002_2_BuildWorkspaceAndImportFolderTemplateCheckButton()
{
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	lp.CRMLogin(CRMUser1EmailID,adminPassword);
	WebElement onlineImport;
	WebElement uploadButton;
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);

	// Institution Tab
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedInstitution(M7Institution1)) {
				appLog.info("Opened Institution : " + M7Institution1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"fundraising workspace view");

				// Standard

				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified on InstitutionsPage: " + stdPath);

					onlineImport = fp.getOnlineImportLink(Workspace.FundraisingWorkspace, 10);
					if (onlineImport == null) {
						appLog.info("Online Import Button is not Present for Folder on InstitutionsPage: " + stdPath);

					} else {
						appLog.error("Online Import Button is Present for Folder on InstitutionsPage: " + stdPath);
						sa.assertTrue(false,
								"Online Import Button is Present for Folder on InstitutionsPage : " + stdPath);
					}

					uploadButton = fp.getUploadIcon(Workspace.FundraisingWorkspace, 10);
					if (uploadButton == null) {
						appLog.info("Upload Button is not Present for Folder on InstitutionsPage : " + stdPath);

					} else {
						appLog.error("Upload Button is Present for Folder on InstitutionsPage :" + stdPath);
						sa.assertTrue(false, "Upload Button is Present for Folder on InstitutionsPage :" + stdPath);
					}

				} else {
					appLog.error(" Folder Structure Not Verified on InstitutionsPage : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified on InstitutionsPage  : " + stdPath);
				}

				// Common

				if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified on InstitutionsPage: " + cmnPath);

					onlineImport = fp.getOnlineImportLink(Workspace.FundraisingWorkspace, 10);
					if (onlineImport == null) {
						appLog.info("Online Import Button is not Present for Folder on InstitutionsPage: " + cmnPath);

					} else {
						appLog.error("Online Import Button is Present for Folder on InstitutionsPage: " + cmnPath);
						sa.assertTrue(false,
								"Online Import Button is Present for Folder on InstitutionsPage : " + cmnPath);
					}

					uploadButton = fp.getUploadIcon(Workspace.FundraisingWorkspace, 10);
					if (uploadButton == null) {
						appLog.info("Upload Button is not Present for Folder on InstitutionsPage : " + cmnPath);

					} else {
						appLog.error("Upload Button is Present for Folder on InstitutionsPage :" + cmnPath);
						sa.assertTrue(false, "Upload Button is Present for Folder on InstitutionsPage :" + cmnPath);
					}

				} else {
					appLog.error(" Folder Structure Not Verified on InstitutionsPage : " + cmnPath);
					sa.assertTrue(false, " Folder Structure Not Verified on InstitutionsPage  : " + cmnPath);
				}

				// Internal

				if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified on InstitutionsPage: " + intPath);

					onlineImport = fp.getOnlineImportLink(Workspace.FundraisingWorkspace, 10);
					if (onlineImport == null) {
						appLog.info("Online Import Button is not Present for Folder on InstitutionsPage: " + intPath);

					} else {
						appLog.error("Online Import Button is Present for Folder on InstitutionsPage: " + intPath);
						sa.assertTrue(false,
								"Online Import Button is Present for Folder on InstitutionsPage : " + intPath);
					}

					uploadButton = fp.getUploadIcon(Workspace.FundraisingWorkspace, 10);
					if (uploadButton == null) {
						appLog.info("Upload Button is not Present for Folder on InstitutionsPage : " + intPath);

					} else {
						appLog.error("Upload Button is Present for Folder on InstitutionsPage :" + intPath);
						sa.assertTrue(false, "Upload Button is Present for Folder on InstitutionsPage :" + intPath);
					}

				} else {
					appLog.error(" Folder Structure Not Verified on InstitutionsPage : " + intPath);
					sa.assertTrue(false, " Folder Structure Not Verified on InstitutionsPage  : " + intPath);
				}

				// Shared

				if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified on InstitutionsPage: " + shdPath);

					onlineImport = fp.getOnlineImportLink(Workspace.FundraisingWorkspace, 10);
					if (onlineImport == null) {
						appLog.info("Online Import Button is not Present for Folder on InstitutionsPage: " + shdPath);

					} else {
						appLog.error("Online Import Button is Present for Folder on InstitutionsPage: " + shdPath);
						sa.assertTrue(false,
								"Online Import Button is Present for Folder on InstitutionsPage : " + shdPath);
					}

					uploadButton = fp.getUploadIcon(Workspace.FundraisingWorkspace, 10);
					if (uploadButton == null) {
						appLog.info("Upload Button is not Present for Folder on InstitutionsPage : " + shdPath);

					} else {
						appLog.error("Upload Button is Present for Folder on InstitutionsPage :" + shdPath);
						sa.assertTrue(false, "Upload Button is Present for Folder on InstitutionsPage :" + shdPath);
					}

				} else {
					appLog.error(" Folder Structure Not Verified on InstitutionsPage : " + shdPath);
					sa.assertTrue(false, " Folder Structure Not Verified on InstitutionsPage  : " + shdPath);
				}

			} else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}

		ThreadSleep(10000);
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}
		
	@Test
	public void M7tc003_ContactAccess() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	boolean email_sent_cont1_flag = false;
	boolean email_sent_cont2_flag = false;
	String reg_link = null;
	String reg_link2 = null;
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);

	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			//giving access in Inst 1 fundraising workspace standard folder
			if (fp.inviteContact(M7Institution1, M7Contact1EmailId, stdPath, FolderType.Standard, "Upload", "Yes", "No", stdPath, Workspace.FundraisingWorkspace, null)) {
				appLog.info("contact has been given access successfully and invite has been sent to mail");
			}
			else {
				appLog.error("Contact could not be given access");
				sa.assertTrue(false, "Contact could not be given access");
			}


			//giving access in Inst 1 fundraising workspace shared folder
			if (fp.inviteContact(M7Institution1, M7Contact1EmailId, shdPath, FolderType.Shared, "Download", "Yes", "No", "Shared", Workspace.FundraisingWorkspace, null)) {
				appLog.info("contact has been given access successfully and invite has been sent to mail");
			}
			else {
				appLog.error("Contact could not be given access");
				sa.assertTrue(false, "Contact could not be given access");
			}

			//giving access in Inst 2 fundraising workspace standard folder
			if (fp.inviteContact(M7Institution2, M7Contact2EmailId, stdPath, FolderType.Standard, "Upload", "Yes", "No", stdPath, Workspace.FundraisingWorkspace, null)) {
				appLog.info("contact has been given access successfully and invite has been sent to mail");
			}
			else {
				sa.assertTrue(false, "Contact could not be given access");
			}

			//giving access in Inst 2 fundraising workspace shared folder
			if (fp.inviteContact(M7Institution2, M7Contact2EmailId, shdPath, FolderType.Shared, "Download", "Yes", "No", "Shared", Workspace.FundraisingWorkspace, null)) {
				appLog.info("contact has been given access successfully and invite has been sent to mail");
			}
			else {
				sa.assertTrue(false, "Contact could not be given access");
			}
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			//invitation mail only for fundraising workspace
			if (fp.sendInvitationMail(Workspace.FundraisingWorkspace, M7Contact1EmailId, "All Folders", M7Contact1LastName)) {
				appLog.info("contact "+M7Contact1LastName+ " has been sent email for invitation");
				email_sent_cont1_flag = true;
			}
			else {
				sa.assertTrue(false, "invitation email could not be sent to "+M7Contact1LastName);
			}
			if (fp.sendInvitationMail(Workspace.FundraisingWorkspace, M7Contact2EmailId, "All Folders", M7Contact2LastName)) {
				appLog.info("contact "+M7Contact2LastName+ " has been sent email for invitation");
				email_sent_cont2_flag = true;
			}
			else {
				sa.assertTrue(false, "invitation email could not be sent to "+M7Contact2LastName);
			}
			switchToDefaultContent(driver);
		}
		else {
			sa.assertTrue(false, "fund name provided could not be found");
		}
	}
	else {
		sa.assertTrue(false, "Funds tab is not clickable");
	}

	lp.CRMlogout();
	driver.close();
	config(ExcelUtils.readDataFromPropertyFile("Browser"));
	lp = new LoginPageBusinessLayer(driver);
	bp = new BasePageBusinessLayer(driver);
	fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPage invFirm = new InvestorFirmPage(driver);

	if (email_sent_cont1_flag==true) {
		try {
			reg_link = new EmailLib().getInvestorRegLink("InvitationMail", gmailUserName, adminPassword, CRMUser1EmailID, M7Contact1EmailId);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (reg_link != null) {
			driver.get(reg_link);
			appLog.info("registration link was successfully found from mail");
		}
		else {
			driver.get(InvestorRegistrationURL);
			appLog.error("registration link was not found");
			sa.assertTrue(false, "reg_link was not found");
		}
	}
	else {
		driver.get(investorRegLink);
		appLog.error("email was not sent from manage investor, so not checking email from user");
		sa.assertTrue(false, "email was not sent from manage investor, so not checking email from user");
	}
	if (bp.targetRegistration(M7Contact1FirstName, M7Contact1LastName, M7Contact1EmailId, M7FirmName, adminPassword)) {
		appLog.info("contact "+M7Contact1FirstName+" "+ M7Contact1LastName+ " is succesfully registered");
		if (invFirm.getActivitiesCreatedOnLabel(30)==null) {
			appLog.info("All documents page is successfully displayed of firm");
		}
		else {
			appLog.error("all documents tab is not selected");
			sa.assertTrue(false, "all documents tab is not selected");
		}
		lp.investorLogout();
	}
	else {
		appLog.error("registration is not successful");
		sa.assertTrue(false, "registration is not successful");
	}




	if (email_sent_cont2_flag==true) {
		try {
			reg_link2 = new EmailLib().getInvestorRegLink("InvitationMail", gmailUserName, adminPassword, CRMUser1EmailID, M7Contact2EmailId);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (reg_link2 != null) {
			driver.get(reg_link2);
			appLog.info("registration link was successfully found from mail");
		}
		else {
			driver.get(InvestorRegistrationURL);
			appLog.error("registration link was not found");
			sa.assertTrue(false, "reg_link was not found");
		}
	}
	else {
		driver.get(investorRegLink);
		appLog.error("email was not sent from manage investor, so not checking email from user");
		sa.assertTrue(false, "email was not sent from manage investor, so not checking email from user");
	}
	if (bp.targetRegistration(M7Contact2FirstName, M7Contact2LastName, M7Contact2EmailId, M7FirmName, adminPassword)) {
		appLog.info("contact "+M7Contact2FirstName+" "+ M7Contact2LastName+ " is succesfully registered");
		if (invFirm.getActivitiesCreatedOnLabel(30)==null) {
			appLog.info("All documents page is successfully displayed of firm");
		}
		else {
			appLog.error("all documents tab is not selected");
			sa.assertTrue(false, "all documents tab is not selected");
		}
		lp.investorLogout();
	}
	else {
		appLog.error("Registration is not successful");
		sa.assertTrue(false, "registration is not successful");
	}


	sa.assertAll();
}
	@Test
	public void M7tc004_1_UploadFileCommonNegative() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		String parentID=null;
		String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
		String uploadFiles = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileCommon);

		List<String> uploaded_files_list = createListOutOfString(uploadFiles);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		//lp.CRMLogin("pe2.2.1_trial3745_admin@navatarplatform.com", "navatar123");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M7FundName1)) {
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
				if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
					if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
						parentID = switchOnWindow(driver);
						if (fp.getUploadDocumentToFolderTextLabel(60).getText().trim().contains("Upload Document to Folder")) {
							appLog.info("Upload document to folder text is successfully found");
							WebElement common_text = isDisplayed(driver, FindElement(driver, "//span[contains(text(),'"+cmnPath+"')]", "common folder name", action.SCROLLANDBOOLEAN,30), "visibility", 30, "common folder name");
							if (common_text!=null) {
								appLog.info("correct folder name is succesfully displayed");
							}
							else {
								appLog.error("folder name text present is wrong on upload window");
								sa.assertTrue(false, "folder name text present is wrong on upload window");
							}
							if (fp.getUploadWindowCancelBtn(60)!=null) {
								appLog.info("cancel button is successfully displayed");
							}
							else {
								appLog.error("cancel button is not displayed on upload window");
								sa.assertTrue(false,"cancel button is not displayed on upload window");
							}
							if (fp.getUploadSaveButton(60)!=null) {
								appLog.info("save button is successfully displayed");
							}
							else {
								appLog.error("save button is not displayed on upload window");
								sa.assertTrue(false, "save button is not displayed on upload window");
							}
						}
						else {
							appLog.error("upload document to folder text is not found");
							sa.assertTrue(false, "upload document to folder text is not found");
						}
						click(driver, fp.getUploadWindowCancelBtn(60), "cancel button on upload file window", action.SCROLLANDBOOLEAN);			appLog.info("successfully clicked on close button and closed window");

						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, bp.getFrame(PageName.FundsPage, 30));
						// clicking upload icon and click save button without file
						if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 60), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
							parentID = switchOnWindow(driver);

							if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {

									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if (msg.trim().equals(FundsPageErrorMessage.noDocumentUploaded)) {
										appLog.info("correct error message to upload document in correct area is found successfully");
									}
									else {
										appLog.error("error message to upload document in correct area is not found");
										sa.assertTrue(false, "error message to upload document in correct area is not found");
									}


								}
								else {
									appLog.error("alert message for save button is not found");
									sa.assertTrue(false, "alert message for save button is not found");
								}
								//drag and drop file in correct area
								if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "DropLoc.jpg")) {

									appLog.info("files are successfully dropped into upload section");
									if (fp.removeAllFilesUploadWindow(fp.getCrossIconListUploadDoc())) {
										appLog.info("crossed on all files uploaded");
									}
									else {
										appLog.error("could not click on some files cross icon");
										sa.assertTrue(false, "could not click on some files cross icon");
									}

									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(0), 10)!=null) {
										appLog.error(uploaded_files_list.get(0)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(0)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}
									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(1), 10)!=null) {
										appLog.error(uploaded_files_list.get(1)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(1)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}
									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(2), 10)!=null) {
										appLog.error(uploaded_files_list.get(2)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(2)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}
								}

							
						
							else {
								appLog.error("0 documents have been uploaded");
								sa.assertTrue(false, "0 documents have been uploaded");
							}
							//upload zero size documents
							if (fp.dragDropFiles("UploadFiles\\0sizeDocument", "DropLoc.jpg")) {
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {

									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if (msg.trim().equals(FundsPageErrorMessage.zeroSizeFile)) {
										appLog.info("correct error message that zero size file is not allowed");
									}
									else {
										appLog.error("zero size file error message is not found");
										sa.assertTrue(false, "zero size file error message is not found");
									}
								}
								else {
									appLog.error("error message for zero size file is not found");
									sa.assertTrue(false, "error message for zero size file is not found");
								}
							}
							else {
								appLog.error("no file has been uploaded");
								sa.assertTrue(false, "no file has been uploaded");
							}
							//uploaded documents on wrong area
							if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "wrong.png")) {
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {

									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if (msg.trim().equals(FundsPageErrorMessage.documentNotUploadedInUploadedArea)) {
										appLog.info("correct error message that document is not uploaded in correct area");
									}
									else {
										appLog.error("error message that document is not uploaded in correct area is not found");
										sa.assertTrue(false, "error message that document is not uploaded in correct area is not found");
									}
								}
								else {
									appLog.error("error alert is not found for wrong area dropping of files");
									sa.assertTrue(false, "error alert is not found for wrong area dropping of files");
								}
								driver.close();
								driver.switchTo().window(parentID);
								switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							}
							else {
								appLog.error("drag and drop files on wrong area could not be done");
								sa.assertTrue(false,"drag and drop files on wrong area could not be done" );
							}

						}
						else {
							appLog.error("save button on upload window is not clickable");
							sa.assertTrue(false, "save button on upload window is not clickable");
						}
					}
					else {
						appLog.error("upload icon on funds page workspace is not clickable");
						sa.assertTrue(false, "upload icon on funds page workspace is not clickable");
					}

				}
				else {
					appLog.error("upload icon on funds page worskpace is not clickable");
					sa.assertTrue(false, "upload icon on funds page workspace is not clickable");
				}
			}
			else {
				appLog.error("Folder is not present in workspace");
				sa.assertTrue(false, "Folder is not present in workspace");
			}
		}
		else {
			appLog.error("fund is not found: "+M7FundName1);
			sa.assertTrue(false, "funds is not found: "+M7FundName1);
		}
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
	@Test
	public void M7tc004_2_UploadFileInternalNegative() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	String parentID=null;
	String internalPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	String uploadFiles = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileInternal);
	List<String> uploaded_files_list = createListOutOfString(uploadFiles);
	 	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(internalPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
			if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
				parentID = switchOnWindow(driver);
				if (fp.getUploadDocumentToFolderTextLabel(60).getText().trim().contains("Upload Document to Folder")) {
					appLog.info("Upload document to folder text is successfully found");
					WebElement internal_text = isDisplayed(driver, FindElement(driver, "//span[contains(text(),'"+internalPath+"')]", "internal folder name", action.SCROLLANDBOOLEAN,30), "visibility", 30, "internal folder name");
						if (internal_text!=null) {
							appLog.info("correct folder name is succesfully displayed");
						}
						else {
							appLog.error("folder name text present is wrong on upload window");
							sa.assertTrue(false, "folder name text present is wrong on upload window");
						}
						if (fp.getUploadWindowCancelBtn(60)!=null) {
							appLog.info("cancel button is successfully displayed");
						}
						else {
							appLog.error("cancel button is not displayed on upload window");
							sa.assertTrue(false,"cancel button is not displayed on upload window");
						}
						if (fp.getUploadSaveButton(60)!=null) {
							appLog.info("save button is successfully displayed");
						}
						else {
							appLog.error("save button is not displayed on upload window");
							sa.assertTrue(false, "save button is not displayed on upload window");
						}
				}
				else {
					appLog.error("upload document to folder text is not found");
					sa.assertTrue(false, "upload document to folder text is not found");
				}
				click(driver, fp.getUploadWindowCancelBtn( 30), "cancel button on upload file window", action.SCROLLANDBOOLEAN);
					appLog.info("successfully clicked on close button and closed window");
					
				driver.switchTo().window(parentID);
				switchToFrame(driver, 30, bp.getFrame(PageName.FundsPage, 30));
	
				//clicking upload icon and click save button without file
				if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 60), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					
					if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
						ThreadSleep(5000);
						if (isAlertPresent(driver)) {
						
						String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
						if (msg.trim().equals(FundsPageErrorMessage.noDocumentUploaded)) {
							appLog.info("correct error message to upload document in correct area is found successfully");
						}
						else {
							appLog.error("error message to upload document in correct area is not found");
							sa.assertTrue(false, "error message to upload document in correct area is not found");
						}
				
						
					}
						else {
							appLog.error("alert message for save button is not found");
							sa.assertTrue(false, "alert message for save button is not found");
						}
						//drag and drop file in correct area
					if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "DropLoc.jpg")) {
						
						appLog.info("files are successfully dropped into upload section");
									if (fp.removeAllFilesUploadWindow(fp.getCrossIconListUploadDoc())) {
										appLog.info("crossed on all files uploaded");
									}
									else {
										appLog.error("could not click on some files cross icon");
										sa.assertTrue(false, "could not click on some files cross icon");
									}

									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(0), 10)!=null) {
										appLog.error(uploaded_files_list.get(0)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(0)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}
									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(1), 10)!=null) {
										appLog.error(uploaded_files_list.get(1)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(1)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}
									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(2), 10)!=null) {
										appLog.error(uploaded_files_list.get(2)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(2)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}
								}

							
						
							else {
								appLog.error("0 documents have been uploaded");
								sa.assertTrue(false, "0 documents have been uploaded");
							}
							//upload zero size documents
							if (fp.dragDropFiles("UploadFiles\\0sizeDocument", "DropLoc.jpg")) {
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {

									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if (msg.trim().equals(FundsPageErrorMessage.zeroSizeFile)) {
										appLog.info("correct error message that zero size file is not allowed");
									}
									else {
										appLog.error("zero size file error message is not found");
										sa.assertTrue(false, "zero size file error message is not found");
									}
								}
								else {
									appLog.error("error message for zero size file is not found");
									sa.assertTrue(false, "error message for zero size file is not found");
								}
							}
							else {
								appLog.error("no file has been uploaded");
								sa.assertTrue(false, "no file has been uploaded");
							}
							//uploaded documents on wrong area
							if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "wrong.png")) {
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {

									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if (msg.trim().equals(FundsPageErrorMessage.documentNotUploadedInUploadedArea)) {
										appLog.info("correct error message that document is not uploaded in correct area");
									}
									else {
										appLog.error("error message that document is not uploaded in correct area is not found");
										sa.assertTrue(false, "error message that document is not uploaded in correct area is not found");
									}
								}
								else {
									appLog.error("error alert is not found for wrong area dropping of files");
									sa.assertTrue(false, "error alert is not found for wrong area dropping of files");
								}
								driver.close();
								driver.switchTo().window(parentID);
								switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							}
							else {
								appLog.error("drag and drop files on wrong area could not be done");
								sa.assertTrue(false,"drag and drop files on wrong area could not be done" );
							}

						}
						else {
							appLog.error("save button on upload window is not clickable");
							sa.assertTrue(false, "save button on upload window is not clickable");
						}
					}
					else {
						appLog.error("upload icon on funds page workspace is not clickable");
						sa.assertTrue(false, "upload icon on funds page workspace is not clickable");
					}

				}
				else {
					appLog.error("upload icon on funds page worskpace is not clickable");
					sa.assertTrue(false, "upload icon on funds page workspace is not clickable");
				}
			}
			else {
				appLog.error("Folder is not present in workspace");
				sa.assertTrue(false, "Folder is not present in workspace");
			}
		}
		else {
			appLog.error("fund is not found: "+M7FundName1);
			sa.assertTrue(false, "funds is not found: "+M7FundName1);
		}
	
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
	@Test
	public void M7tc004_3_UploadFileSharedNegative() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	String parentID=null;
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String uploadFiles = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileShared);
	List<String> uploaded_files_list = createListOutOfString(uploadFiles);
	 	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	//lp.CRMLogin("pe2.2.1_trial3745_admin@navatarplatform.com", "navatar123");
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
			if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
				parentID = switchOnWindow(driver);
				if (fp.getUploadDocumentToFolderTextLabel(60).getText().trim().contains("Upload Document to Folder")) {
					appLog.info("Upload document to folder text is successfully found");
					WebElement shared_text = isDisplayed(driver, FindElement(driver, "//span[contains(text(),'"+shdPath+"')]", "shared folder name", action.SCROLLANDBOOLEAN,30), "visibility", 30, "shared folder name");
						if (shared_text!=null) {
							appLog.info("correct folder name is succesfully displayed");
						}
						else {
							appLog.error("folder name text present is wrong on upload window");
							sa.assertTrue(false, "folder name text present is wrong on upload window");
						}
						if (fp.getUploadWindowCancelBtn(60)!=null) {
							appLog.info("cancel button is successfully displayed");
						}
						else {
							appLog.error("cancel button is not displayed on upload window");
							sa.assertTrue(false,"cancel button is not displayed on upload window");
						}
						if (fp.getUploadSaveButton(60)!=null) {
							appLog.info("save button is successfully displayed");
						}
						else {
							appLog.error("save button is not displayed on upload window");
							sa.assertTrue(false, "save button is not displayed on upload window");
						}
				}
				else {
					appLog.error("upload document to folder text is not found");
					sa.assertTrue(false, "upload document to folder text is not found");
				}
				click(driver, fp.getUploadWindowCancelBtn( 30), "cancel button on upload file window", action.SCROLLANDBOOLEAN);
					appLog.info("successfully clicked on close button and closed window");
					
				driver.switchTo().window(parentID);
				switchToFrame(driver, 30, bp.getFrame(PageName.FundsPage, 30));
			
				//clicking upload icon and click save button without file
				if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 60), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					
					if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
						ThreadSleep(5000);
						if (isAlertPresent(driver)) {
						
						String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
						if (msg.trim().equals(FundsPageErrorMessage.noDocumentUploaded)) {
							appLog.info("correct error message to upload document in correct area is found successfully");
						}
						else {
							appLog.error("error message to upload document in correct area is not found");
							sa.assertTrue(false, "error message to upload document in correct area is not found");
						}
				
						
					}
						else {
							appLog.error("alert message for save button is not found");
							sa.assertTrue(false, "alert message for save button is not found");
						}
						//drag and drop file in correct area
					if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "DropLoc.jpg")) {
						appLog.info("files are successfully dropped into upload section");
									if (fp.removeAllFilesUploadWindow(fp.getCrossIconListUploadDoc())) {
										appLog.info("crossed on all files uploaded");
									}
									else {
										appLog.error("could not click on some files cross icon");
										sa.assertTrue(false, "could not click on some files cross icon");
									}

									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(0), 10)!=null) {
										appLog.error(uploaded_files_list.get(0)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(0)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}
									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(1), 10)!=null) {
										appLog.error(uploaded_files_list.get(1)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(1)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}
									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(2), 10)!=null) {
										appLog.error(uploaded_files_list.get(2)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(2)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}
									
									
								}

							
						
							else {
								appLog.error("0 documents have been uploaded");
								sa.assertTrue(false, "0 documents have been uploaded");
							}
							//upload zero size documents
							if (fp.dragDropFiles("UploadFiles\\0sizeDocument", "DropLoc.jpg")) {
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {

									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if (msg.trim().equals(FundsPageErrorMessage.zeroSizeFile)) {
										appLog.info("correct error message that zero size file is not allowed");
									}
									else {
										appLog.error("zero size file error message is not found");
										sa.assertTrue(false, "zero size file error message is not found");
									}
								}
								else {
									appLog.error("error message for zero size file is not found");
									sa.assertTrue(false, "error message for zero size file is not found");
								}
							}
							else {
								appLog.error("no file has been uploaded");
								sa.assertTrue(false, "no file has been uploaded");
							}
							//uploaded documents on wrong area
							if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "wrong.png")) {
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {

						String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
						if (msg.trim().equals(FundsPageErrorMessage.documentNotUploadedInUploadedArea)) {
							appLog.info("correct error message that document is not uploaded in correct area");
						}
						else {
							appLog.error("error message that document is not uploaded in correct area is not found");
							sa.assertTrue(false, "error message that document is not uploaded in correct area is not found");
						}
					}
					else {
						appLog.error("error alert is not found for wrong area dropping of files");
						sa.assertTrue(false, "error alert is not found for wrong area dropping of files");
					}
					driver.close();
					driver.switchTo().window(parentID);
					switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
				}
					else {
						appLog.error("drag and drop files on wrong area could not be done");
						sa.assertTrue(false,"drag and drop files on wrong area could not be done" );
					}
					
					}
					else {
						appLog.error("save button on upload window is not clickable");
						sa.assertTrue(false, "save button on upload window is not clickable");
					}
				}
				else {
					appLog.error("upload icon on funds page workspace is not clickable");
					sa.assertTrue(false, "upload icon on funds page workspace is not clickable");
				}
				
			}
			else {
				appLog.error("upload icon on funds page worskpace is not clickable");
				sa.assertTrue(false, "upload icon on funds page workspace is not clickable");
			}
			}
			else {
				appLog.error("Folder is not present in workspace");
				sa.assertTrue(false, "Folder is not present in workspace");
			}
		}
		else{
			appLog.error("fund is not found: "+M7FundName1);
			sa.assertTrue(false, "funds is not found: "+M7FundName1);
		}
	}

	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
	@Test
	public void M7tc005_1_UploadFileActionInCommonFolderCorrectly() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");


	SoftAssert saa = new SoftAssert();

	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					Workspace.FundraisingWorkspace.toString() +" view");

			String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
					excelLabel.CommonPath);
			String docpath = "UploadFiles\\Module8\\INV_CommonFolder";

			if (fp.uploadFile(cmnPath, null, docpath, null, UploadFileActions.Upload,
					Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
				appLog.info("File is upload successfullly");
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"fundraising workspace view");

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
						"fundraising refresh button", action.SCROLLANDBOOLEAN)) {
					String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileCommon);

					if (filesName != null) {
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("File is not uploaded in " + cmnPath);
				sa.assertTrue(false, "File is not uploaded in " + cmnPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	//funds tab
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");

			String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
					excelLabel.CommonPath);
		

			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);
				if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
						"FundraisingWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileCommon);

					if (filesName != null) {
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			
				

			} else {
				appLog.error(" Folder Structure Not Verified for Fund : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified for Fund : " + cmnPath);
			}
				

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc005_2_UploadFileInCommonFolderCorrectlyImpactCRM() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

	SoftAssert saa = new SoftAssert();

	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	// Institution

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"fundrasising workspace view");

			String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
					excelLabel.CommonPath);

			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);

				String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc005_1_UploadFileActionInCommonFolderCorrectly",
						excelLabel.UploadedFileCommon);

				if (filesName != null) {

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + cmnPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	
		// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
							"fundraising workspace view");
					String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
							excelLabel.CommonPath);

					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + cmnPath);

						String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc005_1_UploadFileActionInCommonFolderCorrectly",
								excelLabel.UploadedFileCommon);

						if (filesName != null) {

							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + cmnPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
	
}
@Test
	public void M7tc005_3_UploadFileInCommonFolderCorrectlyImpactInvestor() {
	//Investor Side
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
		String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
				excelLabel.CommonPath);
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc005_1_UploadFileActionInCommonFolderCorrectly",
					excelLabel.UploadedFileCommon);
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();
}
@Test
	public void M7tc006_UploadFileInternalSuccessful_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String local_folder = "UploadFiles\\Module8\\Fun_InternalFolder";
	String internalPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (fp.clickOnTab(TabName.FundsTab))  {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			//add files in folder path
			if (fp.uploadFile(internalPath, null,local_folder , UploadFileActions.Upload,UploadFileActions.Upload , Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
				if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
						"fundraising refresh button", action.SCROLLANDBOOLEAN)) {
					String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileInternal);

					if (filesName != null) {



						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName,date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}
				}
			}
			else {
				appLog.error("could not upload file to "+internalPath);
				sa.assertTrue(false, "could not upload file to "+internalPath);
			}
		}

		else {
			appLog.error("fund "+M7FundName1+"tab is not found");
			sa.assertTrue(false, "fund "+M7FundName1+"tab is not found");
		}


	}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc006_UploadFileInternalSuccessful_Impact() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String internalPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 30));
			//verify presence of folders
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"fundraising workspace view");
			if (fp.verifyFolderPathdummy(internalPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + internalPath);

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
						"fundraising refresh button", action.SCROLLANDBOOLEAN)) {
					String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							"M7tc006_UploadFileInternalSuccessful_Action", excelLabel.UploadedFileInternal);

					if (filesName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName,date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			}
			else {
				appLog.error("could not find path "+internalPath);
				sa.assertTrue(false, "could not find path "+internalPath);
			}
		}
		else {
			appLog.error("Institution "+M7Institution1+" cannot be found");
			sa.assertTrue(false, "Institution "+M7Institution1+" cannot be found");
		}
	}
	else {
		appLog.error("Institutions tab is not clickable");
		sa.assertTrue(false, "Institutions tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
	@Test
	public void M7tc007_UploadFileSharedSuccessful_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String shdFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.SharedPath);
	
	String filesName =null;

	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Fundraising workspace view");

			
			String docpath = "UploadFiles\\Module8\\INV_CommonFolder";

			if (fp.uploadFile(shdFolder, null, docpath, null, UploadFileActions.Upload,
					Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
				appLog.info("File is upload successfullly");
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"Investor workspace view");

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileShared);

					if (filesName != null) {
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("File is not uploaded in " + shdFolder);
				sa.assertTrue(false, "File is not uploaded in " + shdFolder);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc007_UploadFileSharedSuccessful_ImpactCRM() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	SoftAssert sa = new SoftAssert();
	String shdFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.SharedPath);
	
	String filesName =null;

	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	// Institution

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(shdFolder, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + shdFolder);

				 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc007_UploadFileSharedSuccessful_Action",
						excelLabel.UploadedFileShared);

				if (filesName != null) {

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + shdFolder);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + shdFolder);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

			// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
							"Investor workspace view");
					

					if (fp.verifyFolderPathdummy(shdFolder, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + shdFolder);

						 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc007_UploadFileSharedSuccessful_Action",
								excelLabel.UploadedFileShared);

						if (filesName != null) {

							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + shdFolder);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + shdFolder);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	//
	switchToDefaultContent(driver);
	lp.CRMlogout();
}
@Test
	public void M7tc007_UploadFileSharedSuccessful_ImpactInvestor() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	SoftAssert sa = new SoftAssert();
	String shdFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.SharedPath);
	
	String filesName =null;
	//Investor Side
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
	
		if (fp.verifyFolderPathdummy(shdFolder, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdFolder);
			 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc007_UploadFileSharedSuccessful_Action",
					excelLabel.UploadedFileShared);
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdFolder);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdFolder);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();
}
	@Test
	public void M7tc008_UploadFileStandardFolderNegative() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID = null;
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String uploaded_files = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileStandard);
	List<String> uploaded_files_list = createListOutOfString(uploaded_files);
	String[] standardUploadText = {"Add to Single Institution", "Add to Multiple Institutions", "Use Bulk Uploader or File Splitter"};
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {

		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					if (parentID!=null) {
						if (fp.getUploadDocumentToFolderTextLabel(60).getText().trim().contains("Upload Document to Folder")) {
							appLog.info("Upload document to folder text is successfully found");
							WebElement standard_text = isDisplayed(driver, FindElement(driver, "//span[contains(text(),'"+stdPath+"')]", "standard folder name", action.SCROLLANDBOOLEAN,30), "visibility", 30, "standard folder name");
							if (standard_text!=null) {
								appLog.info("correct folder name is succesfully displayed");
							}
							else {
								appLog.error("folder name displayed is not correct");
								sa.assertTrue(false, "folder name displayed is not correct");
							}
							for (int i = 0;i<fp.standardFolderUploadWindowLabels().size();i++) {
								WebElement el = fp.standardFolderUploadWindowLabels().get(i);
								if (el.getText().trim().equals(standardUploadText[i])) {
									appLog.info(standardUploadText[i]+" Text in standard folder upload window is present");
								}
								else {
									appLog.error(standardUploadText[i]+"is not present");
									sa.assertTrue(false, standardUploadText[i]+"is not present");
								}
							}
							WebElement institution1=fp.uploadWindowInstitutionTextElement(M7Institution1);
							WebElement institution2=fp.uploadWindowInstitutionTextElement(M7Institution2);
							if ((institution1!=null)&&(institution1.getText().trim().equals(M7Institution1))) {
								appLog.info(M7Institution1+" is present on institutions list");
								if ((institution2!=null)&&(institution2.getText().trim().equals(M7Institution2))) {
									appLog.info(M7Institution2+" is present on institutions list");
									if (fp.getUploadWindowStandardInst1Checkbox(60).isSelected()==true) {
										appLog.info(M7Institution1+" checkbox is selected by default");
									}
									else {
										appLog.error(M7Institution1+" checkbox is not selected");
										sa.assertTrue(false, M7Institution1+" checkbox is not selected");
									}
								}
								else {
									appLog.error(M7Institution2+" is not displayed on upload window");
									sa.assertTrue(false, M7Institution2+" is not displayed on upload window");
								}
							}
							else {
								appLog.error(M7Institution1+" is not displayed on upload window");
								sa.assertTrue(false, M7Institution1+" is not displayed on upload window");
							}

							//click on cancel button
							click(driver, fp.getUploadStandard1stCancel(30), "cancel button on upload window", action.BOOLEAN);


						}
						else {
							appLog.error("upload document to folder text is incorrect");
							sa.assertTrue(false, "upload document to folder text is incorrect");
						}
						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
					}
					else {
						appLog.error("could not find child window to switch");
						sa.assertTrue(false, "could not find child window to switch");
					}
					if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
						appLog.info("clicked on upload icon on fundraising workspace");
						parentID = switchOnWindow(driver);
						if (parentID!=null) {
							//click on next button to go to upload window
							if (click(driver, fp.getUploadNextButton(Workspace.FundraisingWorkspace, 30), "next button in upload fundraising workspace", action.SCROLLANDBOOLEAN)) {
								//drag and drop file in correct area
								if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "DropLoc.jpg")) {

									appLog.info("files are successfully dropped into upload section");
									if (fp.removeAllFilesUploadWindow(fp.getCrossIconListUploadDoc())) {
										appLog.info("crossed on all files uploaded");
									}
									else {
										appLog.error("could not click on some files cross icon");
										sa.assertTrue(false, "could not click on some files cross icon");
									}
									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(2),10)==null) {
										appLog.info(uploaded_files_list.get(2)+" file has been successfully removed after cliicking cross button");
									}
									else {
										appLog.error(uploaded_files_list.get(2)+" file has not been removed after clicking cross button");
										sa.assertTrue(false, uploaded_files_list.get(2)+" file has not been removed after clicking cross button");
									}
									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(1),10)==null) {
										appLog.info(uploaded_files_list.get(1)+" file has been successfully removed after cliicking cross button");
									}
									else {
										appLog.error(uploaded_files_list.get(1)+" file has not been removed after clicking cross button");
										sa.assertTrue(false, uploaded_files_list.get(1)+" file has not been removed after clicking cross button");
									}
									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(0),10)==null) {
										appLog.info(uploaded_files_list.get(0)+" file has been successfully removed after cliicking cross button");
									}
									else {
										appLog.error(uploaded_files_list.get(0)+" file has not been removed after clicking cross button");
										sa.assertTrue(false, uploaded_files_list.get(0)+" file has not been removed after clicking cross button");
									}

									//clicking cancel button to close window and go to 1st page of upload window
									click(driver, fp.getUploadWindowCancelBtn(60), "cancel button on upload window", action.SCROLLANDBOOLEAN);

								}
								else {
									appLog.error("drag and drop of files is not successful");
									sa.assertTrue(false, "drag and drop of files is not successful");
								}

							}
							else {
								appLog.error("next button on uplaod window is not clickable");
								sa.assertTrue(false, "next button on uplaod window is not clickable");
							}
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
						}
						else {
							appLog.error("could not find child window to switch");
							sa.assertTrue(false, "could not find child window to switch");
						}
						if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
						}
						parentID = switchOnWindow(driver);
						if (parentID!=null) {

							//selecting multiple institutions radio button and check if all institutions checkboxes are enabled
							if (click(driver, fp.getMultipleInstituionRadioButton(60), "multiple institutions checkbox", action.SCROLLANDBOOLEAN)) {
								WebElement findDisabledCheckbox = isDisplayed(driver, FindElement(driver, "//input[@disabled='disabled']", "disabled checkbox", action.BOOLEAN, 10), "visibility", 10, "disabled checkbox");
								if (findDisabledCheckbox==null) {
									appLog.info("after clicking add to multiple institutions, all institutions checkboxes are now enabled");
								}
								else {
									appLog.error("all institutions checkboxes are not enabled after selecting multiple institutions");
									sa.assertTrue(false, "all institutions checkboxes are not enabled after selecting multiple institutions");
								}
							}
							else {
								appLog.error("multiple institutions radio button is not clickable");
								sa.assertTrue(false, "multiple institutions radio button is not clickable");
							}
							if (!fp.getUploadWindowStandardInst1Checkbox(60).isSelected()) {
								if (click(driver, fp.getUploadWindowStandardInst1Checkbox(60), "upload window standard inst 1 checkbox", action.SCROLLANDBOOLEAN)) {
									appLog.info("institution 1 is now selected");
								}
							}
							else {
								appLog.info("institution 1 checkbox is already selected");
							}
							if (!fp.getUploadWindowStandardInst2Checkbox(60).isSelected()) {
								if (click(driver, fp.getUploadWindowStandardInst2Checkbox(60), "upload window standard inst 2 checkbox", action.SCROLLANDBOOLEAN)) {
									appLog.info("institution 2 is now selected");
								}
							}
							else {
								appLog.info("institution 2 checkbox is already selected");
							}
							if (click(driver, fp.getUploadNextButton(Workspace.FundraisingWorkspace, 30), "next button on upload window "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
								appLog.info("next button on upload window is succesfully clicked");
								if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
									ThreadSleep(5000);
									if (isAlertPresent(driver)) {

										String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
										switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
										if (msg.trim().equals(FundsPageErrorMessage.noDocumentUploaded)) {
											appLog.info("correct error message to upload document in correct area is found successfully");
										}
										else {
											appLog.error("error message to upload document in correct area is not found");
											sa.assertTrue(false, "error message to upload document in correct area is not found");
										}
									}
									else {
										appLog.error("no alert is present for no document present");
										sa.assertTrue(false, "no alert is present for no document present");
									}
								}
								else {
									appLog.error("save button is not clickable on upload window");
									sa.assertTrue(false, "save button is not clickable on upload window");
								}

								//upload zero size documents
								if (fp.dragDropFiles("UploadFiles\\0sizeDocument", "DropLoc.jpg")) {
									ThreadSleep(5000);
									if (isAlertPresent(driver)) {

										String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
										switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
										if (msg.trim().equals(FundsPageErrorMessage.zeroSizeFile)) {
											appLog.info("correct error message that zero size file is not allowed");
										}
										else {
											appLog.error("zero size file error message is not found");
											sa.assertTrue(false, "zero size file error message is not found");
										}
									}
									else {
										appLog.error("no alert is found when zero size document is uploaded");
										sa.assertTrue(false, "no alert is found when zero size document is uploaded");
									}
								}
								else {
									appLog.error("dragging and drop files was not successful for zero size file");
									sa.assertTrue(false, "dragging and drop files was not successful for zero size file");
								}



								//uploaded documents on wrong area
								if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "wrong.png")) {
									ThreadSleep(5000);
									if (isAlertPresent(driver)) {

										String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
										switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
										if (msg.trim().equals(FundsPageErrorMessage.documentNotUploadedInUploadedArea)) {
											appLog.info("correct error message that document is not uploaded in correct area");
										}
										else {
											appLog.error("error message that document is not uploaded in correct area is not found");
											sa.assertTrue(false, "error message that document is not uploaded in correct area is not found");
										}
									}
									else {
										appLog.error("error alert is not found for wrong area dropping of files");
										sa.assertTrue(false, "error alert is not found for wrong area dropping of files");
									}
								}
								else {
									appLog.error("dragging and drop was not successful for wrong area dropping of files");
									sa.assertTrue(false, "dragging and drop was not successful for wrong area dropping of files");
								}
							}
							else {
								appLog.error("next button on upload window is not clickable");
								sa.assertTrue(false, "next button on upload window is not clickable");
							}
							driver.close();
							driver.switchTo().window(parentID);
							switchToFrame(driver,30, fp.getFrame(PageName.FundsPage, 30));
						}
						else {
							appLog.error("could not find child window to switch");
							sa.assertTrue(false, "could not find child window to switch");
						}
					}
					else {
						appLog.error("upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
						sa.assertTrue(false, "upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
					}
				}
				else {
					appLog.error("upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
					sa.assertTrue(false, "upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
				}
			}
			else {
				appLog.error("folder "+stdPath+" could not be found");
				sa.assertTrue(false, "folder "+stdPath+" could not be found");
			}
		}
		else {
			appLog.error("fund "+M7FundName1+"could not be found");
			sa.assertTrue(false, "fund "+M7FundName1+"could not be found");
		}
	}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc009_UploadFileStandardSuccessful_Action() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
		SoftAssert saa = new SoftAssert();
		SoftAssert sa = new SoftAssert();
		String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
				excelLabel.StandardPath);
		
		String filesName =null;
		String insPath=M7Institution1;

		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M7FundName1)) {

				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
				String docpath = "UploadFiles\\Module8\\INV_CommonFolder";

				if (fp.uploadFile(stdPath, insPath, docpath, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("File is upload successfullly");
					switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
							"Investor workspace view");

					if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
							"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
						 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
								currentlyExecutingTC, excelLabel.UploadedFileStandard);

						if (filesName != null) {
							
							saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.FundraisingWorkspace, filesName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName,date);
							
							sa.combineAssertions(saa);
							
						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {

						appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
						sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
					}

				} else {
					appLog.error("File is not uploaded in " + stdPath);
					sa.assertTrue(false, "File is not uploaded in " + stdPath);
				}

			} else {
				appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
				sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			}
		} else {
			appLog.info("Not Able to Click Funds Tab");
			sa.assertTrue(false, "Not Able to Click Funds Tab");
		}

		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
}
@Test
	public void M7tc009_UploadFileStandardSuccessful_ImpactCRM() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	String filesName =null;
	String insPath=M7Institution1;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	// Institution
		
	
		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedInstitution(M7Institution1)) {
				appLog.info("Opened Institution : " + M7Institution1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"Investor workspace view");

				

				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);

					 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc009_UploadFileStandardSuccessful_Action",
							excelLabel.UploadedFileStandard);

					if (filesName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}

	
			// Contact Tab
				
				switchToDefaultContent(driver);
				if (bp.clickOnTab(TabName.ContactTab)) {
					if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
						appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
						switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
								"Investor workspace view");
						

						if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
								Workspace.FundraisingWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + stdPath);

							 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc009_UploadFileStandardSuccessful_Action",
									excelLabel.UploadedFileStandard);

							if (filesName != null) {

								saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName,
										"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

								sa.combineAssertions(saa);

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
							sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
						}

					} else {
						appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
						sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					}
				} else {
					appLog.error("Not able to Click Contact tab ");
					sa.assertTrue(false, "Not able to Click Contact tab ");
				}
				
		
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
}
@Test
	public void M7tc009_UploadFileStandardSuccessful_ImpactInvestor() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	String filesName =null;
	String insPath=M7Institution1;
	
	//Investor Side
		
		lp.investorLogin(M7Contact1EmailId, adminPassword);
		if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
		
			if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage,
					null, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);
				 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc009_UploadFileStandardSuccessful_Action",
						excelLabel.UploadedFileStandard);
				saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
				sa.combineAssertions(saa);
			} else {
				appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
				saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
			}

		} else {
			appLog.info("Not able to click on CurrentInvestment tab");
			saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
		}
		lp.investorLogout();
		ThreadSleep(3000);
		sa.assertAll();
	}
	@Test
	public void M7tc010_MultipleInstitutionsStandardUploadNegative() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID = null;
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String uploaded_file = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileStandard);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {

		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);

					if (click(driver, fp.getMultipleInstituionRadioButton(60), "multiple institutions checkbox", action.SCROLLANDBOOLEAN)) {

						if (!fp.getUploadWindowStandardInst1Checkbox(60).isSelected()) {
							if (click(driver, fp.getUploadWindowStandardInst1Checkbox(60), "upload window standard inst 1 checkbox", action.SCROLLANDBOOLEAN)) {
								appLog.info("checked on inst 1 checkbox");
							}
							else {
								appLog.error("checkbox for inst 1 is not clickable");
								sa.assertTrue(false, "checkbox for inst 1 is not clickable");
							}
						}
						else {
							appLog.info(M7Institution1+" checkbox is already selected");
						}
						if (!fp.getUploadWindowStandardInst2Checkbox(60).isSelected()) {
							if (click(driver, fp.getUploadWindowStandardInst2Checkbox(60), "upload window standard inst 2 checkbox", action.SCROLLANDBOOLEAN)) {
								appLog.info("checked on inst 2 checkbox");
							}
							else {
								appLog.error("checkbox for inst 2 is not clickable");
								sa.assertTrue(false, "checkbox for inst 2 is not clickable");
							}
						}
						else {
							appLog.info(M7Institution2+" checkbox is already selected");
						}
						
						
						if (click(driver, fp.getUploadNextButton(Workspace.FundraisingWorkspace, 30), "upload next button", action.BOOLEAN)) {
							//checking if institutions is present in selected institutions tab in upload window
							if ((fp.findSelectedInstitutionsInUploadWindow(M7Institution1)!=null )&&(fp.findSelectedInstitutionsInUploadWindow(M7Institution1)).getText().contains(M7Institution1)) {
								appLog.info(M7Institution1 + " name is present in selected institutions tab");
								if ((fp.findSelectedInstitutionsInUploadWindow(M7Institution2)!=null )&&(fp.findSelectedInstitutionsInUploadWindow(M7Institution2)).getText().contains(M7Institution2)) {
									appLog.info(M7Institution2 + " name is present in selected institutions tab");
								}
								else {
									appLog.error(M7Institution2 + " name is not present in selected institution tab");
									sa.assertTrue(false, M7Institution2 + " name is not present in selected institution tab");
								}
								
							}
							else {
								appLog.error(M7Institution1 + " name is not present in selected institution tab");
								sa.assertTrue(false, M7Institution2 + " name is not present in selected institution tab");
							}
							if (fp.dragDropFiles("UploadFiles\\Module8\\MultipleInstUploadNegative", "DropLoc.jpg")) {

								appLog.info("files are successfully dropped into upload section");
								click(driver, fp.getUploadWindowCancelBtn(60), "cancel button on upload window", action.BOOLEAN);
								driver.switchTo().window(parentID);
								switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								//after clicking cancel button verify that file should not be uploaded

								List<String> el = compareMultipleList(driver,uploaded_file,fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage));
								if (!el.isEmpty()) {
									for (int i = 0;i<el.size();i++) {
										appLog.info("file is not available in content grid after clicking cancel in upload window: "+el.get(i));
										sa.assertTrue(true, el.get(i));
									}
								}else {
									appLog.info("no file is present on workspace, "+uploaded_file+" is not present");
									sa.assertTrue(false,uploaded_file+" is visible in "+Workspace.FundraisingWorkspace.toString() +" content grid");
								}
							}
							else {
								appLog.error("files could not be dragged and dropped");
								sa.assertTrue(false, "files could not be dragged and dropped");
							}
						}
						else {
							appLog.error("next button on upload window is not clickable");
							sa.assertTrue(false, "next button on upload window is not clickable");
						}
					}
					else {
						appLog.error("multiple institutions radio button on upload window is not clickable");
						sa.assertTrue(false,"multiple institutions radio button on upload window is not clickable");
					}
				}
				else {
					appLog.error("upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
					sa.assertTrue(false, "upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
				}
			}

			else {
				appLog.error("folder path "+stdPath+" could not be found");
				sa.assertTrue(false, "folder path "+stdPath+" could not be found");

			}

			if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
				parentID = switchOnWindow(driver);
				if (click(driver, fp.getMultipleInstitutionsRbt(30), "multiple institutions radio button", action.SCROLLANDBOOLEAN)) {

					if (fp.getUploadWindowStandardInst1Checkbox(60).isSelected()) {
						if (click(driver, fp.getUploadWindowStandardInst1Checkbox(60), "upload window standard inst 1 checkbox", action.SCROLLANDBOOLEAN)) {
							appLog.info("unchecking "+M7Institution1+" checkbox");
						}
					}
					else {
						appLog.info("institution 1 checkbox is already unselected");
					}
					if (fp.getUploadWindowStandardInst2Checkbox(60).isSelected()) {
						if (click(driver, fp.getUploadWindowStandardInst2Checkbox(60), "upload window standard inst 2 checkbox", action.SCROLLANDBOOLEAN)) {
							appLog.info("unchecking "+M7Institution2+" checkbox");
						}
					}
					else {
						appLog.info("institution 2 checkbox is already unselected");
					}
					if (click(driver, fp.getUploadNextButton(Workspace.FundraisingWorkspace, 30), "next button on upload window", action.SCROLLANDBOOLEAN)) {
						ThreadSleep(5000);
						if (isAlertPresent(driver)) {

							String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
							switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
							if (msg.trim().equals(FundsPageErrorMessage.pleaseSelectOneInstitution)) {
								appLog.info("correct error message to select at least one institution is found successfully");
							}
							else {
								appLog.error("error message to select at least one institution is not found");
								sa.assertTrue(false, "error message to select at least one institution is not found");
							}
						}
						else {
							appLog.error("alert is not present when no institution is selected and next is clicked");
							sa.assertTrue(false, "alert is not present when no institution is selected and next is clicked");
						}
					}
					else {
						appLog.error("next button on upload window is not clickable");
						sa.assertTrue(false, "next button on upload window is not clickable");
					}
					if (!fp.getUploadWindowStandardInst1Checkbox(60).isSelected()) {
						if (click(driver, fp.getUploadWindowStandardInst1Checkbox(60), "upload window standard inst 1 checkbox", action.SCROLLANDBOOLEAN)) {
							appLog.info("checking "+M7Institution1+" checkbox");
						}
					}
					else {
						appLog.info("institution 1 checkbox is already selected");
					}
					if (click(driver, fp.getUploadNextButton(Workspace.FundraisingWorkspace, 30), "next button on upload window", action.SCROLLANDBOOLEAN)) {
						
					
						if (fp.dragDropFiles("UploadFiles\\Module8\\MultipleInstUploadNegative", "DropLoc.jpg")) {
							appLog.info("files are successfully dropped into upload section");
							if (click(driver, fp.getCrossIcon(uploaded_file,30), "cross icon in front of "+uploaded_file+" file", action.BOOLEAN)) {
								appLog.info("cross icon in front of "+uploaded_file+" has been successfully clicked");
							}
							else {
								appLog.error("cross icon in front of "+uploaded_file+" could not be found");
								sa.assertTrue(false, "cross icon in front of "+uploaded_file+" could not be found");
							}
							if (fp.getCrossIcon(uploaded_file,10)==null) {
								appLog.info("uploaded file has been removed from upload document window after clicking on cross icon");
							}
							//verify uploaded file is not present in workspace

							List<String> el = compareMultipleList(driver,uploaded_file,fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage));
							if (!el.isEmpty()) {
								for (int i = 0;i<el.size();i++) {
									appLog.info("file is not available in content grid after clicking cancel button in upload: "+el.get(i));
									sa.assertTrue(true, el.get(i));
								}
							}else {
								appLog.info("no file is present on workspace, "+uploaded_file+" is not present");
								sa.assertTrue(false,uploaded_file+" is visible in "+Workspace.FundraisingWorkspace.toString() +" content grid");
							}
						}

						else {
							appLog.error("files could not be dragged and dropped before checking cross icon functionality");
							sa.assertTrue(false, "files could not be dragged and dropped before checking cross icon functionality");
						}
					}
					else {
						appLog.error("next button on upload window is not clickable");
						sa.assertTrue(false, "next button on upload window is not clickable");
					}
				}
				else {
					appLog.error("multiple institutions radio button is not clickable");
					sa.assertTrue(false, "multiple institutions radio button is not clickable");
				}
			}
			else {
				appLog.error("upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
				sa.assertTrue(false, "upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
			}
		}


		else {
			appLog.error("fund "+M7FundName1+ " is not found");
			sa.assertTrue(false, "fund "+M7FundName1+ " is not found");
		}
	}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	sa.assertAll();
}
	@Test
	public void M7tc011_UploadFileInStandardFolderMultipleInstitutionCorrectly_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	String recordCountValue;
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	String filesName =null;
	String instPath = M7Institution1 + "<break>" + M7Institution2;
	

	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"fundraising workspace view");

			
			String docpath = "UploadFiles\\Module8\\INV_Multiple";
			//providing contact access to contact 1 for inst 2
			if (fp.inviteContact(M7Institution2, M7Contact1EmailId, null, FolderType.Standard, "Upload", "Yes", "No",stdPath , Workspace.FundraisingWorkspace, M7Contact1EmailId)) {
				appLog.info(M7Contact2FirstName+ " "+ M7Contact2LastName+" has been given access for "+M7Institution2);
			}
			else {
				appLog.error("contact "+M7Contact1LastName+" could not be invited");
				sa.assertTrue(false, "contact "+M7Contact1LastName+" could not be invited");
			}
			
			if (fp.uploadFile(stdPath,instPath, docpath, null, UploadFileActions.Upload,
					Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
				appLog.info("File is upload successfullly");
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"fundraising workspace view");

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
						"fundraising Workspace refresh button", action.SCROLLANDBOOLEAN)) {
					recordCountValue=fp.getRecordCountvalue(Workspace.FundraisingWorkspace, 20);

					if(recordCountValue.contains(""+fp.getNoOfDocumentsOnGrid(Workspace.FundraisingWorkspace, PageName.FundsPage))){
						appLog.info("record count is successfully verified on institutions page");
					}else{
						appLog.error("Record Count not Verified on "+PageName.FundsPage.toString()+" "+Workspace.FundraisingWorkspace.toString());
						sa.assertTrue(false, "Record Count not Verified on "+PageName.FundsPage.toString()+" "+Workspace.FundraisingWorkspace.toString());	
					}
					
					 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileStandard);
					if (filesName != null) {
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName,date);
						sa.combineAssertions(saa);
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}
					
					
					// M2I2 institution
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
							"Investor workspace view");
					
					if (fp.verifyFolderPathdummy(stdPath, M7Institution2, null, M7FundName1, PageName.FundsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + M7Institution2 +"/" + stdPath);
						recordCountValue=fp.getRecordCountvalue(Workspace.FundraisingWorkspace, 20);

						if(recordCountValue.contains(""+fp.getNoOfDocumentsOnGrid(Workspace.FundraisingWorkspace, PageName.FundsPage))){
							appLog.info("record count is successfully verified on institutions page");		
						}else{
							appLog.error("Record Count not Verified on "+PageName.FundsPage.toString()+" "+Workspace.FundraisingWorkspace.toString());
							sa.assertTrue(false, "Record Count not Verified on "+PageName.FundsPage.toString()+" "+Workspace.FundraisingWorkspace.toString());	
						}

						
						}else{
							appLog.error(" Folder Structure Not Verified: " + M7Institution2 + "/"+ stdPath);
							sa.assertTrue(false, " Folder Structure Not  Verified: " + M7Institution2+ "/"  + stdPath);	
						}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("File is not uploaded in " + stdPath);
				sa.assertTrue(false, "File is not uploaded in " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
	
	@Test
	public void M7tc011_UploadFileInStandardFolderMultipleInstitutionCorrectly_ImpactCRM() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	String recordCountValue=null;
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	String filesName =null;

	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	// Institution1
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc011_UploadFileInStandardFolderMultipleInstitutionCorrectly_Action",
						excelLabel.UploadedFileStandard);
				 recordCountValue=fp.getRecordCountvalue(Workspace.FundraisingWorkspace, 20);
					
					if(recordCountValue.contains(""+fp.getNoOfDocumentsOnGrid(Workspace.FundraisingWorkspace, PageName.InstitutionsPage))){
						appLog.info("record count is verified successfully");
					}else{
						appLog.error("Record Count not Verified on "+PageName.InstitutionsPage.toString()+" "+Workspace.FundraisingWorkspace.toString());
						sa.assertTrue(false, "Record Count not Verified on "+PageName.InstitutionsPage.toString()+" "+Workspace.FundraisingWorkspace.toString());	
					}

				if (filesName != null) {

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	
	switchToDefaultContent(driver);
	
	// Institution2
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution2)) {
			appLog.info("Opened Institution : " + M7Institution2);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc011_UploadFileInStandardFolderMultipleInstitutionCorrectly_Action",
						excelLabel.UploadedFileStandard);
				 recordCountValue = fp.getRecordCountvalue(Workspace.FundraisingWorkspace, 20);
				 if(recordCountValue.contains(""+fp.getNoOfDocumentsOnGrid(Workspace.FundraisingWorkspace, PageName.InstitutionsPage))){
					 	appLog.error("Record Count Verified: Value is  "+recordCountValue+" -on- "+PageName.InstitutionsPage.toString()+" "+Workspace.FundraisingWorkspace.toString());
							
					}else{
						appLog.error("Record Count not Verified on "+PageName.InstitutionsPage.toString()+" "+Workspace.FundraisingWorkspace.toString());
						appLog.error("On page : "+fp.getNoOfDocumentsOnGrid(Workspace.FundraisingWorkspace, PageName.ContactsPage)+"Expected : "+recordCountValue);
						sa.assertTrue(false, "Record Count not Verified on "+PageName.InstitutionsPage.toString()+" "+Workspace.FundraisingWorkspace.toString());	
					}

				if (filesName != null) {

				//	saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
				//			"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);
//
//					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution2);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution2);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
	
	
			
			// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
							"fundraising workspace view");
					
					//contact1 checking on inst 1 folder
					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);
						recordCountValue = fp.getRecordCountvalue(Workspace.FundraisingWorkspace, 20);
						 if(recordCountValue.contains(""+fp.getNoOfDocumentsOnGrid(Workspace.FundraisingWorkspace, PageName.ContactsPage))){
									appLog.error("Record Count Verified: Value is  "+recordCountValue+" -on- "+PageName.ContactsPage.toString()+" "+Workspace.FundraisingWorkspace.toString());
									
						}else{
							appLog.error("Record Count not Verified on "+PageName.ContactsPage.toString()+" "+Workspace.FundraisingWorkspace.toString());
							appLog.error("On page : "+fp.getNoOfDocumentsOnGrid(Workspace.FundraisingWorkspace, PageName.ContactsPage)+"Expected : "+recordCountValue);
							sa.assertTrue(false, "Record Count not Verified on "+PageName.ContactsPage.toString()+" "+Workspace.FundraisingWorkspace.toString());	
						}

						 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc011_UploadFileInStandardFolderMultipleInstitutionCorrectly_Action",
								excelLabel.UploadedFileStandard);

						if (filesName != null) {

							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

						//contact1 checking on inst 2 folder
						if (fp.verifyFolderPathdummy(stdPath, M9Institution2, null, M7FundName1, PageName.ContactsPage,
								Workspace.FundraisingWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + stdPath);
							

							 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc011_UploadFileInStandardFolderMultipleInstitutionCorrectly_Action",
									excelLabel.UploadedFileStandard);

							if (filesName != null) {

								saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName,
										"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

								sa.combineAssertions(saa);

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}
						}
					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	//
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc011_UploadFileInStandardFolderMultipleInstitutionCorrectly_ImpactInvestor() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	SoftAssert sa = new SoftAssert();
	String recordCountValue = null;
	String filesName = "";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	//Investor Side Contact1
	
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
	
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			
			recordCountValue=ifp.getRecordCountvalue(investorSideWorkSpace.PotentialInvestment, 20);
			 if(recordCountValue.contains(""+ifp.getNoOfDocumentsGrid(Workspace.FundraisingWorkspace, PageName.PotentialInvestmentPage))){
			appLog.error("Record Count Verified: Value is  "+recordCountValue+" -on- "+investorSideWorkSpace.PotentialInvestment.toString());
						
			}else{
				appLog.error("Record Count not Verified on "+investorSideWorkSpace.PotentialInvestment.toString());
				appLog.error("Expected : 9"+"         "+"Actual : "+recordCountValue);
				sa.assertTrue(false, "Record Count not Verified on "+investorSideWorkSpace.PotentialInvestment.toString());	
			}
			 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc011_UploadFileInStandardFolderMultipleInstitutionCorrectly_Action",
					excelLabel.UploadedFileStandard);
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
//	lp.investorLogout();
//	
//	driver.close();
//	
//	//Investor Side Contact2
//	
//	config(browserToLaunch);
//	lp = new LoginPageBusinessLayer(driver);
//	fp = new FundsPageBusinessLayer(driver);
//	ifp = new InvestorFirmPageBusinesslayer(driver);
//	lp.investorLogin(M7Contact2EmailId, adminPassword);
//	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
	
		if (fp.verifyFolderPathdummy(stdPath, M7Institution2, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			
			recordCountValue=ifp.getRecordCountvalue(investorSideWorkSpace.PotentialInvestment, 20);
			 if(recordCountValue.contains(""+ifp.getNoOfDocumentsGrid(Workspace.FundraisingWorkspace, PageName.PotentialInvestmentPage))){
			appLog.error("Record Count Verified: Value is  "+recordCountValue+" -on- "+investorSideWorkSpace.PotentialInvestment.toString());
						
			}else{
				appLog.error("Record Count not Verified on "+investorSideWorkSpace.PotentialInvestment.toString());
				appLog.error("Expected : 2"+"         "+"Actual : "+recordCountValue);
				sa.assertTrue(false, "Record Count not Verified on "+investorSideWorkSpace.PotentialInvestment.toString());	
			}
			 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M7tc011_UploadFileInStandardFolderMultipleInstitutionCorrectly_Action",
					excelLabel.UploadedFileStandard);
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	
	lp.investorLogout();
	sa.combineAssertions(saa);
	sa.assertAll();
}
@Test
	public void M7tc011_UploadFileInStandardFolderMultipleInstitutionCorrectly_RevertChanges() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	SoftAssert saa = new SoftAssert();
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"fundraising workspace view");
			if (fp.verifyFolderPathdummy("", M7Institution2, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + M7Institution2 +"/" + stdPath);

				if (fp.revokeContactAccess(M7Contact1EmailId, Workspace.FundraisingWorkspace)) {
					appLog.info("contact acess has been successfully removed for "+M7Contact1EmailId);
				}
				else {
					appLog.error("contact access could not be removed for "+M7Contact1EmailId);
					sa.assertTrue(false, "contact access could not be removed for "+M7Contact1EmailId);
				}
			}
			else {
				appLog.error("folder structure for "+M7Institution2 +" could not be verified");
				sa.assertTrue(false, "folder structure for "+M7Institution2 +" could not be verified");
			}
		}
		else {
			appLog.error("fund "+M7FundName1+" could not be found");
			sa.assertTrue(false, "fund "+M7FundName1+" could not be found");
		}
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
	sa.combineAssertions(saa);
	sa.assertAll();
}
	@Test
	public void M7tc012_UploadFileonStandardFolderNegativeCaseThroughInvestorPortal() {
	
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	FundsPageBusinessLayer fpb = new FundsPageBusinessLayer(driver);
	SoftAssert saa = new SoftAssert();
	WebElement ele = null;
	String msg = null;

	String date = null;
	String docpath = "UploadFiles\\Module8\\InvSide_Files";
	String path = System.getProperty("user.dir") + "\\" + docpath + "\\";
	String filesName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.UploadedFileStandard);
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	String parentWinID=null;

	lp.investorLogin(M7Contact1EmailId, adminPassword);
	
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {

		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage, null, 60)) {
			
			appLog.info(" Folder Structure Verified On Investor Side for " + " "
					+ investorSideWorkSpace.PotentialInvestment.toString() + " " + stdPath);

			if (click(driver, ifp.getUploadIcon(30), "Uopload icon", action.SCROLLANDBOOLEAN)) {
				
				appLog.info(" Clicked on Upload Icon " + " " + investorSideWorkSpace.PotentialInvestment.toString()
						+ " " + stdPath);
				ThreadSleep(10000);
				 parentWinID = switchOnWindow(driver);
				 
				if (parentWinID != null) {
					
					appLog.info("Update window is successfully opened.");

					ele = fpb.getChooseFileButton(20);
					if (ele != null) {
						appLog.info(" Choose File Button is Present ");
					} else {
						appLog.error(" Choose File Button is Not Present ");
						saa.assertTrue(false, " Choose File Button is Not Present ");

					}

					ele = ifp.getcancelBtn(20);
					if (ele != null) {
						appLog.info(" Cancel Button is Present ");
					} else {
						appLog.error(" Cancel Button is Not Present ");
						saa.assertTrue(false, " Cancel Button is Not Present ");

					}

					ele = ifp.getAddButton(20);
					if (ele != null) {
						appLog.info(" Add Button is Present ");
						if (click(driver, ele, "Add Button", action.BOOLEAN)) {
							ele = ifp.getPleaseSelectDocToUpload(20);
							if (ele != null) {
								msg = ele.getText().trim();
								if (msg.equalsIgnoreCase(
										InvestorFirmPageErrorMessage.pleaseSelectAdocumentToUploadMsg)) {
									appLog.info(" Message Verified : " + msg);
								} else {
									appLog.error(" Message Not Verified  Actual : " + msg + "    " + "Expected : "
											+ InvestorFirmPageErrorMessage.pleaseSelectAdocumentToUploadMsg);
									saa.assertTrue(false, " Message Not Verified  Actual : " + msg + "    "
											+ "Expected : "
											+ InvestorFirmPageErrorMessage.pleaseSelectAdocumentToUploadMsg);
								}
							} else {
								appLog.error(" Msg element not Present ");
								saa.assertTrue(false, " Msg element not Present ");
							}

						} else {
							appLog.error(" Not Able to Click Add Button");
							saa.assertTrue(false, " Not Able to Click Add Button ");
						}

						if (sendKeys(driver, fpb.getChooseFileButton(60), path + filesName, "Choose Button",
								action.BOOLEAN)) {
							appLog.info(" Entered  Document path");

								click(driver, ifp.getcancelBtn(20), "Cancel ", action.BOOLEAN) ;
									appLog.info(" Click on Cancel Button");
									
								

						} else {
							appLog.error("Not Able to Send Document Path.");
							sa.assertTrue(false, "Not Able to Send Document Path.");
						}

					} else {
						appLog.error(" Add Button is Not Present ");
						saa.assertTrue(false, " Add Button is Not Present ");

					}
					driver.switchTo().window(parentWinID);
				} else {
					appLog.error("Upload Window is not Open");
					sa.assertTrue(false, "Upload Window is not Open");
				}
				
			} else {
				appLog.error(" Not Able to Click Upload Icon " + " "
						+ investorSideWorkSpace.PotentialInvestment.toString() + " " + stdPath);
				saa.assertTrue(false, " Not Able to Click Upload Icon " + " "
						+ investorSideWorkSpace.PotentialInvestment.toString() + " " + stdPath);

			}

			switchToDefaultContent(driver);
			ThreadSleep(5000);
			List<WebElement> docList = ifp.getDocListonInvestmentTab();
			List<String> docName = new ArrayList<String>();
			for (WebElement ele1 : docList) {
				docName.add(ele1.getText().trim());
			}
			appLog.info("Document List :  "+docName);
			if(!docName.contains(filesName)){
				appLog.info("Document Not Present In the Grid : "+filesName);
				
			}else{
				appLog.error("Document  Present In the Grid : "+filesName);
				sa.assertTrue(false, "Document  Present In the Grid : "+filesName);
			}
			
			filesName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
					excelLabel.UpdatedFileStandard);
			path = System.getProperty("user.dir") + "\\" + docpath + "\\";
			System.err.println("<<<<<<<Files Path>>>>>>>>> : "+path+filesName);
			
			if (click(driver, ifp.getUploadIcon(30), "Uopload icon", action.SCROLLANDBOOLEAN)) {

				appLog.info(" Clicked on Upload Icon " + " " + investorSideWorkSpace.PotentialInvestment.toString()
						+ " " + stdPath);
				ThreadSleep(10000);
				parentWinID = switchOnWindow(driver);

				if (parentWinID != null) {

					appLog.info("Update window is successfully opened.");
					ThreadSleep(10000);
					
					if (sendKeys(driver, fpb.getChooseFileButton(60), path+filesName, "Choose Button", action.BOOLEAN)) {
						ThreadSleep(5000);
						if (click(driver, ifp.getAddButton(60), "Add button", action.BOOLEAN)) {
							
							ele = ifp.getDocAlreadyMsg(20);
							if (ele != null) {
								msg = ele.getText().trim();
								if (msg.equalsIgnoreCase(InvestorFirmPageErrorMessage.docAlreadyUploadedByOtherMsg)) {
									appLog.info("Already Uploaded BY Others Msg Verified ");
								} else {
									appLog.error("Already Uploaded BY Others Msg Verified  Expected: "
											+ InvestorFirmPageErrorMessage.docAlreadyUploadedByOtherMsg + " /tActual: " + msg);
									BaseLib.sa.assertTrue(false, "Update message is not verified. Expected: "
											+ InvestorFirmPageErrorMessage.docAlreadyUploadedByOtherMsg + " /t Actual: " + msg);
								}

							}else{
								appLog.error("Already uploaded By Other Element not Found");
								sa.assertTrue(false, "Already uploaded By Other Element not Found");	
							}
							
							click(driver, ifp.getDocAlreadyMsgCloseBtn(20), "Doc Already Msg Close Button", action.BOOLEAN);
							
							
							
						}else{
							appLog.error("Not Able to Click Add Button");
							sa.assertTrue(false, "Not Able to Add  Button");
						}
					} else {
						appLog.error("Not Able to Send Document Path.");
						sa.assertTrue(false, "Not Able to Send Document Path.");
					}

					driver.switchTo().window(parentWinID);
				} else {
					appLog.error("Upload Window is not Open");
					sa.assertTrue(false, "Upload Window is not Open");
				}

			} else {
				appLog.error(" Not Able to Click Upload Icon " + " "
						+ investorSideWorkSpace.PotentialInvestment.toString() + " " + stdPath);
				saa.assertTrue(false, " Not Able to Click Upload Icon " + " "
						+ investorSideWorkSpace.PotentialInvestment.toString() + " " + stdPath);

			}
			

		} else {
			appLog.error(" Folder Structure Not Verified On Investor Side for " + " "
					+ investorSideWorkSpace.PotentialInvestment.toString() + " " + stdPath);
			saa.assertTrue(false, " Folder Structure Not Verified On Investor Side for " + " "
					+ investorSideWorkSpace.PotentialInvestment.toString() + " " + stdPath);
		}

	} else {
		appLog.info("Not able to click on PotentialInvestment tab");
		sa.assertTrue(false, "Not able to click on PotentialInvestment tab");
	}
	switchToDefaultContent(driver);
	lp.investorLogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc013_UploadFileonStandardFolderThroughInvestorPortal_Action() {
	
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	SoftAssert saa = new SoftAssert();
	
	String date=null;
	String docpath = "UploadFiles\\Module8\\InvSide_Files";
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.UploadedFileStandard);;
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
	
		if (ifp.uploadUpdateFileInvestorSide(stdPath, filesName, null, null, FolderType.Standard, docpath, "yes", 30,
				PageName.PotentialInvestmentPage, null, null, WorkSpaceAction.UPLOAD)) {
			
			appLog.info("Upload Successful");
			
			if(click(driver, ifp.getRefreshIcon(20), "Refresh Icon", action.SCROLLANDBOOLEAN)){
				
				date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
				saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, filesName, M7Contact1FirstName + " " + M7Contact1LastName, date);
				sa.combineAssertions(saa);
				
			}else{
				appLog.error("Not Able to Click Refresh Icon so Cannot check Upoaded File");
				sa.assertTrue(false, "Not Able to Click Refresh Icon so Cannot check Upoaded File");	
			}
			
			
		}else{
			appLog.error("Upload Unsuccessful");
			sa.assertTrue(false, "Upload Unsuccessful");	
		}

			
	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	sa.assertAll();
}
	@Test
	public void M7tc013_UploadFileonStandardFolderThroughInvestorPortal_ImpactCRM() {
	
	// CRM Side 
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	BasePageBusinessLayer bp =new BasePageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	SoftAssert saa = new SoftAssert();
	SoftAssert sa = new SoftAssert();
	String date=null;
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.UploadedFileStandard);;
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"FundraisingWorkspace view");

			
		
			if(fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60))
			{
			
				appLog.info("Folder Verified : "+stdPath);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"Investor workspace view");

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
				

					if (filesName != null) {
						
						date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", M7Contact1FirstName + " " + M7Contact1LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("Folder Structure not Verified " + stdPath);
				sa.assertTrue(false, "Folder Structure not Verified " + stdPath);
			}
				
			}else{
				appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
				sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);	
			}
		
				

		} else {
			appLog.info("Not Able to Click Fund Tab");
			sa.assertTrue(false, "Not Able to Click Fund Tab");
		}
	
	
	// Institution1
	
		switchToDefaultContent(driver);
		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedInstitution(M7Institution1)) {
				appLog.info("Opened Institution : " + M7Institution1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"Investor workspace view");
				
				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.FundraisingWorkspace, 60)) {
					
					appLog.info(" Folder Structure Verified: " + stdPath);
					
					if (filesName != null) {

						date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", M7Contact1FirstName + " " + M7Contact1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
		
		
		// Contact Tab
		
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
				appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"Investor workspace view");
				

				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
						Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);
					
				

					if (filesName != null) {

						date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

						saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", M7Contact1FirstName + " " + M7Contact1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			}
		} else {
			appLog.error("Not able to Click Contact tab ");
			sa.assertTrue(false, "Not able to Click Contact tab ");
		}

	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	
}

	@Test
	public void M7tc014_1_UploadAlreadyExistingFileCommon() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String duplicateFile = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileCommon);

	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String dragFromFolder = "UploadFiles\\Module8\\ExistingUpload";
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					if (parentID!=null) {
						if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
							if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
								//check heading of duplicate documents
								if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
									appLog.info("duplicate documents heading is successfully verified");
								}
								else {
									appLog.error("duplicate documents heading is not present");
									sa.assertTrue(false, "duplicate documents heading is not present");
								}
								if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
									appLog.info("duplicate documents sub heading is successfully verified");
								}
								else {
									appLog.error("duplicate documents sub heading is not present");
									sa.assertTrue(false, "duplicate documents sub heading is not present");
								}
								if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
									appLog.info("folder location sub heading is successfully verified");
								}
								else {
									appLog.error("folder location sub heading is not visible");
									sa.assertTrue(false, "folder location sub heading is not visible");
								}
								if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
									appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
								}
								else {
									appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
								}
								if (fp.getUpdateAllButton(60)!=null) {
									appLog.info("update all button is present");
								}
								else {
									appLog.error("update all button is not present on duplicate document window");
									sa.assertTrue(false, "update all button is not present on duplicate document window");
								}

								if (fp.getDuplicateDocumentValue(60).getText().trim().equals(duplicateFile)) {
									appLog.info(duplicateFile + " is duplicate according to alert window");
								}
								else {
									appLog.error("duplicate file name name is wrong on duplicate document window");
									sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
								}
								if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > "+cmnPath)) {
									appLog.info("folder name" + M7FundName1 + " > "+cmnPath+" for duplicate files is correct");
								}
								else {
									appLog.error("folder path for duplicate files is wrong");
									sa.assertTrue(false, "folder path for duplicate files is wrong");
								}

								if (fp.getIgnoreAllButton(60)!=null) {
									appLog.info("ignore all button is successfully present");
								}
								else {
									appLog.error("ignore all button is not present on duplicate docuemnts heading");
									sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
								}
								try {
									click(driver, fp.getIgnoreAllButton(60), "ignore all button in duplicate document window", action.SCROLLANDBOOLEAN);
									appLog.info("Clicked Ignore All Button");
								} catch (Exception e) {
									appLog.error("Not Able to Click Ignore All Button");
								}
								ThreadSleep(5000);
							}
						}
						else {
							appLog.error("drag and drop of files is not successful");
							sa.assertTrue(false, "drag and drop of files is not successful");
						}
						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
					}
					else {
						appLog.error("could not find child window to switch");
						sa.assertTrue(false, "could not find child window to switch");
					}
					if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),"refresh button", action.SCROLLANDBOOLEAN)) {
						//verify upload1.pdf is present

						List<WebElement> docList = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
						List<String> docName = new ArrayList<String>();
						for (WebElement ele1 : docList) {
							docName.add(ele1.getText().trim());
						}
						appLog.info("Document List :  "+docName);
						if(!docName.contains(duplicateFile)){
							appLog.error("Document Not Present In the Grid : "+duplicateFile);
							sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);

						}else{
							appLog.info("Document  Present In the Grid : "+duplicateFile);

						}

					}
					if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
						parentID = switchOnWindow(driver);
						if (parentID!=null) {
							if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
								if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
									if (click(driver, fp.getUpdateAllButton(60), "update all button on duplicate documents window", action.SCROLLANDBOOLEAN)) {
										ThreadSleep(5000);
										if (isAlertPresent(driver)) {

											String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
											switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
											if (msg.trim().equals(FundsPageErrorMessage.documentUpldSuccessfully)) {
												appLog.info("correct alert for document upload is found successfully");
											}
											else {
												appLog.error("correct document upload alert is not found");
												sa.assertTrue(false, "correct document upload alert is not found");
											}

										}
										else {
											appLog.error("alert is not present for successfully upload of documents");
											sa.assertTrue(false, "alert is not present for successfully upload of documents");
										}
									}
									else {
										appLog.error("update all button is not clickable on duplicate documents window");
										sa.assertTrue(false, "update all button is not clickable on duplicate documents window");
									}
								}
								else {
									appLog.error("save button is not clickable on upload window");
									sa.assertTrue(false, "save button is not clickable on upload window");
								}
							}
							else {
								appLog.error("drag and drop of files is not successful");
								sa.assertTrue(false, "drag and drop of files is not successful");
							}
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
						}
						else {
							appLog.error("could not find child window to switch");
							sa.assertTrue(false, "could not find child window to switch");
						}

						if (click(driver,fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid funds page", action.SCROLLANDBOOLEAN)) {
							//verify upload1.pdf is present
							List<WebElement> docList = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
							List<String> docName = new ArrayList<String>();
							for (WebElement ele1 : docList) {
								docName.add(ele1.getText().trim());
							}
							appLog.info("Document List :  "+docName);
							if(!docName.contains(duplicateFile)){
								appLog.error("Document Not Present In the Grid : "+duplicateFile);
								sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
							}else{
								appLog.info("Document  Present In the Grid : "+duplicateFile);
							}
						}
						else {
							appLog.error("content grid refresh button is not clickable");
							sa.assertTrue(false, "content grid refresh button is not clickable");
						}

					}
					else {
						appLog.error("upload icon on "+Workspace.FundraisingWorkspace.toString() +" is not clickable");
						sa.assertTrue(false, "upload icon on "+Workspace.FundraisingWorkspace.toString() +" is not clickable");
					}


				}
				else {
					appLog.error("upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
					sa.assertTrue(false, "upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());

				}
			}
			else {
				appLog.error("folder "+ cmnPath+ " is not found on workspace");
				sa.assertTrue(false, "folder "+ cmnPath+ " is not found on workspace");
			}
		}
		else {
			appLog.error("funds "+ M7FundName1 + " is not found on funds page");
			sa.assertTrue(false, "funds "+ M7FundName1 + " is not found on funds page");
		}
	}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
	@Test
	public void M7tc014_2_UploadAlreadyExistingFileInternal() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		String parentID=null;
		SoftAssert sa = new SoftAssert();
		SoftAssert saa = new SoftAssert();
		String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
		String duplicateFile = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileInternal);

		String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
		String dragFromFolder = "UploadFiles\\Module8\\ExistingUpload";
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M7FundName1)) {
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
				if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
					if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
						parentID = switchOnWindow(driver);
						if (parentID!=null) {
							if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
								if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
									//check heading of duplicate documents
									if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
										appLog.info("duplicate documents heading is successfully verified");
									}
									else {
										appLog.error("duplicate documents heading is not present");
										sa.assertTrue(false, "duplicate documents heading is not present");
									}
									if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
										appLog.info("duplicate documents sub heading is successfully verified");
									}
									else {
										appLog.error("duplicate documents sub heading is not present");
										sa.assertTrue(false, "duplicate documents sub heading is not present");
									}
									if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
										appLog.info("folder location sub heading is successfully verified");
									}
									else {
										appLog.error("folder location sub heading is not visible");
										sa.assertTrue(false, "folder location sub heading is not visible");
									}
									if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
										appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
									}
									else {
										appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
									}
									if (fp.getUpdateAllButton(60)!=null) {
										appLog.info("update all button is present");
									}
									else {
										appLog.error("update all button is not present on duplicate document window");
										sa.assertTrue(false, "update all button is not present on duplicate document window");
									}
									if (fp.getIgnoreAllButton(60)!=null) {
										appLog.info("ignore all button is successfully present");
									}
									else {
										appLog.error("ignore all button is not present on duplicate docuemnts heading");
										sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
									}
									if (fp.getDuplicateDocumentValue(60).getText().trim().equals(duplicateFile)) {
										appLog.info(duplicateFile + " is duplicate according to alert window");
									}
									else {
										appLog.error("duplicate file name name is wrong on duplicate document window");
										sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
									}
									if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1+" > " + intPath)) {
										appLog.info("folder name"+M7FundName1+" > " + intPath+" for duplicate files is correct");
									}
									else {
										appLog.error("folder path for duplicate files is wrong");
										sa.assertTrue(false, "folder path for duplicate files is wrong");
									}
								}
								else {
									appLog.error("save button on upload documents window is not clickable");
									sa.assertTrue(false, "save button on upload documents window is not clickable");
								}
							}
							else {
								appLog.error("drag and drop of files is not successful");
								sa.assertTrue(false, "drag and drop of files is not successful");
							}
							try {
								click(driver, fp.getIgnoreAllButton(60), "ignore all button in duplicate document window", action.SCROLLANDBOOLEAN);
								appLog.info("Clicked Ignore All Button");
							} catch (Exception e) {
								appLog.error("Not Able to Click Ignore All Button");
							}ThreadSleep(5000);
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

						}
						else {
							appLog.error("could not find child window to switch");
							sa.assertTrue(false, "could not find child window to switch");
						}
						if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),"refresh button", action.SCROLLANDBOOLEAN)) {
							//verify upload1.pdf is present

							List<WebElement> docList = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
							List<String> docName = new ArrayList<String>();
							for (WebElement ele1 : docList) {
								docName.add(ele1.getText().trim());
							}
							appLog.info("Document List :  "+docName);
							if(!docName.contains(duplicateFile)){
								appLog.error("Document Not Present In the Grid : "+duplicateFile);
								sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);

							}else{
								appLog.info("Document  Present In the Grid : "+duplicateFile);

							}

						}
						if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
							parentID = switchOnWindow(driver);
							if (parentID!=null) {
								if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
									if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
										if (click(driver, fp.getUpdateAllButton(60), "update all button on duplicate documents window", action.SCROLLANDBOOLEAN)) {
											ThreadSleep(5000);
											if (isAlertPresent(driver)) {

												String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
												switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
												if (msg.trim().equals(FundsPageErrorMessage.documentUpldSuccessfully)) {
													appLog.info("correct alert for document upload is found successfully");
												}
												else {
													appLog.error("correct document upload alert is not found");
													sa.assertTrue(false, "correct document upload alert is not found");
												}
												
											}
											else {
												appLog.error("alert is not present for successfully upload of documents");
												sa.assertTrue(false, "alert is not present for successfully upload of documents");
											}
										}
										else {
											appLog.error("update all button is not clickable on duplicate documents window");
											sa.assertTrue(false, "update all button is not clickable on duplicate documents window");
										}
									}
									else {
										appLog.error("save button is not clickable on upload window");
										sa.assertTrue(false, "save button is not clickable on upload window");
									}

								}
								else {
									appLog.error("drag and drop of files is not successful");
									sa.assertTrue(false, "drag and drop of files is not successful");
								}
								driver.switchTo().window(parentID);
								switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							}
							else {
								appLog.error("child window to switch is not found");
								sa.assertTrue(false, "child window to switch is not found");
							}
						}
						else {
							appLog.error("upload icon on "+Workspace.FundraisingWorkspace.toString() +" is not clickable");
							sa.assertTrue(false, "upload icon on "+Workspace.FundraisingWorkspace.toString() +" is not clickable");
						}
							if (click(driver,fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid funds page", action.SCROLLANDBOOLEAN)) {
								//verify upload1.pdf is present

								List<WebElement> docList = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
								List<String> docName = new ArrayList<String>();
								for (WebElement ele1 : docList) {
									docName.add(ele1.getText().trim());
								}
								appLog.info("Document List :  "+docName);
								if(!docName.contains(duplicateFile)){
									appLog.error("Document Not Present In the Grid : "+duplicateFile);
									sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
								}else{
									appLog.info("Document  Present In the Grid : "+duplicateFile);

								}

							}
							else {
								appLog.error("content grid refresh button is not clickable");
								sa.assertTrue(false, "content grid refresh button is not clickable");
							}
					

					}
					else {
						appLog.error("upload icon on "+Workspace.FundraisingWorkspace.toString() +" is not clickable");
						sa.assertTrue(false, "upload icon on "+Workspace.FundraisingWorkspace.toString() +" is not clickable");
					}
				}
				else {
					appLog.error("folder "+ intPath+ " is not found on workspace");
					sa.assertTrue(false, "folder "+ intPath+ " is not found on workspace");
				}
			}
			else {
				appLog.error("funds "+ M7FundName1 + " is not found on funds page");
				sa.assertTrue(false, "funds "+ M7FundName1 + " is not found on funds page");
			}
		}
		else {
			appLog.error("funds tab is not clickable");
			sa.assertTrue(false, "funds tab is not clickable");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}
	@Test
	public void M7tc014_3_UploadAlreadyExistingFileShared() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String duplicateFile = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileShared);
	
	 String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String dragFromFolder = "UploadFiles\\Module8\\ExistingUpload";
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
			if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
				parentID = switchOnWindow(driver);
				if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
					if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
						//check heading of duplicate documents
						if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
							appLog.info("duplicate documents heading is successfully verified");
						}
						else {
							appLog.error("duplicate documents heading is not present");
							sa.assertTrue(false, "duplicate documents heading is not present");
						}
						if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
							appLog.info("duplicate documents sub heading is successfully verified");
						}
						else {
							appLog.error("duplicate documents sub heading is not present");
							sa.assertTrue(false, "duplicate documents sub heading is not present");
						}
						if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
							appLog.info("folder location sub heading is successfully verified");
						}
						else {
							appLog.error("folder location sub heading is not visible");
							sa.assertTrue(false, "folder location sub heading is not visible");
						}
						if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
							appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
						}
						else {
							appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
						}
						if (fp.getUpdateAllButton(60)!=null) {
							appLog.info("update all button is present");
						}
						else {
							appLog.error("update all button is not present on duplicate document window");
							sa.assertTrue(false, "update all button is not present on duplicate document window");
						}
						if (fp.getIgnoreAllButton(60)!=null) {
							appLog.info("ignore all button is successfully present");
						}
						else {
							appLog.error("ignore all button is not present on duplicate docuemnts heading");
							sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
						}
						if (fp.getDuplicateDocumentValue(60).getText().trim().equals(duplicateFile)) {
							appLog.info(duplicateFile + " is duplicate according to alert window");
						}
						else {
							appLog.error("duplicate file name name is wrong on duplicate document window");
							sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
						}
						if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > " +shdPath)) {
							appLog.info("folder name "+M7FundName1 + " > " +shdPath+"for duplicate files is correct");
						}
						else {
							appLog.error("folder path for duplicate files is wrong");
							sa.assertTrue(false, "folder path for duplicate files is wrong");
						}
						try {
							click(driver, fp.getIgnoreAllButton(60), "ignore all button in duplicate document window", action.SCROLLANDBOOLEAN);
							appLog.info("Clicked Ignore All Button");
						} catch (Exception e) {
							appLog.error("Not Able to Click Ignore All Button");
						}ThreadSleep(5000);	
						driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),"refresh button", action.SCROLLANDBOOLEAN)) {
									//verify upload1.pdf is present
									
									List<WebElement> docList = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
									List<String> docName = new ArrayList<String>();
									for (WebElement ele1 : docList) {
										docName.add(ele1.getText().trim());
									}
									appLog.info("Document List :  "+docName);
									if(!docName.contains(duplicateFile)){
										appLog.error("Document Not Present In the Grid : "+duplicateFile);
										sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
										
									}else{
										appLog.info("Document  Present In the Grid : "+duplicateFile);
										
									}
									
								}
								if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
								parentID = switchOnWindow(driver);
								if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
									if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
										if (click(driver, fp.getUpdateAllButton(60), "update all button on duplicate documents window", action.SCROLLANDBOOLEAN)) {
											ThreadSleep(5000);
											if (isAlertPresent(driver)) {
											
											String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
											switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
											if (msg.trim().equals(FundsPageErrorMessage.documentUpldSuccessfully)) {
												appLog.info("correct alert for document upload is found successfully");
											}
											else {
												appLog.error("correct document upload alert is not found");
												sa.assertTrue(false, "correct document upload alert is not found");
											}
											
											
											driver.switchTo().window(parentID);
											switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
											if (click(driver,fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid funds page", action.SCROLLANDBOOLEAN)) {
												//verify upload1.pdf is present
												
												List<WebElement> docList = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
												List<String> docName = new ArrayList<String>();
												for (WebElement ele1 : docList) {
													docName.add(ele1.getText().trim());
												}
												appLog.info("Document List :  "+docName);
												if(!docName.contains(duplicateFile)){
													appLog.error("Document Not Present In the Grid : "+duplicateFile);
													sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
												}else{
													appLog.info("Document  Present In the Grid : "+duplicateFile);
													
												}
												
												}
											
											else {
												appLog.error("content grid refresh button is not clickable");
												sa.assertTrue(false, "content grid refresh button is not clickable");
											}
											}
											else {
												appLog.error("alert is not present for successfully upload of documents");
												sa.assertTrue(false, "alert is not present for successfully upload of documents");
											}
										}
										else {
											appLog.error("update all button is not clickable on duplicate documents window");
											sa.assertTrue(false, "update all button is not clickable on duplicate documents window");
										}
									}
									else {
										appLog.error("save button is not clickable on upload window");
										sa.assertTrue(false, "save button is not clickable on upload window");
									}
								}
								else {
									appLog.error("drag and drop of files is not successful");
									sa.assertTrue(false, "drag and drop of files is not successful");
								}
								}
								else {
									appLog.error("upload icon on "+Workspace.FundraisingWorkspace.toString() +" is not clickable");
									sa.assertTrue(false, "upload icon on "+Workspace.FundraisingWorkspace.toString() +" is not clickable");
								}
					}
					else {
						appLog.error("save button on upload documents window is not clickable");
						sa.assertTrue(false, "save button on upload documents window is not clickable");
					}
						}
				else {
					appLog.error("drag and drop of files is not successful");
					sa.assertTrue(false, "drag and drop of files is not successful");
				}
					}
			else {
				appLog.error("upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
				sa.assertTrue(false, "upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
				
			}
				}
			else {
				appLog.error("folder "+ shdPath+ " is not found on workspace");
				sa.assertTrue(false, "folder "+ shdPath+ " is not found on workspace");
			}
			}
		else {
			appLog.error("funds "+ M7FundName1 + " is not found on funds page");
			sa.assertTrue(false, "funds "+ M7FundName1 + " is not found on funds page");
		}
			}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc014_4_UploadAlreadyExistingFileStandardSingleInstitution() {
	
LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
String parentID=null;
SoftAssert sa = new SoftAssert();
SoftAssert saa = new SoftAssert();
String standardPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
String duplicateFile = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);

 String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
String dragFromFolder = "UploadFiles\\Module8\\ExistingUpload";
lp.CRMLogin(CRMUser1EmailID, adminPassword);
if (bp.clickOnTab(TabName.FundsTab)) {
	if (fp.clickOnCreatedFund(M7FundName1)) {
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
		if (fp.verifyFolderPathdummy(standardPath, M7Institution1, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
		if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
			parentID = switchOnWindow(driver);
			if (click(driver, fp.getUploadNextButton(Workspace.FundraisingWorkspace, 30),"next button on upload window standard folder", action.SCROLLANDBOOLEAN)) {
				
			
			if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
				if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
					//check heading of duplicate documents
					if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
						appLog.info("duplicate documents heading is successfully verified");
					}
					else {
						appLog.error("duplicate documents heading is not present");
						sa.assertTrue(false, "duplicate documents heading is not present");
					}
					if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
						appLog.info("duplicate documents sub heading is successfully verified");
					}
					else {
						appLog.error("duplicate documents sub heading is not present");
						sa.assertTrue(false, "duplicate documents sub heading is not present");
					}
					if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
						appLog.info("folder location sub heading is successfully verified");
					}
					else {
						appLog.error("folder location sub heading is not visible");
						sa.assertTrue(false, "folder location sub heading is not visible");
					}
					if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
						appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
					}
					else {
						appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
					}
					if (fp.getUpdateAllButton(60)!=null) {
						appLog.info("update all button is present");
					}
					else {
						appLog.error("update all button is not present on duplicate document window");
						sa.assertTrue(false, "update all button is not present on duplicate document window");
					}
					if (fp.getIgnoreAllButton(60)!=null) {
						appLog.info("ignore all button is successfully present");
					}
					else {
						appLog.error("ignore all button is not present on duplicate docuemnts heading");
						sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
					}
					if (fp.getDuplicateDocumentValue(60).getText().trim().equals(duplicateFile)) {
						appLog.info(duplicateFile + " is duplicate according to alert window");
					}
					else {
						appLog.error("duplicate file name name is wrong on duplicate document window");
						sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
					}
					if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > " + M7Institution1+" > " + standardPath)) {
						appLog.info("folder name for duplicate files is correct");
					}
					else {
						appLog.error("folder path for duplicate files is wrong");
						sa.assertTrue(false, "folder path for duplicate files is wrong");
					}
					try {
						click(driver, fp.getIgnoreAllButton(60), "ignore all button in duplicate document window", action.SCROLLANDBOOLEAN);
						appLog.info("Clicked Ignore All Button");
					} catch (Exception e) {
						appLog.error("Not Able to Click Ignore All Button");
					}ThreadSleep(5000);	
					driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),"refresh button", action.SCROLLANDBOOLEAN)) {
								//verify upload1.pdf is present
								
								List<WebElement> docList = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
								List<String> docName = new ArrayList<String>();
								for (WebElement ele1 : docList) {
									docName.add(ele1.getText().trim());
								}
								appLog.info("Document List :  "+docName);
								if(!docName.contains(duplicateFile)){
									appLog.error("Document Not Present In the Grid : "+duplicateFile);
									sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
									
								}else{
									appLog.info("Document  Present In the Grid : "+duplicateFile);
									
								}
								
							}
							if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
							parentID = switchOnWindow(driver);
							if (click(driver, fp.getUploadNextButton(Workspace.FundraisingWorkspace, 30),"next button on upload window standard folder", action.SCROLLANDBOOLEAN)) {
							if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
								if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
									if (click(driver, fp.getUpdateAllButton(60), "update all button on duplicate documents window", action.SCROLLANDBOOLEAN)) {
										ThreadSleep(5000);
										if (isAlertPresent(driver)) {
										
										String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
										switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
										if (msg.trim().equals(FundsPageErrorMessage.documentUpldSuccessfully)) {
											appLog.info("correct alert for document upload is found successfully");
										}
										else {
											appLog.error("correct document upload alert is not found");
											sa.assertTrue(false, "correct document upload alert is not found");
										}
										
										
										driver.switchTo().window(parentID);
										switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
										if (click(driver,fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid funds page", action.SCROLLANDBOOLEAN)) {
											//verify upload1.pdf is present
											
											List<WebElement> docList = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
											List<String> docName = new ArrayList<String>();
											for (WebElement ele1 : docList) {
												docName.add(ele1.getText().trim());
											}
											appLog.info("Document List :  "+docName);
											if(!docName.contains(duplicateFile)){
												appLog.error("Document Not Present In the Grid : "+duplicateFile);
												sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
											}else{
												appLog.info("Document  Present In the Grid : "+duplicateFile);
												
											}
											
											}
										
										else {
											appLog.error("content grid refresh button is not clickable");
											sa.assertTrue(false, "content grid refresh button is not clickable");
										}
										}
										else {
											appLog.error("alert is not present for successfully upload of documents");
											sa.assertTrue(false, "alert is not present for successfully upload of documents");
										}
									}
									else {
										appLog.error("update all button is not clickable on duplicate documents window");
										sa.assertTrue(false, "update all button is not clickable on duplicate documents window");
									}
								}
								else {
									appLog.error("save button is not clickable on upload window");
									sa.assertTrue(false, "save button is not clickable on upload window");
								}
							}
							else {
								appLog.error("drag and drop of files is not successful");
								sa.assertTrue(false, "drag and drop of files is not successful");
							}
							}
							else {
								appLog.error("next button on upload window is not clickable");
								sa.assertTrue(false, "next button on upload window is not clickable");
							}
							}
							else {
								appLog.error("upload icon on "+Workspace.FundraisingWorkspace.toString() +" is not clickable");
								sa.assertTrue(false, "upload icon on "+Workspace.FundraisingWorkspace.toString() +" is not clickable");
							}
						}
				else {
					appLog.error("save button on upload documents window is not clickable");
					sa.assertTrue(false, "save button on upload documents window is not clickable");
				}
					}
			else {
				appLog.error("drag and drop of files is not successful");
				sa.assertTrue(false, "drag and drop of files is not successful");
			}
				}
			else {
				appLog.error("next button on upload window is not clickable");
				sa.assertTrue(false, "next button on upload window is not clickable");
			}
		}
		else {
			appLog.error("upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
			sa.assertTrue(false, "upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
			
		}
			}
		else {
			appLog.error("folder "+ standardPath+ " is not found on workspace");
			sa.assertTrue(false, "folder "+ standardPath+ " is not found on workspace");
		}
		}
	else {
		appLog.error("funds "+ M7FundName1 + " is not found on funds page");
		sa.assertTrue(false, "funds "+ M7FundName1 + " is not found on funds page");
	}
		}
else {
	appLog.error("funds tab is not clickable");
	sa.assertTrue(false, "funds tab is not clickable");
}
sa.assertAll();
}
	@Test
	public void M7tc014_5_UploadAlreadyExistingFileStandardMultipleInstitution () {

	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String standardPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String duplicateFile = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);

	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String dragFromFolder = "UploadFiles\\Module8\\ExistingUpload";
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(standardPath, M7Institution1, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);

					if (click(driver, fp.getMultipleInstituionRadioButton(60), "multiple institutions radio button", action.SCROLLANDBOOLEAN)) {
						if (!fp.getUploadWindowStandardInst1Checkbox(60).isSelected()) {
							if (click(driver, fp.getUploadWindowStandardInst1Checkbox(60), "institution 1 checkbox", action.SCROLLANDBOOLEAN)) {

							}
						}
						if (!fp.getUploadWindowStandardInst2Checkbox(60).isSelected()) {
							if (click(driver, fp.getUploadWindowStandardInst2Checkbox(60), "institution 2 checkbox", action.SCROLLANDBOOLEAN)) {

							}
						}

						if (click(driver, fp.getUploadNextButton(Workspace.FundraisingWorkspace, 30),"next button on upload window standard folder", action.SCROLLANDBOOLEAN)) {
							if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
								if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
									//check heading of duplicate documents
									if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
										appLog.info("duplicate documents heading is successfully verified");
									}
									else {
										appLog.error("duplicate documents heading is not present");
										sa.assertTrue(false, "duplicate documents heading is not present");
									}
									if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
										appLog.info("duplicate documents sub heading is successfully verified");
									}
									else {
										appLog.error("duplicate documents sub heading is not present");
										sa.assertTrue(false, "duplicate documents sub heading is not present");
									}
									if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
										appLog.info("folder location sub heading is successfully verified");
									}
									else {
										appLog.error("folder location sub heading is not visible");
										sa.assertTrue(false, "folder location sub heading is not visible");
									}
									if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
										appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
									}
									else {
										appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
									}
									if (fp.getUpdateAllButton(60)!=null) {
										appLog.info("update all button is present");
									}
									else {
										appLog.error("update all button is not present on duplicate document window");
										sa.assertTrue(false, "update all button is not present on duplicate document window");
									}
									if (fp.getIgnoreAllButton(60)!=null) {
										appLog.info("ignore all button is successfully present");
									}
									else {
										appLog.error("ignore all button is not present on duplicate docuemnts heading");
										sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
									}
									if (fp.getDuplicateDocumentValue(60).getText().trim().equals(duplicateFile)) {
										appLog.info(duplicateFile + " is duplicate according to alert window");
									}
									else {
										appLog.error("duplicate file name name is wrong on duplicate document window");
										sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
									}
									if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > " + M7Institution1+" > " + standardPath)) {
										appLog.info("folder name for duplicate files is correct");
									}
									else {
										appLog.error("folder path for duplicate files is wrong");
										sa.assertTrue(false, "folder path for duplicate files is wrong");
									}
									try {
										click(driver, fp.getIgnoreAllButton(60), "ignore all button in duplicate document window", action.SCROLLANDBOOLEAN);
										appLog.info("Clicked Ignore All Button");
									} catch (Exception e) {
										appLog.error("Not Able to Click Ignore All Button");
									}ThreadSleep(5000);	
									driver.switchTo().window(parentID);
										switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
										if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),"refresh button", action.SCROLLANDBOOLEAN)) {
											//verify upload1.pdf is present

											List<WebElement> docList = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
											List<String> docName = new ArrayList<String>();
											for (WebElement ele1 : docList) {
												docName.add(ele1.getText().trim());
											}
											appLog.info("Document List :  "+docName);
											if(!docName.contains(duplicateFile)){
												appLog.error("Document Not Present In the Grid : "+duplicateFile);
												sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);

											}else{
												appLog.info("Document  Present In the Grid : "+duplicateFile);

											}

										}
										if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
											parentID = switchOnWindow(driver);

											if (click(driver, fp.getMultipleInstituionRadioButton(60), "multiple institutions radio button", action.SCROLLANDBOOLEAN)) {
												if (!fp.getUploadWindowStandardInst1Checkbox(60).isSelected()) {
													if (click(driver, fp.getUploadWindowStandardInst1Checkbox(60), "institution 1 checkbox", action.SCROLLANDBOOLEAN)) {

													}
													else {
														appLog.error("inst 1 checkbox is not clickable");
														sa.assertTrue(false, "inst 1 checkbox is not clickable");
													}
												}
												else {
													appLog.info("checkbox for inst 1 is already selected");
												}
												if (!fp.getUploadWindowStandardInst2Checkbox(60).isSelected()) {
													if (click(driver, fp.getUploadWindowStandardInst2Checkbox(60), "institution 2 checkbox", action.SCROLLANDBOOLEAN)) {
														
													}
													else {
														appLog.error("inst 2 checkbox is not clickable");
														sa.assertTrue(false, "inst 2 checkbox is not clickable");
													}
												}
												else {
													appLog.info("checkbox for inst 2 is already selected");
												}




												if (click(driver, fp.getUploadNextButton(Workspace.FundraisingWorkspace, 30),"next button on upload window standard folder", action.SCROLLANDBOOLEAN)) {
													if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
														if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
															if (click(driver, fp.getUpdateAllButton(60), "update all button on duplicate documents window", action.SCROLLANDBOOLEAN)) {
																ThreadSleep(5000);
																if (isAlertPresent(driver)) {

																	String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
																	switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
																	if (msg.trim().equals(FundsPageErrorMessage.documentUpldSuccessfully)) {
																		appLog.info("correct alert for document upload is found successfully");
																	}
																	else {
																		appLog.error("correct document upload alert is not found");
																		sa.assertTrue(false, "correct document upload alert is not found");
																	}


																	driver.switchTo().window(parentID);
																	switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
																	if (click(driver,fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid funds page", action.SCROLLANDBOOLEAN)) {
																		//verify upload1.pdf is present

																		List<WebElement> docList = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
																		List<String> docName = new ArrayList<String>();
																		for (WebElement ele1 : docList) {
																			docName.add(ele1.getText().trim());
																		}
																		appLog.info("Document List :  "+docName);
																		if(!docName.contains(duplicateFile)){
																			appLog.error("Document Not Present In the Grid : "+duplicateFile);
																			sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
																		}else{
																			appLog.info("Document  Present In the Grid : "+duplicateFile);

																		}

																	}
																	//verifying upload1.pdf in standard folder of institution 2
																	if (fp.verifyFolderPathdummy(standardPath, M7Institution2, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 30)) {

																		if (click(driver,fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid funds page", action.SCROLLANDBOOLEAN)) {
																			//verify upload1.pdf is present

																			List<WebElement> docList = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
																			List<String> docName = new ArrayList<String>();
																			for (WebElement ele1 : docList) {
																				docName.add(ele1.getText().trim());
																			}
																			appLog.info("Document List :  "+docName);
																			if(!docName.contains(duplicateFile)){
																				appLog.error("Document Not Present In the Grid : "+duplicateFile);
																				sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
																			}else{
																				appLog.info("Document  Present In the Grid : "+duplicateFile);

																			}

																		}

																	}

																	else {
																		appLog.error("content grid refresh button is not clickable");
																		sa.assertTrue(false, "content grid refresh button is not clickable");
																	}
																}
																else {
																	appLog.error("alert is not present for successfully upload of documents");
																	sa.assertTrue(false, "alert is not present for successfully upload of documents");
																}
															}
															else {
																appLog.error("update all button is not clickable on duplicate documents window");
																sa.assertTrue(false, "update all button is not clickable on duplicate documents window");
															}
														}
														else {
															appLog.error("save button is not clickable on upload window");
															sa.assertTrue(false, "save button is not clickable on upload window");
														}
													}
													else {
														appLog.error("drag and drop of files is not successful");
														sa.assertTrue(false, "drag and drop of files is not successful");
													}
												}
												else {
													appLog.error("next button on upload window is not clickable");
													sa.assertTrue(false, "next button on upload window is not clickable");
												}
											}
											else {
												appLog.error("multiple institutions radio button is not clickable");
												sa.assertTrue(false, "multiple institutions radio button is not clickable");
											}
										}
										else {
											appLog.error("upload icon on "+Workspace.FundraisingWorkspace.toString() +" is not clickable");
											sa.assertTrue(false, "upload icon on "+Workspace.FundraisingWorkspace.toString() +" is not clickable");
										}

								}
								else {
									appLog.error("save button on upload documents window is not clickable");
									sa.assertTrue(false, "save button on upload documents window is not clickable");
								}
							}
							else {
								appLog.error("drag and drop of files is not successful");
								sa.assertTrue(false, "drag and drop of files is not successful");
							}
						}
						else {
							appLog.error("next button on upload window is not clickable");
							sa.assertTrue(false, "next button on upload window is not clickable");
						}
					}
					else {
						appLog.error("multiptle institutions radio button is not clickable");
						sa.assertTrue(false, "multiptle institutions radio button is not clickable");
					}
				}
				else {
					appLog.error("upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString() +"");
					sa.assertTrue(false, "upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString() +"");

				}
			}
			else {
				appLog.error("folder "+ standardPath+ " is not found on workspace");
				sa.assertTrue(false, "folder "+ standardPath+ " is not found on workspace");
			}
		}
		else {
			appLog.error("funds "+ M7FundName1 + " is not found on funds page");
			sa.assertTrue(false, "funds "+ M7FundName1 + " is not found on funds page");
		}
	}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}

@Test
	public void M7tc015_OnlineImportCommonInternalSharedNegative() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String parentID=null;
	SoftAssert sa = new SoftAssert();
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String[] oipath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.OnlineImportPath).split(",");
	//String fileName = "upload_oi.pdf";
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileCommon);
	lp.CRMLogin(CRMUser2EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				WebElement ele;

				ele=fp.getOnlineImportLink(Workspace.FundraisingWorkspace, 30);

				if (click(driver, ele, "Online Import Icon", action.BOOLEAN)) {
					parentID = switchOnWindow(driver);
					sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"),"Box username Text Box", action.THROWEXCEPTION);
					sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"),"Box Password Text Box", action.THROWEXCEPTION);
					click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
					click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
					if (CommonLib.traverseImport(driver, oipath[0], fileName)) {
						click(driver, fp.getOnlineImportCancelButton(60), "Online Import Button", action.BOOLEAN);
						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

					}
					else {
						appLog.error("the path and file could not be found so import document fails");
					}

				}if (click(driver, ele, "online import button on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					if (sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"), "box username text box", action.THROWEXCEPTION)) {
						if (sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"), "box password text box", action.THROWEXCEPTION)) {
							click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
							click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
							click(driver, fp.getImportButton(60), "import button on online import window", action.SCROLLANDBOOLEAN);
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {
									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if(msg.trim().toLowerCase().equalsIgnoreCase(FundsPageErrorMessage.UploadSelectTargetMessage)) {
										appLog.info("Online import failure alert message is matched successfully.");
									}
									else {
										appLog.error("online import message is different than expected "+msg);
									}
									driver.switchTo().window(parentID);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

								}
								else {
									appLog.error("no alert is present");
									driver.close();
									driver.switchTo().window(parentID);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								}
								
						}
						
						else {
							appLog.error("box password textbox is not visible on online import window");
							driver.close();
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
						}
					}
					else {
						appLog.error("Box username textbox is not visible on online import window");
					}
				}
				else {
					appLog.error("online import button is not clickable on "+Workspace.FundraisingWorkspace.toString() +" funds page");
				}

			}
			else {
				appLog.error("path for folder "+cmnPath+" is not found in folder structure");
			}
			
			//for internal folder
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				WebElement ele;

				ele=fp.getOnlineImportLink(Workspace.FundraisingWorkspace, 30);

				if (click(driver, ele, "Online Import Icon", action.BOOLEAN)) {
					parentID = switchOnWindow(driver);
					sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"),"Box username Text Box", action.THROWEXCEPTION);
					sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"),"Box Password Text Box", action.THROWEXCEPTION);
					click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
					click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
					if (CommonLib.traverseImport(driver, oipath[1], fileName)) {
						click(driver, fp.getOnlineImportCancelButton(60), "Online Import Button", action.BOOLEAN);
						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

					}
					else {
						appLog.error("the path and file could not be found so import document fails");
					}

				}if (click(driver, ele, "online import button on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					if (sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"), "box username text box", action.THROWEXCEPTION)) {
						if (sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"), "box password text box", action.THROWEXCEPTION)) {
							click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
							click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
							click(driver, fp.getImportButton(60), "import button on online import window", action.SCROLLANDBOOLEAN);
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {
									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if(msg.trim().toLowerCase().equalsIgnoreCase(FundsPageErrorMessage.UploadSelectTargetMessage)) {
										appLog.info("Online import failure alert message is matched successfully.");
									}
									else {
										appLog.error("online import message is different than expected "+msg);
									}
									driver.switchTo().window(parentID);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

								}
								else {
									appLog.error("no alert is present");
									driver.close();
									driver.switchTo().window(parentID);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								}
								
						}
						
						else {
							appLog.error("box password textbox is not visible on online import window");
							driver.close();
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
						}
					}
					else {
						appLog.error("Box username textbox is not visible on online import window");
					}
				}
				else {
					appLog.error("online import button is not clickable on "+Workspace.FundraisingWorkspace.toString() +" funds page");
				}

			}
			else {
				appLog.error("path for folder "+intPath+" is not found in folder structure");
			}
			
			
			//for shared folder
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				WebElement ele;

				ele=fp.getOnlineImportLink(Workspace.FundraisingWorkspace, 30);

				if (click(driver, ele, "Online Import Icon", action.BOOLEAN)) {
					parentID = switchOnWindow(driver);
					sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"),"Box username Text Box", action.THROWEXCEPTION);
					sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"),"Box Password Text Box", action.THROWEXCEPTION);
					click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
					click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
					if (CommonLib.traverseImport(driver, oipath[2], fileName)) {
						click(driver, fp.getOnlineImportCancelButton(60), "Online Import Button", action.BOOLEAN);
						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

					}
					else {
						appLog.error("the path and file could not be found so import document fails");
					}

				}if (click(driver, ele, "online import button on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					if (sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"), "box username text box", action.THROWEXCEPTION)) {
						if (sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"), "box password text box", action.THROWEXCEPTION)) {
							click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
							click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
							click(driver, fp.getImportButton(60), "import button on online import window", action.SCROLLANDBOOLEAN);
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {
									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if(msg.trim().toLowerCase().equalsIgnoreCase(FundsPageErrorMessage.UploadSelectTargetMessage)) {
										appLog.info("Online import failure alert message is matched successfully.");
									}
									else {
										appLog.error("online import message is different than expected "+msg);
									}
									driver.switchTo().window(parentID);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

								}
								else {
									appLog.error("no alert is present");
									driver.close();
									driver.switchTo().window(parentID);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								}
								
						}
						
						else {
							appLog.error("box password textbox is not visible on online import window");
							driver.close();
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
						}
					}
					else {
						appLog.error("Box username textbox is not visible on online import window");
					}
				}
				else {
					appLog.error("online import button is not clickable on "+Workspace.FundraisingWorkspace.toString() +" funds page");
				}

			}
			else {
				appLog.error("path for folder "+shdPath+" is not found in folder structure");
			}
			
			
			
			
			
		}
		else {
			appLog.error("fund "+M7FundName1+" is not found");
		}
	}
	else {
		appLog.error("funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc016_OnlineImportStandardSingleInstitutionNegative() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String parentID=null;
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String[] standardUploadText = {"Add to Single Institution", "Add to Multiple Institutions", "Use Bulk Uploader or File Splitter"};
	String oipath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.OnlineImportPath);
	//String fileName = "upload_oi.pdf";
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileStandard);
	lp.CRMLogin(CRMUser2EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				WebElement ele;

				ele=fp.getOnlineImportLink(Workspace.FundraisingWorkspace, 30);
				if (click(driver, ele, "online import icon "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"),"Box username Text Box", action.THROWEXCEPTION);
					sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"),"Box Password Text Box", action.THROWEXCEPTION);
					click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
					click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);


					if (fp.getUploadDocumentToFolderTextLabel(60).getText().trim().contains("Upload Document to Folder")) {
						appLog.info("Upload document to folder text is successfully found");
						WebElement standard_text = isDisplayed(driver, FindElement(driver, "//span[contains(text(),'"+stdPath+"')]", "standard folder name", action.SCROLLANDBOOLEAN,30), "visibility", 30, "standard folder name");
						if (standard_text!=null) {
							appLog.info("correct folder name is succesfully displayed");
						}
						else {
							appLog.error("folder name displayed is not correct");
							sa.assertTrue(false, "folder name displayed is not correct");
						}
						for (int i = 0;i<fp.standardFolderUploadWindowLabels().size();i++) {
							WebElement el = fp.standardFolderUploadWindowLabels().get(i);
							if (el.getText().trim().equals(standardUploadText[i])) {
								appLog.info(standardUploadText[i]+" Text in standard folder import window is present");
							}
							else {
								appLog.error(standardUploadText[i]+"is not present");
								sa.assertTrue(false, standardUploadText[i]+"is not present");
							}
						}
						//verifying institutions names are present and checkbox of instituion 1 is selcted by default
						WebElement institution1=fp.uploadWindowInstitutionTextElement(M7Institution1);
						WebElement institution2=fp.uploadWindowInstitutionTextElement(M7Institution2);
						if ((institution1!=null)&&(institution1.getText().trim().equals(M7Institution1))) {
							appLog.info(M7Institution1+" is present on institutions list");
							if ((institution2!=null)&&(institution2.getText().trim().equals(M7Institution2))) {
								appLog.info(M7Institution2+" is present on institutions list");
								if (fp.getUploadWindowStandardInst1Checkbox(60).isSelected()==true) {
									appLog.info(M7Institution1+" checkbox is selected by default");
								}
								else {
									appLog.error(M7Institution1+" checkbox is not selected");
									sa.assertTrue(false, M7Institution1+" checkbox is not selected");
								}
							}
							else {
								appLog.error(M7Institution2+" is not displayed on upload window");
								sa.assertTrue(false, M7Institution2+" is not displayed on upload window");
							}
						}
						else {
							appLog.error(M7Institution1+" is not displayed on upload window");
							sa.assertTrue(false, M7Institution1+" is not displayed on upload window");
						}
					}
					else {
						appLog.error("text on online import window is not correct");
						sa.assertTrue(false, "text on online import window is not correct");
					}
					if (click(driver, fp.getUploadNextButton(Workspace.FundraisingWorkspace, 60), "next button on online import window", action.SCROLLANDBOOLEAN)) {
						if (CommonLib.traverseImport(driver, oipath, fileName)) {
							click(driver, fp.getOnlineImportCancelButton(60), "Online Import Button", action.BOOLEAN);
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

						}
					}
				}
				else {
					appLog.error("online import button on "+Workspace.FundraisingWorkspace.toString() +" is not clickable");
					sa.assertTrue(false, "online import button on "+Workspace.FundraisingWorkspace.toString() +" is not clickable");
				}
				//for multiple institutions
				//selected no institution and checking error message
				if (click(driver, ele, "online import icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"),"Box username Text Box", action.THROWEXCEPTION);
					sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"),"Box Password Text Box", action.THROWEXCEPTION);
					click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
					click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
					if (click(driver, fp.getMultipleInstituionRadioButton(60), "multiple institutions radio button", action.SCROLLANDBOOLEAN)) {
						if (fp.getUploadWindowStandardInst1Checkbox(60).isSelected()) {
							if (click(driver, fp.getUploadWindowStandardInst1Checkbox(60), "institution 1 checkox", action.BOOLEAN)) {

							}
						}
						if (fp.getUploadWindowStandardInst2Checkbox(60).isSelected()) {
							if (click(driver, fp.getUploadWindowStandardInst2Checkbox(60), "institution 2 checkbox", action.BOOLEAN)) {

							}
						}
						if (click(driver, fp.getUploadNextButton(Workspace.FundraisingWorkspace, 60), "next button online import window", action.SCROLLANDBOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {

								String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
								switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
								if (msg.trim().equals(FundsPageErrorMessage.pleaseSelectOneInstitution)) {
									appLog.info("correct error message to select institution is found successfully");
								}
								else {
									appLog.error("error message to select institution is not found");
									sa.assertTrue(false, "error message to select institution is not found");
								}



							}
							else {
								appLog.error("alert error message is not present when no institution is selected");
								sa.assertTrue(false, "alert error message is not present when no institution is selected");
							}


						}
						else {
							appLog.error("next button is not clickable on import window");
							sa.assertTrue(false, "next button is not clickable on import window");
						}


						//selecting both institutions, selecting file and click cancel
						if (click(driver, fp.getUploadWindowStandardInst1Checkbox(60), "institution 1 checkbox", action.BOOLEAN)) {
							if (click(driver, fp.getUploadWindowStandardInst2Checkbox(60), "institution 2 checkbox", action.BOOLEAN)) {
								if (click(driver, fp.getUploadNextButton(Workspace.FundraisingWorkspace, 60), "next button on import window", action.SCROLLANDBOOLEAN)) {
									if (traverseImport(driver, oipath, fileName)) {
										click(driver, fp.getOnlineImportCancelButton(30), "cancel button on import window", action.SCROLLANDBOOLEAN);
										ThreadSleep(5000);	
										driver.switchTo().window(parentID);
											switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
									
									}
									else {
										appLog.error("document could not be found traversing through file path");
										sa.assertTrue(false, "document could not be found traversing through file path");
									}
								}
								else {
									appLog.error("next button on import window is not clickable");
									sa.assertTrue(false, "next button on import window is not clickable");
								}
							}
							else {
								appLog.error("institution 2 checkbox is not clickable");
								sa.assertTrue(false, "institution 2 checkbox is not clickable");
							}
						}
						else {
							appLog.error("institutin 1 checkbox is not clickable");
							sa.assertTrue(false, "institutin 1 checkbox is not clickable");
						}
					}
				}
				else {
					appLog.error("online import icon is not clickable on fundraising worksapce");
					sa.assertTrue(false, "online import icon is not clickable on fundraising worksapce");
				}


				//selecting both institution and not selected any document and click import
				if (click(driver, ele, "online import button on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"),"Box username Text Box", action.THROWEXCEPTION);
					sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"),"Box Password Text Box", action.THROWEXCEPTION);
					click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
					click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
					if (click(driver, fp.getMultipleInstituionRadioButton(60), "multiple institutions radio button", action.SCROLLANDBOOLEAN)) {
						if (!fp.getUploadWindowStandardInst1Checkbox(60).isSelected()) {
							if (click(driver, fp.getUploadWindowStandardInst1Checkbox(60), "institution 1 checkox", action.BOOLEAN)) {
							}
						}
						if (!fp.getUploadWindowStandardInst2Checkbox(60).isSelected()) {
							if (click(driver, fp.getUploadWindowStandardInst2Checkbox(60), "institution 2 checkbox", action.BOOLEAN)) {
							}
						}
					}
					if (click(driver, fp.getUploadNextButton(Workspace.FundraisingWorkspace, 60),"next button on import window", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.getImportButton(60), "import button on online import window", action.SCROLLANDBOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {
							
							String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
							switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
							if (msg.trim().equals(FundsPageErrorMessage.UploadSelectTargetMessage)) {
								appLog.info("correct error message to plese select at least one document is found successfully");
							}
							else {
								appLog.error("error message to plese select at least one document is not found");
								sa.assertTrue(false, "error message to  plese select at least one document is not found");
							}
							}
							else {
								appLog.error("no alert is present on selecting no document");
								sa.assertTrue(false, "no alert is present on selecting no document");
							}
							
						}
						else {
							appLog.error("import button is not clickable on import window");
							sa.assertTrue(false, "import button is not clickable on import window");
						}
					}
					else {
						appLog.error("next button on import window is not clickable");
						sa.assertTrue(false, "next button on import window is not clickable");
					}
				}
				else {
					appLog.error("online import icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
					sa.assertTrue(false, "online import icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
				}

			}

			else {
				appLog.error("file path "+stdPath + " is not found");
				sa.assertTrue(false, "file path "+stdPath + " is not found");
			}
		}
		else {
			appLog.error("fund "+M7FundName1 + " was not found on funds page");
			sa.assertTrue(false, "fund "+M7FundName1 + " was not found on funds page");
		}
	}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	sa.assertAll();
}
	@Test
	public void M7tc017_OnlineImportInCommonFolderSuccessfully_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	FundRaisingPageBusinessLayer frp = new FundRaisingPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String folderpath=ExcelUtils.readData("FilePath",0,1,currentlyExecutingTC);
	String fileName=ExcelUtils.readData("FilePath",0,5,currentlyExecutingTC);
	String docPath=ExcelUtils.readData("FilePath",0,13,currentlyExecutingTC);
	String date = null;
	

	SoftAssert saa = new SoftAssert();
	lp.CRMLogin(CRMUser2EmailID,adminPassword);
	if(fp.clickOnTab(TabName.FundsTab)) {
		if(fp.clickOnCreatedFund(M7FundName1)) {
			if(fp.onlineImport(null, null, null,folderpath,docPath,fileName, BoxUserName, BoxPassword, OnlineImportFileAddTo.SingleInstitute, WorkSpaceAction.UPLOAD, FolderType.Common, PageName.FundsPage, Workspace.FundraisingWorkspace,20)) {
				appLog.info("file is imported successfully: "+fileName+" in :"+folderpath);
					switchToFrame(driver, 30,fp.getFrame(PageName.FundsPage, 20));
					if(click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),"Fundraising workspace refresh button", action.SCROLLANDBOOLEAN)) {
					
						String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
								currentlyExecutingTC, excelLabel.UploadedFileCommon);

						if (filesName != null) {
							
							date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
							
							saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.FundraisingWorkspace, filesName,
									"Approved", CRMUser2FirstName + " " + CRMUser2LastName,date);
							
							sa.combineAssertions(saa);
							
						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}
						
					}else {

						appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
						sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
					}

				
			}else {
				appLog.error("file is not imported: "+fileName+" in :"+folderpath);
				sa.assertTrue(false, "file is not imported: "+fileName+" in :"+folderpath);
			}
			
		}else {
			appLog.error("Not able to click on created Fund: "+M7FundName1+" so cannot online import files in investor workspace");
			sa.assertTrue(false, "Not able to click on created Fund: "+M7FundName1+" so cannot online import files in investor workspace");
		}
		
	}else {
		appLog.error("Not able to click on fund tab so cannot online import files in investor workspace");
		sa.assertTrue(false, "Not able to click on fund tab so cannot online import files in investor workspace");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
	@Test
	public void M7tc017_OnlineImportInCommonFolderSuccessfully_Impact() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	FundRaisingPageBusinessLayer frp = new FundRaisingPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String folderpath=ExcelUtils.readData("FilePath",0,1,currentlyExecutingTC);
	String fileName=ExcelUtils.readData("FilePath",0,5,currentlyExecutingTC);
	String docPath=ExcelUtils.readData("FilePath",0,13,currentlyExecutingTC);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	SoftAssert sa = new SoftAssert();
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	// Institution
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");

			String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
					excelLabel.CommonPath);

			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);

				String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
						excelLabel.UploadedFileCommon);

				if (filesName != null) {

					

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + cmnPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

		
			// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
							"Investor workspace view");
					String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
							excelLabel.CommonPath);

					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + cmnPath);

						String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
								excelLabel.UploadedFileCommon);

						if (filesName != null) {

							date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName,
									"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + cmnPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	//
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
	@Test
	public void M7tc017_OnlineImportInCommonFolderSuccessfully_ImpactInvestor() {
	
	//Investor Side
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	SoftAssert sa = new SoftAssert();
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
		String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
				excelLabel.CommonPath);
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
					excelLabel.UploadedFileCommon);
			date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, filesName, CRMUser2FirstName + " " + CRMUser2LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}

	} else {
		appLog.info("Not able to click on PotentialInvestmentPage tab");
		sa.assertTrue(false, "Not able to click on PotentialInvestmentPage tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
}
@Test
	public void M7tc018_OnlineImportInInternalFolderSuccessfully_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String intFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.InternalPath);
	
	String filesName =null;

	lp.CRMLogin(CRMUser2EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			String folderpath=ExcelUtils.readData("FilePath",0,2,currentlyExecutingTC);
			String fileName=ExcelUtils.readData("FilePath",0,6,currentlyExecutingTC);
			String docPath=ExcelUtils.readData("FilePath",0,13,currentlyExecutingTC);

			if(fp.onlineImport(null, null, null,folderpath,docPath,fileName, BoxUserName, BoxPassword, OnlineImportFileAddTo.SingleInstitute, WorkSpaceAction.UPLOAD, FolderType.Internal, PageName.FundsPage, Workspace.FundraisingWorkspace,20)) {
				appLog.info("file is imported successfully: "+fileName+" in :"+folderpath);
					switchToFrame(driver, 30,fp.getFrame(PageName.FundsPage, 20));
				

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileInternal);

					if (filesName != null) {
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("File is not uploaded in " + intFolder);
				sa.assertTrue(false, "File is not uploaded in " + intFolder);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc018_OnlineImportInInternalFolderSuccessfully_ImpactCRM() {
	
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String intFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.InternalPath);
	
	String filesName =null;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	// Institution
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(intFolder, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + intFolder);

				 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
						excelLabel.UploadedFileInternal);

				if (filesName != null) {

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + intFolder);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + intFolder);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc019_OnlineImportInSharedFolderSuccessfully_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String shdFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.SharedPath);
	
	String filesName =null;

	lp.CRMLogin(CRMUser2EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			String folderpath=ExcelUtils.readData("FilePath",0,3,currentlyExecutingTC);
			String fileName=ExcelUtils.readData("FilePath",0,7,currentlyExecutingTC);
			String docPath=ExcelUtils.readData("FilePath",0,13,currentlyExecutingTC);
			
			if (fp.onlineImport(null, null, null, folderpath, docPath, fileName, BoxUserName, BoxPassword,
					OnlineImportFileAddTo.SingleInstitute, WorkSpaceAction.UPDATE, FolderType.Shared,
					PageName.FundsPage, Workspace.FundraisingWorkspace, 20)) {

				appLog.info("File is upload successfullly");
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"Investor workspace view");

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileShared);

					if (filesName != null) {
						
						
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("File is not uploaded in " + shdFolder);
				sa.assertTrue(false, "File is not uploaded in " + shdFolder);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	
	
	switchToDefaultContent(driver);
	
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc019_OnlineImportInSharedFolderSuccessfully_ImpactCRM() {
	// Institution
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String shdFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.SharedPath);
	
	String filesName =null;

	lp.CRMLogin(CRMUser2EmailID, adminPassword);


	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(shdFolder, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + shdFolder);

				 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
						excelLabel.UploadedFileShared);

				if (filesName != null) {

				

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + shdFolder);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + shdFolder);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	
			// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
							"Investor workspace view");
					

					if (fp.verifyFolderPathdummy(shdFolder, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + shdFolder);

						 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
								excelLabel.UploadedFileShared);

						if (filesName != null) {

						

							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName,
									"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + shdFolder);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + shdFolder);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc019_OnlineImportInSharedFolderSuccessfully_ImpactInvestor() {
	
	//Investor Side
	
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	SoftAssert saa = new SoftAssert();
	SoftAssert sa = new SoftAssert();
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	String shdFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.SharedPath);
	
	String filesName =null;

	
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
	
		if (fp.verifyFolderPathdummy(shdFolder, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdFolder);
			 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
					excelLabel.UploadedFileShared);
		
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, filesName, CRMUser2FirstName + " " + CRMUser2LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdFolder);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdFolder);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	sa.combineAssertions(saa);
	sa.assertAll();
}
@Test
	public void M7tc020_OnlineImportInStandardFolderSuccessfully_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	String filesName =null;

	lp.CRMLogin(CRMUser2EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {


			
			String folderpath=ExcelUtils.readData("FilePath",0,4,currentlyExecutingTC);
			String fileName=ExcelUtils.readData("FilePath",0,8,currentlyExecutingTC);
			String docPath=ExcelUtils.readData("FilePath",0,13,currentlyExecutingTC);

			if (fp.onlineImport(M7Institution1, null, null, folderpath, docPath, fileName, BoxUserName,
					BoxPassword, OnlineImportFileAddTo.SingleInstitute, WorkSpaceAction.UPLOAD, FolderType.Standard,
					PageName.FundsPage, Workspace.FundraisingWorkspace, 20)) {
				appLog.info("File is upload successfullly");
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"Investor workspace view");

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileStandard);

					if (filesName != null) {
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("File is not uploaded in " + stdPath);
				sa.assertTrue(false, "File is not uploaded in " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc020_OnlineImportInStandardFolderSuccessfully_ImpactCRM() {
	
	// Institution
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	String filesName =null;

	lp.CRMLogin(CRMUser2EmailID, adminPassword);


	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
						excelLabel.UploadedFileStandard);
				 click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
							"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);
				if (filesName != null) {

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}


	
			// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
							"Investor workspace view");
					

					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);
						click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
								"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);

						 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
								excelLabel.UploadedFileStandard);

						if (filesName != null) {
							HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPage(30, Workspace.FundraisingWorkspace), By.xpath("//div[@id='divFrWorkspace']//span[contains(@id,'myGridfundr-cell-0-')]//a/u"));
							for (String s:set) {
								appLog.info("Element of set "+s);
							}
							if (set.contains(filesName)) {
								appLog.info(filesName+" was successfully found in "+PageName.ContactsPage.toString());
								//TODO check file presence in workspace
							}
							else {
								appLog.error(filesName+" was not found in "+PageName.ContactsPage.toString());
								sa.assertTrue(false, filesName+" was not found in "+PageName.ContactsPage.toString());
							}
//							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName,
//									"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);


						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
			
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc020_OnlineImportInStandardFolderSuccessfully_ImpactInvestor() {
	
	//Investor Side
	
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	BasePageBusinessLayer bp= new BasePageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	String filesName =null;

	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
	
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			click(driver, ifp.getRefreshIcon(20), "Refresh Icon", action.SCROLLANDBOOLEAN);
			 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
					excelLabel.UploadedFileStandard);
			 if (filesName != null) {
				HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));
					
					if (set.contains(filesName)) {
						appLog.info(filesName+" was succesfully found in "+PageName.PotentialInvestmentPage.toString());
					}
					else {
						appLog.error(filesName+" was not found in "+PageName.PotentialInvestmentPage.toString());
						sa.assertTrue(false, filesName+" was not found in "+PageName.PotentialInvestmentPage.toString());
					}
				 
			}
			 else {
				 appLog.error("folder structure is wrong no folder present "+stdPath);
				 sa.assertTrue(false, "folder structure is wrong no folder present "+stdPath);
			 }
		}
			 else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on PotentialInvestmentPage tab");
		sa.assertTrue(false, "Not able to click on PotentialInvestmentPage tab");
	}
	lp.investorLogout();
	sa.assertAll();
}
@Test
	public void M7tc021_OnlineImportInStandardFolderMultipleInstitutionSuccessfully_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	 String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
				currentlyExecutingTC, excelLabel.UploadedFileStandard);

	String folderpath=ExcelUtils.readData("FilePath",0,4,currentlyExecutingTC);
	String[] fileName = filesName.split("<break>");
	String docPath=ExcelUtils.readData("FilePath",0,13,currentlyExecutingTC);
	

	lp.CRMLogin(CRMUser2EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			// Institution2 access
			
			if (fp.inviteContact(M7Institution2, M7Contact1EmailId, null,
					FolderType.Standard, "upload", "Yes", "no", "Standard", Workspace.FundraisingWorkspace,
					M7Contact1LastName)) {
				appLog.info("For " + M7Institution2 + "/" + stdPath
						+ " contact has been given access successfully and invite has been sent to mail "
						+ M7Contact1FirstName + " " + M7Contact1LastName);
			} else {
				appLog.error("For " + M7Institution2 + "/" + stdPath
						+ " Access has not been Given Successfully " + M7Contact1FirstName + " "
						+ M7Contact1LastName);
				sa.assertTrue(false,
						"For " + M7Institution2+ "/" + stdPath
								+ " Access has not been Given Successfully " + M7Contact1FirstName + " "
								+ M7Contact1LastName);
			}

			switchToDefaultContent(driver);
			
			
			if (fp.onlineImport(M7Institution1, null, M7Institution2, folderpath, docPath, filesName, BoxUserName,BoxPassword, OnlineImportFileAddTo.MultipleInstitute, WorkSpaceAction.UPLOAD, FolderType.Standard,PageName.FundsPage, Workspace.FundraisingWorkspace, 20)) {
				appLog.info("File is upload successfullly");
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				
				if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					
					 if ((fileName[0] != null)&&(fileName[1]!=null)) {
							HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, fp.getScrollBoxforFundPage(60), By.xpath("//div[@id='frworkspace']//span[contains(@id,'myGridfundr-cell-0-')]//a/u"));
							if (set.contains(fileName[0])) {
								appLog.info(fileName[0]+" is successfully found in "+PageName.FundsPage.toString());
							}
							else {
								appLog.error(fileName[0]+" is not found in "+PageName.FundsPage.toString());
								sa.assertTrue(false, fileName[0]+" is not found in "+PageName.FundsPage.toString());
							}
							if (set.contains(fileName[1])) {
								appLog.info(fileName[1]+" is successfully found in "+PageName.FundsPage.toString());
							}
							else {
								appLog.error(fileName[1]+" is not found in "+PageName.FundsPage.toString());
								sa.assertTrue(false, fileName[1]+" is not found in "+PageName.FundsPage.toString());
							}

						}
					 else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}
				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}
				
				// 
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				if (fp.verifyFolderPathdummy(stdPath, M7Institution2, null, M7FundName1,
						PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + M7Institution2 + "/"
							+ stdPath);
					click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
							"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);

					/*if ((fileName[0] != null)&&(fileName[1] != null)) {
						HashSet<String> set = CommonLib.scrollActiveWidgetforListofFiles(driver, fp.getScrollBoxforFundPage(60), By.xpath("//div[@id='frworkspace']//span[contains(@id,'myGridfundr-cell-0-')]//a/u"));
						if (set.contains(fileName[0])) {
							appLog.info(fileName[0]+" is successfully found in "+PageName.FundsPage.toString());
						}
						else {
							appLog.error(fileName[0]+" is not found in "+PageName.FundsPage.toString());
							sa.assertTrue(false, filesName+" is not found in "+PageName.FundsPage.toString());
						}
						if (set.contains(fileName[1])) {
							appLog.info(fileName[1]+" is successfully found in "+PageName.FundsPage.toString());
						}
						else {
							appLog.error(fileName[1]+" is not found in "+PageName.FundsPage.toString());
							sa.assertTrue(false, fileName[1]+" is not found in "+PageName.FundsPage.toString());
						}

					}
					*/
					saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.FundraisingWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName,date);
					
					sa.combineAssertions(saa);

				} else {
					appLog.error(" Folder Structure Not Verified  : " + M7Institution2 +
							stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified  : " + M7Institution2 + "/"
							+ stdPath);
				}
				

			}
			else {
				appLog.error("File is not uploaded in " + stdPath);
				sa.assertTrue(false, "File is not uploaded in " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc021_OnlineImportInStandardFolderMultipleInstitutionSuccessfully_ImpactCRM() {
	
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.UploadedFileStandard);
	 String[] fileName = filesName.split("<break>");
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	// Institution
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");

			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
							"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);
				
					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
	
	switchToDefaultContent(driver);
	
	// Institution
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution2)) {
			appLog.info("Opened Institution : " + M7Institution2);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");

			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
						excelLabel.UploadedFileStandard);
				 click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
							"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);
				if (filesName != null) {

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution2);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution2);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

			// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
							"Investor workspace view");
					
					
					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);
						click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
								"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);

						 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
								excelLabel.UploadedFileStandard);

						/*if (filesName != null) {
							
							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName,
									"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

							sa.combineAssertions(saa);

						}
						*/
							if ((fileName[0] != null)&&(fileName[1] != null)) {
								HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPage(30, Workspace.FundraisingWorkspace), By.xpath("//div[@id='divFrWorkspace']//span[contains(@id,'myGridfundr-cell-0-')]//a/u"));
								if (set.contains(fileName[0])) {
									appLog.info(fileName[0]+" is successfully found in "+PageName.ContactsPage.toString());
								}
								else {
									appLog.error(fileName[0]+" is not found in "+PageName.ContactsPage.toString());
									sa.assertTrue(false, fileName[0]+" is not found in "+PageName.ContactsPage.toString());
								}
								if (set.contains(fileName[1])) {
									appLog.info(fileName[1]+" is successfully found in "+PageName.ContactsPage.toString());
								}
								else {
									appLog.error(fileName[1]+" is not found in "+PageName.ContactsPage.toString());
									sa.assertTrue(false, fileName[1]+" is not found in "+PageName.ContactsPage.toString());
								}

							}
							else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
					}
					
					if (fp.verifyFolderPathdummy(stdPath, M7Institution2, null, M7FundName1, PageName.ContactsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);
						click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30),
								"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);

						 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
								excelLabel.UploadedFileStandard);

						 if (fileName[0] != null) {
								HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPage(30, Workspace.FundraisingWorkspace), By.xpath("//div[@id='divFrWorkspace']//span[contains(@id,'myGridfundr-cell-0-')]//a/u"));
								if (set.contains(fileName[0])) {
									appLog.info(fileName[0]+" is successfully found in "+PageName.ContactsPage.toString());
								}
								else {
									appLog.error(fileName[0]+" is not found in "+PageName.ContactsPage.toString());
									sa.assertTrue(false, fileName[0]+" is not found in "+PageName.ContactsPage.toString());
								}
								if (set.contains(fileName[1])) {
									appLog.info(fileName[1]+" is successfully found in "+PageName.ContactsPage.toString());
								}
								else {
									appLog.error(fileName[1]+" is not found in "+PageName.ContactsPage.toString());
									sa.assertTrue(false, fileName[1]+" is not found in "+PageName.ContactsPage.toString());
								}

							} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	
			
	//
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc021_OnlineImportInStandardFolderMultipleInstitutionSuccessfully_ImpactInvestor() {
	
	//Investor Side
	
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.UploadedFileStandard);
	String fileName[] = filesName.split("<break>");
	
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
	
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			click(driver, ifp.getRefreshIcon(20), "Refresh Icon", action.SCROLLANDBOOLEAN);
			
			 HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));
				if (set.contains(fileName[0])) {
					appLog.info(fileName[0]+" is successfully found in "+PageName.PotentialInvestmentPage.toString());
				}
				else {
					appLog.error(fileName[0]+" is not found in "+PageName.PotentialInvestmentPage.toString());
					sa.assertTrue(false, fileName[0]+" is not found in "+PageName.PotentialInvestmentPage.toString());
				}
				if (set.contains(fileName[1])) {
					appLog.info(fileName[1]+" is successfully found in "+PageName.PotentialInvestmentPage.toString());
				}
				else {
					appLog.error(fileName[1]+" is not found in "+PageName.PotentialInvestmentPage.toString());
					sa.assertTrue(false, fileName[1]+" is not found in "+PageName.PotentialInvestmentPage.toString());
				}} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}
		
		if (fp.verifyFolderPathdummy(stdPath, M7Institution2, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			click(driver, ifp.getRefreshIcon(20), "Refresh Icon", action.SCROLLANDBOOLEAN);
			 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
					excelLabel.UploadedFileStandard);
			
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, filesName, CRMUser2FirstName + " " + CRMUser2LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}


	}
	else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	sa.assertAll();
	
}
@Test
	public void M7tc022_CheckSortingAllPages() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy("", M7Institution2, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.revokeContactAccess(M7Contact1EmailId, Workspace.FundraisingWorkspace)) {
					appLog.info("revoked contact access for "+M7Contact1EmailId + " for "+M7Institution2);
				}
				else {
					appLog.error("contact access could not be removed");
					sa.assertTrue(false, "contact access could not be removed");
				}
				
			}
			else {
				appLog.error("folder path could not be accessed");
				sa.assertTrue(false, "folder path could not be accessed");
			}
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.FundraisingWorkspace, PageName.FundsPage)) {
					appLog.info("sorting is correctly present in content grid of "+cmnPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+cmnPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+cmnPath + " folder");
				}
			}
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.FundraisingWorkspace, PageName.FundsPage)) {
					appLog.info("sorting is correctly present in content grid of "+intPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+intPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+intPath + " folder");
				}
			}
			
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.FundraisingWorkspace, PageName.FundsPage)) {
					appLog.info("sorting is correctly present in content grid of "+shdPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+shdPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+shdPath + " folder");
				}
			}
			else {
				appLog.error(stdPath + " is not found on folder structure");
				sa.assertTrue(false, stdPath + " is not found on folder structure");
			}
			
			
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.FundraisingWorkspace, PageName.FundsPage)) {
					appLog.info("sorting is correctly present in content grid of "+stdPath);
				}
				else {
					appLog.error("correct sorting is not present in "+stdPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+stdPath + " folder");
				}
			}
			else {
				appLog.error(stdPath + " is not found on folder structure");
				sa.assertTrue(false, stdPath + " is not found on folder structure");
			}
			switchToDefaultContent(driver);
		}
		else {
			appLog.error("cannot find fund "+M7FundName1+"on funds tab");
			sa.assertTrue(false, "cannot find fund "+M7FundName1+"on funds tab");
		}
		
	}
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 30));
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.FundraisingWorkspace, PageName.InstitutionsPage)) {
					appLog.info("sorting is correctly present in content grid of "+cmnPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+cmnPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+cmnPath + " folder");
				}
			}
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.FundraisingWorkspace, PageName.InstitutionsPage)) {
					appLog.info("sorting is correctly present in content grid of "+intPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+intPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+intPath + " folder");
				}
			}
			
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.FundraisingWorkspace, PageName.InstitutionsPage)) {
					appLog.info("sorting is correctly present in content grid of "+shdPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+shdPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+shdPath + " folder");
				}
			}
			else {
				appLog.error(stdPath + " is not found on folder structure");
				sa.assertTrue(false, stdPath + " is not found on folder structure");
			}
			
			
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.FundraisingWorkspace, PageName.InstitutionsPage)) {
					appLog.info("sorting is correctly present in content grid of "+stdPath);
				}
				else {
					appLog.error("correct sorting is not present in "+stdPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+stdPath + " folder");
				}
			}
			else {
				appLog.error(stdPath + " is not found on folder structure");
				sa.assertTrue(false, stdPath + " is not found on folder structure");
			}
			switchToDefaultContent(driver);
		}
	}
	if (ip.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			switchToFrame(driver, 30, cp.getFrame(PageName.ContactsPage, 30));
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.FundraisingWorkspace, PageName.ContactsPage)) {
					appLog.info("sorting is correctly present in content grid of "+cmnPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+cmnPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+cmnPath + " folder");
				}
			}
			
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.FundraisingWorkspace, PageName.ContactsPage)) {
					appLog.info("sorting is correctly present in content grid of "+shdPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+shdPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+shdPath + " folder");
				}
			}
			else {
				appLog.error(stdPath + " is not found on folder structure");
				sa.assertTrue(false, stdPath + " is not found on folder structure");
			}
			
			
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.FundraisingWorkspace, PageName.ContactsPage)) {
					appLog.info("sorting is correctly present in content grid of "+stdPath);
				}
				else {
					appLog.error("correct sorting is not present in "+stdPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+stdPath + " folder");
				}
			}
			else {
				appLog.error(stdPath + " is not found on folder structure");
				sa.assertTrue(false, stdPath + " is not found on folder structure");
			}
			switchToDefaultContent(driver);
		}
	}
	lp.CRMlogout();
	driver.close();
	config(ExcelUtils.readDataFromPropertyFile("Browser"));
	lp = new LoginPageBusinessLayer(driver);
	bp = new BasePageBusinessLayer(driver);
	fp = new FundsPageBusinessLayer(driver);
	ip = new InstitutionPageBusinessLayer(driver);
	cp = new ContactPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.PotentialInvestmentPage, Workspace.FundraisingWorkspace, 60)) {
			if (ifp.performSortingCheckInvestorSideAllColumns(Workspace.FundraisingWorkspace, PageName.PotentialInvestmentPage)) {
				appLog.info("sorting is successful");
			}
			else {
				appLog.error("sorting could not be possible");
				sa.assertTrue(false, "sorting could not be possible");
			}
		}
		
		
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.PotentialInvestmentPage, Workspace.FundraisingWorkspace, 60)) {
			if (ifp.performSortingCheckInvestorSideAllColumns(Workspace.FundraisingWorkspace, PageName.PotentialInvestmentPage)) {
				appLog.info("sorting is successful");
			}
			else {
				appLog.error("sorting could not be possible");
				sa.assertTrue(false, "sorting could not be possible");
			}
		}
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage, Workspace.FundraisingWorkspace, 60)) {
			if (ifp.performSortingCheckInvestorSideAllColumns(Workspace.FundraisingWorkspace, PageName.PotentialInvestmentPage)) {
				appLog.info("sorting is successful");
			}
			else {
				appLog.error("sorting could not be possible");
				sa.assertTrue(false, "sorting could not be possible");
			}
		}
	}
	
	sa.assertAll();
}
	@Test
	public void M7tc023_UpdateCommonFolder_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	String date = null;
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileCommon);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				//verifying view of update window
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Update, fileName, Workspace.FundraisingWorkspace, 60, null)) {
					parentID = switchOnWindow(driver);
					if (fp.getUpdateWindowHeading(60).getText().trim().equals("Upload New Version")) {
						appLog.info("update heading is successfully verified");
					}
					else {
						appLog.error("update heading is wrong on update window");
						sa.assertTrue(false, "update heading is wrong on update window");
					}
					if (fp.getUpdatingTextLabel(60).getText().trim().equals("Updating:")) {
						appLog.info("updating text is successfully verified");
					}
					if (fp.getFileNameOnUpdateWindow(60).getText().trim().equals(fileName)) {
						appLog.info("file name "+fileName+ " is successfully verified on update window");
					}
					if (fp.getBrowseButtonUpdateWindow(60)!=null) {
						appLog.info("choose file button is successfully verified on update window");
					}
					if (fp.getUpdateButtonUpdateWindow(60)!=null) {
						appLog.info("update button is successfully verified on update window");
					}
					//selecting no file and clicking on update button
					if (click(driver, fp.getUpdateButtonUpdateWindow(60), "update button on update window", action.BOOLEAN)) {
						if (fp.getSelectDocumentErrorMsg(60).getText().trim().equals(FundsPageErrorMessage.updateDocumentErrorMsg)) {
							appLog.info("update error message is successfully verified when document is passed");
						}
					}
					if (sendKeys(driver, fp.getBrowseButtonUpdateWindow(60), System.getProperty("user.dir")+"//UploadFiles/Module8/ExistingUpdate//"+update_fileName, "choose file button on update window", action.SCROLLANDBOOLEAN)) {
						if (click(driver,fp.getUpdateButtonUpdateWindow(60),"update button on update window", action.BOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {
								String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
								switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
								if (msg.trim().equals(FundsPageErrorMessage.updateDocumentSuccessAlertMsg)) {
									appLog.info("correct message that document is updated is found successfully");
								}
								else {
									appLog.error("alert message that document is updated is not found");
									sa.assertTrue(false, "alert message that document is updated is not found");
								}
							}
							else {
								appLog.error("no alert message is present when correct file has been updated");
								sa.assertTrue(false, "no alert message is present when correct file has been updated");
							}
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {
								
								List<String> returnlist = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage));
								if (returnlist.isEmpty()) {
									appLog.info("updated file "+update_fileName+" is successfully found");
								}
								else {
									appLog.error("the updated file's name is not found on content grid");
								}
								//upload file with same name to check duplicate document error
								if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 60), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
									parentID = switchOnWindow(driver);
									if (fp.dragDropFiles("UploadFiles\\Module8\\ExistingUpdate", "DropLoc.jpg")) {
										ThreadSleep(5000);
										if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
											
											if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents heading is not present");
												sa.assertTrue(false, "duplicate documents heading is not present");
											}
											if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents sub heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents sub heading is not present");
												sa.assertTrue(false, "duplicate documents sub heading is not present");
											}
											if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
												appLog.info("folder location sub heading is successfully verified");
											}
											else {
												appLog.error("folder location sub heading is not visible");
												sa.assertTrue(false, "folder location sub heading is not visible");
											}
											if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
												appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
											}
											else {
												appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
											}
											if (fp.getUpdateAllButton(60)!=null) {
												appLog.info("update all button is present");
											}
											else {
												appLog.error("update all button is not present on duplicate document window");
												sa.assertTrue(false, "update all button is not present on duplicate document window");
											}
											if (fp.getIgnoreAllButton(60)!=null) {
												appLog.info("ignore all button is successfully present");
											}
											else {
												appLog.error("ignore all button is not present on duplicate docuemnts heading");
												sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
											}
											if (fp.getDuplicateDocumentValue(60).getText().trim().equals(update_fileName)) {
												appLog.info(update_fileName + " is duplicate according to alert window");
											}
											else {
												appLog.error("duplicate file name name is wrong on duplicate document window");
												sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
											}
											if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > "+cmnPath)) {
												appLog.info("folder name" + M7FundName1 + " > "+cmnPath+" for duplicate files is correct");
											}
											else {
												appLog.error("folder path for duplicate files is wrong");
												sa.assertTrue(false, "folder path for duplicate files is wrong");
											}
											if (click(driver, fp.getUpdateAllButton(60), "update all button on update window", action.SCROLLANDBOOLEAN)) {
												ThreadSleep(5000);
												if (isAlertPresent(driver)) {
													String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
													switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
													if (msg.trim().equals(FundsPageErrorMessage.DocumentUploadSuccessMsg)) {
														appLog.info("correct message that document is uploaded is found successfully");
													}
													else {
														appLog.error("alert message that document is uploaded is not found");
														sa.assertTrue(false, "alert message that document is uploaded is not found");
													}
												}
												else {
													appLog.error("no alert is present when successful document is uploaded");
												}
												driver.switchTo().window(parentID);
												switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
												if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {

													List<String> file_name = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage));
													if (file_name.isEmpty()) {
														appLog.info("updated file "+update_fileName+" is successfully found");
													}
													else {
														appLog.error("the updated file's name is not found on content grid");
													}
												}
												else {
													appLog.error("content grid refresh button is not clickable");
													sa.assertTrue(false, "content grid refresh button is not clickable");
												}
											}
											else {
												appLog.error("update all button on duplicate document window is not clickable");
												sa.assertTrue(false, "update all button on duplicate document window is not clickable");
											}
										}
										else {
											appLog.error("save button on upload window is not clickable");
											sa.assertTrue(false, "save button on upload window is not clickable");
										}
										}
									else {
										appLog.error("drag and drop of files to check duplicates is not successful");
										sa.assertTrue(false, "drag and drop of files to check duplicates is not successful");
									}
								}
								else {
									appLog.error("upload icon is not clickable on fundraising wokrpsace");
									sa.assertTrue(false, "upload icon is not clickable on fundraising wokrpsace");
								}
								
							}
							else {
								appLog.error("refresh button on content grid is not clickable");
								sa.assertTrue(false, "refresh button on content grid is not clickable");
							}
						}
						else {
							appLog.error("update button on update window is not clickable");
							sa.assertTrue(false, "update button on update window is not clickable");
						}
					}
					else {
						appLog.error("updated file path could not passed on browse button on update window");
						sa.assertTrue(false, "updated file path could not passed on browse button on update window");
					}
			}
				else {
					appLog.error("down arrow of document name specified cannot be found");
					sa.assertTrue(false, "down arrow of document name specified cannot be found");
				}
				
		}
			else {
				appLog.error("folder path "+cmnPath+" cannot be found");
				sa.assertTrue(false, "folder path "+cmnPath+" cannot be found");
			}
	}
		else {
			appLog.error("fund "+M7FundName1+" cannot be found");
			sa.assertTrue(false, "fund "+M7FundName1+" cannot be found");
		}
}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
	@Test
	public void M7tc023_UpdateCommonFolder_ImpactCRM() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileCommon);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	
	// Institution tab verify updated document name
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"fundrasising workspace view");

			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);

				if (update_fileName != null) {

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, update_fileName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);
					//saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, update_fileName,
					//		"Approved", "PE Admin", date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + cmnPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	
		// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
							"fundraising workspace view");

					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + cmnPath);


						if (update_fileName != null) {

							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, update_fileName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);
							//saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, update_fileName,
							//		"Approved", "PE Admin", date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + cmnPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc023_UpdateCommonFolder_ImpactInvestor() {
	//Investor Side
	
	
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileCommon);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, update_fileName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			//saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, update_fileName, "PE Admin", date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	}
@Test
	public void M7tc024_UpdateInternalFolder_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	String date = null;
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileInternal);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				//verifying view of update window
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Update, fileName, Workspace.FundraisingWorkspace, 60, null)) {
					parentID = switchOnWindow(driver);
					if (fp.getUpdateWindowHeading(60).getText().trim().equals("Upload New Version")) {
						appLog.info("update heading is successfully verified");
					}
					else {
						appLog.error("update heading is wrong on update window");
						sa.assertTrue(false, "update heading is wrong on update window");
					}
					if (fp.getUpdatingTextLabel(60).getText().trim().equals("Updating:")) {
						appLog.info("updating text is successfully verified");
					}
					if (fp.getFileNameOnUpdateWindow(60).getText().trim().equals(fileName)) {
						appLog.info("file name "+fileName+ " is successfully verified on update window");
					}
					if (fp.getBrowseButtonUpdateWindow(60)!=null) {
						appLog.info("choose file button is successfully verified on update window");
					}
					if (fp.getUpdateButtonUpdateWindow(60)!=null) {
						appLog.info("update button is successfully verified on update window");
					}
					//selecting no file and clicking on update button
					if (click(driver, fp.getUpdateButtonUpdateWindow(60), "update button on update window", action.BOOLEAN)) {
						if (fp.getSelectDocumentErrorMsg(60).getText().trim().equals(FundsPageErrorMessage.updateDocumentErrorMsg)) {
							appLog.info("update error message is successfully verified when document is passed");
						}
					}
					if (sendKeys(driver, fp.getBrowseButtonUpdateWindow(60), System.getProperty("user.dir")+"//UploadFiles/Module8/ExistingUpdate//"+update_fileName, "choose file button on update window", action.SCROLLANDBOOLEAN)) {
						if (click(driver,fp.getUpdateButtonUpdateWindow(60),"update button on update window", action.BOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {
								String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
								switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
								if (msg.trim().equals(FundsPageErrorMessage.updateDocumentSuccessAlertMsg)) {
									appLog.info("correct message that document is updated is found successfully");
								}
								else {
									appLog.error("alert message that document is updated is not found");
									sa.assertTrue(false, "alert message that document is updated is not found");
								}
							}
							else {
								appLog.error("no alert message is present when correct file has been updated");
								sa.assertTrue(false, "no alert message is present when correct file has been updated");
							}
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {
								
								List<String> returnlist = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage));
								if (returnlist.isEmpty()) {
									appLog.info("updated file "+update_fileName+" is successfully found");
								}
								else {
									appLog.error("the updated file's name is not found on content grid");
								}
								//upload file with same name to check duplicate document error
								if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 60), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
									parentID = switchOnWindow(driver);
									if (fp.dragDropFiles("UploadFiles\\Module8\\ExistingUpdate", "DropLoc.jpg")) {
										ThreadSleep(5000);
										if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
											
											if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents heading is not present");
												sa.assertTrue(false, "duplicate documents heading is not present");
											}
											if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents sub heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents sub heading is not present");
												sa.assertTrue(false, "duplicate documents sub heading is not present");
											}
											if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
												appLog.info("folder location sub heading is successfully verified");
											}
											else {
												appLog.error("folder location sub heading is not visible");
												sa.assertTrue(false, "folder location sub heading is not visible");
											}
											if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
												appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
											}
											else {
												appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
											}
											if (fp.getUpdateAllButton(60)!=null) {
												appLog.info("update all button is present");
											}
											else {
												appLog.error("update all button is not present on duplicate document window");
												sa.assertTrue(false, "update all button is not present on duplicate document window");
											}
											if (fp.getIgnoreAllButton(60)!=null) {
												appLog.info("ignore all button is successfully present");
											}
											else {
												appLog.error("ignore all button is not present on duplicate docuemnts heading");
												sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
											}
											if (fp.getDuplicateDocumentValue(60).getText().trim().equals(update_fileName)) {
												appLog.info(update_fileName + " is duplicate according to alert window");
											}
											else {
												appLog.error("duplicate file name name is wrong on duplicate document window");
												sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
											}
											if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > "+intPath)) {
												appLog.info("folder name" + M7FundName1 + " > "+intPath+" for duplicate files is correct");
											}
											else {
												appLog.error("folder path for duplicate files is wrong");
												sa.assertTrue(false, "folder path for duplicate files is wrong");
											}
											if (click(driver, fp.getUpdateAllButton(60), "update all button on update window", action.SCROLLANDBOOLEAN)) {
												ThreadSleep(5000);
												if (isAlertPresent(driver)) {
													String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
													switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
													if (msg.trim().equals(FundsPageErrorMessage.DocumentUploadSuccessMsg)) {
														appLog.info("correct message that document is uploaded is found successfully");
													}
													else {
														appLog.error("alert message that document is uploaded is not found");
														sa.assertTrue(false, "alert message that document is uploaded is not found");
													}
												}
												else {
													appLog.error("no alert is present when successful document is uploaded");
												}
												driver.switchTo().window(parentID);
												switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
												if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {

													List<String> file_name = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage));
													if (file_name.isEmpty()) {
														appLog.info("updated file "+update_fileName+" is successfully found");
													}
													else {
														appLog.error("the updated file's name is not found on content grid");
													}
												}
												else {
													appLog.error("content grid refresh button is not clickable");
													sa.assertTrue(false, "content grid refresh button is not clickable");
												}
											}
											else {
												appLog.error("update all button on duplicate document window is not clickable");
												sa.assertTrue(false, "update all button on duplicate document window is not clickable");
											}
										}
										else {
											appLog.error("save button on upload window is not clickable");
											sa.assertTrue(false, "save button on upload window is not clickable");
										}
									}
									else {
										appLog.error("drag and drop of files to check duplicates is not successful");
										sa.assertTrue(false, "drag and drop of files to check duplicates is not successful");
									}
								}
								else {
									appLog.error("upload icon is not clickable on fundraising wokrpsace");
									sa.assertTrue(false, "upload icon is not clickable on fundraising wokrpsace");
								}

							}
							else {
								appLog.error("refresh button on content grid is not clickable");
								sa.assertTrue(false, "refresh button on content grid is not clickable");
							}
						}
						else {
							appLog.error("update button on update window is not clickable");
							sa.assertTrue(false, "update button on update window is not clickable");
						}
					}
					else {
						appLog.error("updated file path could not passed on browse button on update window");
						sa.assertTrue(false, "updated file path could not passed on browse button on update window");
					}
			}
				else {
					appLog.error("down arrow of document name specified cannot be found");
					sa.assertTrue(false, "down arrow of document name specified cannot be found");
				}
				
		}
			else {
				appLog.error("folder path "+intPath+" cannot be found");
				sa.assertTrue(false, "folder path "+intPath+" cannot be found");
			}
	}
		else {
			appLog.error("fund "+M7FundName1+" cannot be found");
			sa.assertTrue(false, "fund "+M7FundName1+" cannot be found");
		}
}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc024_UpdateInternalFolder_ImpactCRM() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	String date = null;
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileInternal);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	
	// Institution tab verify updated document name
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"fundrasising workspace view");

			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + intPath);

				if (update_fileName != null) {

					date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, update_fileName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);
					//saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, update_fileName,
					//		"Approved", "PE Admin", date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + intPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	}
	@Test
	public void M7tc025_UpdateSharedFolder_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	String date = null;
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileShared);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				//verifying view of update window
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Update, fileName, Workspace.FundraisingWorkspace, 60, null)) {
					parentID = switchOnWindow(driver);
					if (fp.getUpdateWindowHeading(60).getText().trim().equals("Upload New Version")) {
						appLog.info("update heading is successfully verified");
					}
					else {
						appLog.error("update heading is wrong on update window");
						sa.assertTrue(false, "update heading is wrong on update window");
					}
					if (fp.getUpdatingTextLabel(60).getText().trim().equals("Updating:")) {
						appLog.info("updating text is successfully verified");
					}
					if (fp.getFileNameOnUpdateWindow(60).getText().trim().equals(fileName)) {
						appLog.info("file name "+fileName+ " is successfully verified on update window");
					}
					if (fp.getBrowseButtonUpdateWindow(60)!=null) {
						appLog.info("choose file button is successfully verified on update window");
					}
					if (fp.getUpdateButtonUpdateWindow(60)!=null) {
						appLog.info("update button is successfully verified on update window");
					}
					//selecting no file and clicking on update button
					if (click(driver, fp.getUpdateButtonUpdateWindow(60), "update button on update window", action.BOOLEAN)) {
						if (fp.getSelectDocumentErrorMsg(60).getText().trim().equals(FundsPageErrorMessage.updateDocumentErrorMsg)) {
							appLog.info("update error message is successfully verified when document is passed");
						}
					}
					if (sendKeys(driver, fp.getBrowseButtonUpdateWindow(60), System.getProperty("user.dir")+"//UploadFiles/Module8/ExistingUpdate//"+update_fileName, "choose file button on update window", action.SCROLLANDBOOLEAN)) {
						if (click(driver,fp.getUpdateButtonUpdateWindow(60),"update button on update window", action.BOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {
								String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
								switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
								if (msg.trim().equals(FundsPageErrorMessage.updateDocumentSuccessAlertMsg)) {
									appLog.info("correct message that document is updated is found successfully");
								}
								else {
									appLog.error("alert message that document is updated is not found");
									sa.assertTrue(false, "alert message that document is updated is not found");
								}
							}
							else {
								appLog.error("no alert message is present when correct file has been updated");
								sa.assertTrue(false, "no alert message is present when correct file has been updated");
							}
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {
								
								List<String> returnlist = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage));
								if (returnlist.isEmpty()) {
									appLog.info("updated file "+update_fileName+" is successfully found");
								}
								else {
									appLog.error("the updated file's name is not found on content grid");
								}
								//upload file with same name to check duplicate document error
								if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 60), "upload icon on "+Workspace.FundraisingWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
									parentID = switchOnWindow(driver);
									if (fp.dragDropFiles("UploadFiles\\Module8\\ExistingUpdate", "DropLoc.jpg")) {
										ThreadSleep(5000);
										if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
											
											if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents heading is not present");
												sa.assertTrue(false, "duplicate documents heading is not present");
											}
											if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents sub heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents sub heading is not present");
												sa.assertTrue(false, "duplicate documents sub heading is not present");
											}
											if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
												appLog.info("folder location sub heading is successfully verified");
											}
											else {
												appLog.error("folder location sub heading is not visible");
												sa.assertTrue(false, "folder location sub heading is not visible");
											}
											if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
												appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
											}
											else {
												appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
											}
											if (fp.getUpdateAllButton(60)!=null) {
												appLog.info("update all button is present");
											}
											else {
												appLog.error("update all button is not present on duplicate document window");
												sa.assertTrue(false, "update all button is not present on duplicate document window");
											}
											if (fp.getIgnoreAllButton(60)!=null) {
												appLog.info("ignore all button is successfully present");
											}
											else {
												appLog.error("ignore all button is not present on duplicate docuemnts heading");
												sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
											}
											if (fp.getDuplicateDocumentValue(60).getText().trim().equals(update_fileName)) {
												appLog.info(update_fileName + " is duplicate according to alert window");
											}
											else {
												appLog.error("duplicate file name name is wrong on duplicate document window");
												sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
											}
											if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > "+shdPath)) {
												appLog.info("folder name" + M7FundName1 + " > "+shdPath+" for duplicate files is correct");
											}
											else {
												appLog.error("folder path for duplicate files is wrong");
												sa.assertTrue(false, "folder path for duplicate files is wrong");
											}
											if (click(driver, fp.getUpdateAllButton(60), "update all button on update window", action.SCROLLANDBOOLEAN)) {
												ThreadSleep(5000);
												if (isAlertPresent(driver)) {
													String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
													switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
													if (msg.trim().equals(FundsPageErrorMessage.DocumentUploadSuccessMsg)) {
														appLog.info("correct message that document is uploaded is found successfully");
													}
													else {
														appLog.error("alert message that document is uploaded is not found");
														sa.assertTrue(false, "alert message that document is uploaded is not found");
													}
												}
												else {
													appLog.error("no alert is present when successful document is uploaded");
												}
												driver.switchTo().window(parentID);
												switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
												if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {

													List<String> file_name = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage));
													if (file_name.isEmpty()) {
														appLog.info("updated file "+update_fileName+" is successfully found");
													}
													else {
														appLog.error("the updated file's name is not found on content grid");
													}
												}
												else {
													appLog.error("content grid refresh button is not clickable");
													sa.assertTrue(false, "content grid refresh button is not clickable");
												}
											}
											else {
												appLog.error("update all button on duplicate document window is not clickable");
												sa.assertTrue(false, "update all button on duplicate document window is not clickable");
											}
										}
										else {
											appLog.error("save button on upload window is not clickable");
											sa.assertTrue(false, "save button on upload window is not clickable");
										}
									}
									else {
										appLog.error("drag and drop of files to check duplicates is not successful");
										sa.assertTrue(false, "drag and drop of files to check duplicates is not successful");
									}
								}
								else {
									appLog.error("upload icon is not clickable on fundraising wokrpsace");
									sa.assertTrue(false, "upload icon is not clickable on fundraising wokrpsace");
								}

							}
							else {
								appLog.error("refresh button on content grid is not clickable");
								sa.assertTrue(false, "refresh button on content grid is not clickable");
							}
						}
						else {
							appLog.error("update button on update window is not clickable");
							sa.assertTrue(false, "update button on update window is not clickable");
						}
					}
					else {
						appLog.error("updated file path could not passed on browse button on update window");
						sa.assertTrue(false, "updated file path could not passed on browse button on update window");
					}
			}
				else {
					appLog.error("down arrow of document name specified cannot be found");
					sa.assertTrue(false, "down arrow of document name specified cannot be found");
				}
				
		}
			else {
				appLog.error("folder path "+shdPath+" cannot be found");
				sa.assertTrue(false, "folder path "+shdPath+" cannot be found");
			}
	}
		else {
			appLog.error("fund "+M7FundName1+" cannot be found");
			sa.assertTrue(false, "fund "+M7FundName1+" cannot be found");
		}
}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc025_UpdateSharedFolder_ImpactCRM() {
	
	// Institution tab verify updated document name
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileShared);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"fundrasising workspace view");

			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + shdPath);

				if (update_fileName != null) {
					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, update_fileName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);
					//saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, update_fileName,
					//		"Approved", "PE Admin", date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + shdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	
		// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
							"fundraising workspace view");

					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + shdPath);


						if (update_fileName != null) {

							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, update_fileName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);
							//saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, update_fileName,
							//		"Approved", "PE Admin", date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + shdPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc025_UpdateSharedFolder_ImpactInvestor() {
	//Investor Side
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileShared);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdPath);
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, update_fileName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			//saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, update_fileName, "PE Admin", date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	}
@Test
	public void M7tc026_UpdateStandardFolderSingleInstitution_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				//verifying view of update window
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Update, fileName, Workspace.FundraisingWorkspace, 60, null)) {
					parentID = switchOnWindow(driver);
					if (fp.getUpdateWindowHeading(60).getText().trim().equals("Upload New Version")) {
						appLog.info("update heading is successfully verified");
					}
					else {
						appLog.error("update heading is wrong on update window");
						sa.assertTrue(false, "update heading is wrong on update window");
					}
					if (fp.getUpdatingTextLabel(60).getText().trim().equals("Updating:")) {
						appLog.info("updating text is successfully verified");
					}
					else {
						appLog.error("updating text is not present");
						sa.assertTrue(false, "updating text is not present");
					}
					if (fp.getFileNameOnUpdateWindow(60).getText().trim().equals(fileName)) {
						appLog.info("file name "+fileName+ " is successfully verified on update window");
					}
					else {
						appLog.error("file name "+fileName+ " is not present on update window");
						sa.assertTrue(false, "file name "+fileName+ " is not present on update window");
					}
					if (fp.getBrowseButtonUpdateWindow(60)!=null) {
						appLog.info("choose file button is successfully verified on update window");
					}
					else {
						appLog.error("choose file button is not present on update window");
						sa.assertTrue(false, "choose file button is not present on update window");
					}
					if (fp.getUpdateButtonUpdateWindow(60)!=null) {
						appLog.info("update button is successfully verified on update window");
					}
					else {
						appLog.error("update button is not present on update window");
						sa.assertTrue(false, "update button is not present on update window");
					}
					//selecting no file and clicking on update button
					if (click(driver, fp.getUpdateButtonUpdateWindow(60), "update button on update window", action.BOOLEAN)) {
						if (fp.getSelectDocumentErrorMsg(60).getText().trim().equals(FundsPageErrorMessage.updateDocumentErrorMsg)) {
							appLog.info("update error message is successfully verified when document is passed");
						}
						else {
							appLog.error("update error message is wrong present on update window");
							sa.assertTrue(false, "update error message is wrong present on update window");
						}
					}
					if (sendKeys(driver, fp.getBrowseButtonUpdateWindow(60), System.getProperty("user.dir")+"//UploadFiles/Module8/ExistingUpdate//"+update_fileName, "choose file button on update window", action.SCROLLANDBOOLEAN)) {
						if (click(driver,fp.getUpdateButtonUpdateWindow(60),"update button on update window", action.BOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {
								String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
								switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
								if (msg.trim().equals(FundsPageErrorMessage.updateDocumentSuccessAlertMsg)) {
									appLog.info("correct message that document is updated is found successfully");
								}
								else {
									appLog.error("alert message that document is updated is not found");
									sa.assertTrue(false, "alert message that document is updated is not found");
								}
							}
							else {
								appLog.error("no alert message is present when correct file has been updated");
								sa.assertTrue(false, "no alert message is present when correct file has been updated");
							}
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {
								
								List<String> returnlist = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage));
								if (returnlist.isEmpty()) {
									appLog.info("updated file "+update_fileName+" is successfully found");
								}
								else {
									appLog.error("the updated file's name is not found on content grid");
									sa.assertTrue(false, "the updated file's name is not found on content grid");
								}
								//upload file with same name to check duplicate document error
								if (click(driver, fp.getUploadIcon(Workspace.FundraisingWorkspace, 60), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
									parentID = switchOnWindow(driver);
									//select single institution
									click(driver, fp.getUploadNextButton(Workspace.FundraisingWorkspace, 60), "next button on uplaod window standard folder", action.SCROLLANDBOOLEAN);
									if (fp.dragDropFiles("UploadFiles\\Module8\\ExistingUpdate", "DropLoc.jpg")) {
										ThreadSleep(5000);
										if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
											
											if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents heading is not present");
												sa.assertTrue(false, "duplicate documents heading is not present");
											}
											if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents sub heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents sub heading is not present");
												sa.assertTrue(false, "duplicate documents sub heading is not present");
											}
											if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
												appLog.info("folder location sub heading is successfully verified");
											}
											else {
												appLog.error("folder location sub heading is not visible");
												sa.assertTrue(false, "folder location sub heading is not visible");
											}
											if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
												appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
											}
											else {
												appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
											}
											if (fp.getUpdateAllButton(60)!=null) {
												appLog.info("update all button is present");
											}
											else {
												appLog.error("update all button is not present on duplicate document window");
												sa.assertTrue(false, "update all button is not present on duplicate document window");
											}
											if (fp.getIgnoreAllButton(60)!=null) {
												appLog.info("ignore all button is successfully present");
											}
											else {
												appLog.error("ignore all button is not present on duplicate docuemnts heading");
												sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
											}
											if (fp.getDuplicateDocumentValue(60).getText().trim().equals(update_fileName)) {
												appLog.info(update_fileName + " is duplicate according to alert window");
											}
											else {
												appLog.error("duplicate file name name is wrong on duplicate document window");
												sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
											}
											if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > "+M7Institution1 + " > " + stdPath)) {
												appLog.info("folder name" + M7FundName1 + " > "+M7Institution1 + " > " + stdPath+" for duplicate files is correct");
											}
											else {
												appLog.error("folder path for duplicate files is wrong");
												sa.assertTrue(false, "folder path for duplicate files is wrong");
											}
											if (click(driver, fp.getUpdateAllButton(60), "update all button on update window", action.SCROLLANDBOOLEAN)) {
												ThreadSleep(5000);
												if (isAlertPresent(driver)) {
													String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
													switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
													if (msg.trim().equals(FundsPageErrorMessage.DocumentUploadSuccessMsg)) {
														appLog.info("correct message that document is uploaded is found successfully");
													}
													else {
														appLog.error("alert message that document is uploaded is not found");
														sa.assertTrue(false, "alert message that document is uploaded is not found");
													}
												}
												else {
													appLog.error("no alert is present when successful document is uploaded");
												}
												driver.switchTo().window(parentID);
												switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
												if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {

													List<String> file_name = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage));
													if (file_name.isEmpty()) {
														appLog.info("updated file "+update_fileName+" is successfully found");
													}
													else {
														appLog.error("the updated file's name is not found on content grid");
													}
												}
												else {
													appLog.error("content grid refresh button is not clickable");
													sa.assertTrue(false, "content grid refresh button is not clickable");
												}
											}
											else {
												appLog.error("update all button on duplicate document window is not clickable");
												sa.assertTrue(false, "update all button on duplicate document window is not clickable");
											}


										}
										else {
											appLog.error("save button on upload window is not clickable");
											sa.assertTrue(false, "save button on upload window is not clickable");
										}
										}
									else {
										appLog.error("drag and drop of files to check duplicates is not successful");
										sa.assertTrue(false, "drag and drop of files to check duplicates is not successful");
									}
								}
								else {
									appLog.error("upload icon is not clickable on fundraising wokrpsace");
									sa.assertTrue(false, "upload icon is not clickable on fundraising wokrpsace");
								}
								
							}
							else {
								appLog.error("refresh button on content grid is not clickable");
								sa.assertTrue(false, "refresh button on content grid is not clickable");
							}
						}
						else {
							appLog.error("update button on update window is not clickable");
							sa.assertTrue(false, "update button on update window is not clickable");
						}
					}
					else {
						appLog.error("updated file path could not passed on browse button on update window");
						sa.assertTrue(false, "updated file path could not passed on browse button on update window");
					}
			}
				else {
					appLog.error("down arrow of document name specified cannot be found");
					sa.assertTrue(false, "down arrow of document name specified cannot be found");
				}
				
		}
			else {
				appLog.error("folder path "+stdPath+" cannot be found");
				sa.assertTrue(false, "folder path "+stdPath+" cannot be found");
			}
	}
		else {
			appLog.error("fund "+M7FundName1+" cannot be found");
			sa.assertTrue(false, "fund "+M7FundName1+" cannot be found");
		}
}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc026_UpdateStandardFolderSingleInstitution_ImpactCRM() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	
	// Institution tab verify updated document name
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"fundrasising workspace view");

			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				if (update_fileName != null) {
					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, update_fileName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);
					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	
		// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
							"fundraising workspace view");

					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.FundraisingWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);


						if (update_fileName != null) {
							HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPage(30, Workspace.FundraisingWorkspace), By.xpath("//div[@id='divFrWorkspace']//span[contains(@id,'myGridfundr-cell-0-')]//a/u"));
							if (set.contains(update_fileName)) {
								appLog.info(update_fileName+" is successfully found in "+PageName.ContactsPage.toString());
							}
							else {
								appLog.error(update_fileName+" is not found in "+PageName.ContactsPage.toString());
								sa.assertTrue(false, update_fileName+" is not found in "+PageName.ContactsPage.toString());
							}

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc026_UpdateStandardFolderSingleInstitution_ImpactInvestor() {
	//Investor Side
	
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
		if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			 HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));
				if (set.contains(update_fileName)) {
					appLog.info(update_fileName+" is successfully found in "+PageName.PotentialInvestmentPage.toString());
				}
				else {
					appLog.error(update_fileName+" is not found in "+PageName.PotentialInvestmentPage.toString());
					sa.assertTrue(false, update_fileName+" is not found in "+PageName.PotentialInvestmentPage.toString());
				}
				} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();
}
@Test
	public void M7tc027_UpdateStandardFolderMultipleInstitution_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	//upload_mult1.pdf, upload_mult2.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	String fileArray[] = fileName.split(",");
	
	//update_mult1.pdf, update_mult2.pdf
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String update_fileArray[] = update_fileName.split(",");
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 30)) {
				
			}
			else {
				appLog.error("folder "+stdPath+" was not found on "+PageName.FundsPage.toString());
				sa.assertTrue(false, "folder "+stdPath+" was not found on "+PageName.FundsPage.toString());
			}
				//upload_mult1.pdf in filearray[0]
			int i =0;
			boolean flag=false;
			while(true) {
				List<WebElement> ele=fp.getColumnHeads(PageName.FundsPage, Workspace.FundraisingWorkspace);
				List<WebElement>listOfVisibleElements = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
				for (int j = 0;j<listOfVisibleElements.size();j++) {
					String a = listOfVisibleElements.get(j).getText().trim();
					if (a.equalsIgnoreCase(fileArray[0])) {
						appLog.info(fileArray[0]+" is available in the content grid");
						fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Update, fileArray[0], Workspace.FundraisingWorkspace, 60, null);
						flag=true;
						break;
					}
					if(j==listOfVisibleElements.size()-1){
						appLog.error(fileArray[0]+"file is not present in the  content grid");
					}
				}
				if(flag){
					break;					
				}else {
					i++;
					if(i==2){
						appLog.error(fileArray[0]+" is not available in the content grid ");
						sa.assertTrue(false,fileArray[0]+" is not available in the content grid");
						break;
					}
				}
				click(driver, ele.get(0),"document name column head", action.SCROLLANDBOOLEAN);
			}
					click(driver, fp.getColumnHeads(PageName.FundsPage, Workspace.FundraisingWorkspace).get(0), "document name column name", action.SCROLLANDBOOLEAN);
					click(driver,fp.getSortingArrow(PageName.FundsPage, Workspace.FundraisingWorkspace).get(0), "sorting arrow for document name", action.BOOLEAN);
					//upload_mult1.pdf in filearray[0]
				
				parentID = switchOnWindow(driver);
				if (fp.getMultipleInstancesHead(60).getText().trim().equals("Multiple Instances Found")) {
					appLog.info("multiple instances heading is successfully displayed");
				}
				else {
					appLog.error("multiple instance heading is not present");
					sa.assertTrue(false, "multiple instance heading is not present");
				}
				if (fp.getThisOrAllInvestorText(60).getText().trim().equals(FundsPageErrorMessage.thisOrAllInvestor)) {
					appLog.info("text for this or all investor is successfully displayed on update window");
				}
				else {
					appLog.error("text for this or all investor is not present on update window");
					sa.assertTrue(false, "text for this or all investor is not present on update window");
				}
				if (fp.getThisInvestorOnlyButton(60)!=null) {
					appLog.info("button to select this investor only is successfully displayed on update window");
				}
				else {
					appLog.error("button to select this investor only is not present on update window");
					sa.assertTrue(false, "button to select this investor only is not present on update window");
				}
				if (fp.getAllInvestorButton(60)!=null) {
					appLog.info("button to select all investors is successfully displayed on update window");
				}
				else {
					appLog.error("button to select all investors is not present on update window");
					sa.assertTrue(false, "button to select all investors is not present on update window");
				}
				if (click(driver, fp.getThisInvestorOnlyButton(60), "this investor only button update window", action.SCROLLANDBOOLEAN)) {
					if (sendKeys(driver, fp.getChooseFileButton(60), System.getProperty("user.dir")+"//UploadFiles/Module8/"+update_fileArray[0], "choose file button", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.getUpdateButtonUpdateWindow(60), "update button on update window", action.SCROLLANDBOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {
								String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
								switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
								if (msg.trim().equals(FundsPageErrorMessage.updateDocumentSuccessAlertMsg)) {
									appLog.info("correct message that document is updated is found successfully");
								}
								else {
									appLog.error("alert message that document is updated is not found");
									sa.assertTrue(false, "alert message that document is updated is not found");
								}
							}
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							//verifying update_mult1.pdf will be present in institution 1
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 60), "content grid refresh button", action.SCROLLANDBOOLEAN)) {
								List<WebElement> docList = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
								List<String> docName = new ArrayList<String>();
								for (WebElement ele1 : docList) {
									docName.add(ele1.getText().trim());
								}
								appLog.info("Document List :  "+docName);
								if(!docName.contains(update_fileArray[0])){
									appLog.error("Document Not Present In the Grid : "+update_fileArray[0]);
									sa.assertTrue(false, "Document Not Present In the Grid : "+update_fileArray[0]);
								}else{
									appLog.info("Document  Present In the Grid : "+update_fileArray[0]);
									
								}
								if (fp.verifyFolderPathdummy(stdPath, M7Institution2, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 30)) {
									//verifying update_mult1.pdf will not be present in institution2
									if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 60), "content grid refresh button", action.SCROLLANDBOOLEAN)) {
										List<WebElement> docInst2List = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
										List<String> docInst2Name = new ArrayList<String>();
										for (WebElement ele1 : docInst2List) {
											docInst2Name.add(ele1.getText().trim());
										}
										appLog.info("Document List :  "+docInst2Name);
										if(docInst2Name.contains(update_fileArray[0])){
											appLog.error("Document Present In the Grid : "+update_fileArray[0]);
											sa.assertTrue(false, "Document Present In the Grid : "+update_fileArray[0]);
										}else{
											appLog.info("Document not Present In the Grid : "+update_fileArray[0]);
											
										}
								}
									else {
										appLog.error("content grid refresh button is not clickable");
										sa.assertTrue(false, "content grid refresh button is not clickable");
									}
							}
								else {
									appLog.error(stdPath + " is not present in folder structure");
									sa.assertTrue(false, stdPath + " is not present in folder structure");
								}
						}
							else {
								appLog.error("content grid refresh button is not clickable");
								sa.assertTrue(false, "content grid refresh button is not clickable");
							}
					}
						else {
							appLog.error("update button on update window is not clickable");
							sa.assertTrue(false, "update button on update window is not clickable");
						}
				}
					else {
						appLog.error("choose file/browse button is not visible on update window");
						sa.assertTrue(false, "choose file/browse button is not visible on update window");
					}
				}
				else {
					appLog.error("this investor only button is not clickable on duplicate files update window");
					sa.assertTrue(false, "this investor only button is not clickable on duplicate files update window");
				}
			
		}
			else {
				appLog.error(stdPath + " is not present in folder structure");
				sa.assertTrue(false, stdPath + " is not present in folder structure");
			}
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7Institution1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				//selecting 2nd file upload_mult2.pdf in fileArray[1]
				try {
					fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Update,fileArray[1] , Workspace.FundraisingWorkspace, 60, null);
				}
				catch(Exception e) {
							click(driver, fp.getColumnHeads(PageName.FundsPage, Workspace.FundraisingWorkspace).get(0), "document name column name", action.SCROLLANDBOOLEAN);
							click(driver,fp.getSortingArrow(PageName.FundsPage, Workspace.FundraisingWorkspace).get(0), "sorting arrow for document name", action.BOOLEAN);
							fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Update,fileArray[1] , Workspace.FundraisingWorkspace, 60, null);
				}
					parentID = switchOnWindow(driver);
					
					if (click(driver, fp.getAllInvestorButton(60), "this investor only button update window", action.SCROLLANDBOOLEAN)) {
						if (sendKeys(driver, fp.getChooseFileButton(60), System.getProperty("user.dir")+"//UploadFiles/Module8/"+update_fileArray[1], "choose file button", action.SCROLLANDBOOLEAN)) {
							if (click(driver, fp.getUpdateButtonUpdateWindow(60), "update button on update window", action.SCROLLANDBOOLEAN)) {
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {
									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if (msg.trim().equals(FundsPageErrorMessage.updateDocumentSuccessAlertMsg)) {
										appLog.info("correct message that document is updated is found successfully");
									}
									else {
										appLog.error("alert message that document is updated is not found");
										sa.assertTrue(false, "alert message that document is updated is not found");
									}
								}
								driver.switchTo().window(parentID);
								switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								//verifying update_mult2.pdf will be present in institution 1
								if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 60), "content grid refresh button", action.SCROLLANDBOOLEAN)) {
									List<WebElement> docList = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
									List<String> docName = new ArrayList<String>();
									for (WebElement ele1 : docList) {
										docName.add(ele1.getText().trim());
									}
									appLog.info("Document List :  "+docName);
									if(!docName.contains(update_fileArray[1])){
										appLog.error("Document Not Present In the Grid : "+update_fileArray[1]);
										sa.assertTrue(false, "Document Not Present In the Grid : "+update_fileArray[1]);
									}else{
										appLog.info("Document  Present In the Grid : "+update_fileArray[1]);
										
									}
									if (fp.verifyFolderPathdummy(stdPath, M7Institution2, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 30)) {
										//verifying update_mult2.pdf will present in institution2
										if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 60), "content grid refresh button", action.SCROLLANDBOOLEAN)) {
											List<WebElement> docInst2List = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
											List<String> docInst2Name = new ArrayList<String>();
											for (WebElement ele1 : docInst2List) {
												docInst2Name.add(ele1.getText().trim());
											}
											appLog.info("Document List :  "+docInst2Name);
											if(!docInst2Name.contains(update_fileArray[1])){
												appLog.error("Document Not Present In the Grid : "+update_fileArray[1]);
												sa.assertTrue(false, "Document Not Present In the Grid : "+update_fileArray[1]);
											}else{
												appLog.info("Document  Present In the Grid : "+update_fileArray[1]);
												
											}
									}
										else {
											appLog.error("content grid refresh button is not clickable");
											sa.assertTrue(false, "content grid refresh button is not clickable");
										}
								}
									else {
										appLog.error(stdPath + " is not found in folder path");
										sa.assertTrue(false, stdPath + " is not found in folder path");
									}
					
								}
								else {
									appLog.error("content grid refresh button is not clickable");
									sa.assertTrue(false, "content grid refresh button is not clickable");
								}
							}
							else {
								appLog.error("update button on update window is not clickable");
								sa.assertTrue(false, "update button on update window is not clickable");
							}
						}
						else {
							appLog.error("choose file button is not visible on update window");
							sa.assertTrue(false, "choose file button is not visible on update window");
						}
					}
					else {
						appLog.error("all investor button is not clickable on clash of duplicate file to update");
						sa.assertTrue(false, "all investor button is not clickable on clash of duplicate file to update");
					}
			
			}
			else {
				appLog.error(stdPath + " is not present in folder structure");
				sa.assertTrue(false,stdPath + " is not present in folder structure" );
			}
		
	}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc027_UpdateStandardFolderMultipleInstitution_ImpactCRM() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String parentID=null;
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	//upload_mult1.pdf, upload_mult2.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	String fileArray[] = fileName.split(",");
	
	//update_mult1.pdf, update_mult2.pdf
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String update_fileArray[] = update_fileName.split(",");
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	//Institution 1
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"fundrasising workspace view");

			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);
				//update_mult1.pdf and update_mult2.pdf will be present in institution 1
				List<WebElement> docInst1List = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.InstitutionsPage);
				if (docInst1List != null) {
					List<String> docInst1Name = new ArrayList<String>();
					for (WebElement ele1 : docInst1List) {
						docInst1Name.add(ele1.getText().trim());
					}
					appLog.info("Document List :  "+docInst1Name);
					
					if(!docInst1Name.contains(update_fileArray[0])){
						appLog.error("Document Not Present In the Grid : "+update_fileArray[0]);
						sa.assertTrue(false, "Document Not Present In the Grid : "+update_fileArray[0]);
					}else{
						appLog.info("Document  Present In the Grid : "+update_fileArray[0]);
						
					}
					if(!docInst1Name.contains(update_fileArray[1])){
						appLog.error("Document Not Present In the Grid : "+update_fileArray[1]);
						sa.assertTrue(false, "Document Not Present In the Grid : "+update_fileArray[1]);
					}else{
						appLog.info("Document  Present In the Grid : "+update_fileArray[1]);
						
					}
				} else {
					appLog.error("No elements for Verifying Content Grid");
					sa.assertTrue(false, "No elements for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	switchToDefaultContent(driver);
	//Institution 2
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution2)) {
			appLog.info("Opened Institution : " + M7Institution2);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"fundrasising workspace view");

			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);
				//update_mult2.pdf will be present in institutions2
				
					List<WebElement> docInst2List = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.InstitutionsPage);
				if (docInst2List != null) {
					List<String> docInst2Name = new ArrayList<String>();
					for (WebElement ele1 : docInst2List) {
						docInst2Name.add(ele1.getText().trim());
					}
					appLog.info("Document List :  "+docInst2Name);
					if(!docInst2Name.contains(update_fileArray[1])){
						appLog.error("Document Not Present In the Grid : "+update_fileArray[1]);
						sa.assertTrue(false, "Document Not Present In the Grid : "+update_fileArray[1]);
					}else{
						appLog.info("Document  Present In the Grid : "+update_fileArray[1]);
						
					}
					
				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}


	// Contact Tab
		//contact 1 will have access to institution 1
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
				appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"fundraising workspace view");

				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
						Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);
					//update_mult1.pdf and update_mult2.pdf will be present in institution 1

						HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPage(30, Workspace.FundraisingWorkspace), By.xpath("//div[@id='divFrWorkspace']//span[contains(@id,'myGridfundr-cell-0-')]//a/u"));
						if (set.contains(update_fileArray[0])) {
							appLog.info(update_fileArray[0]+" is successfully found in "+PageName.ContactsPage.toString());
						}
						else {
							appLog.error(update_fileArray[0]+" is not found in "+PageName.ContactsPage.toString());
							sa.assertTrue(false, update_fileArray[1]+" is not found in "+PageName.ContactsPage.toString());
						}
						
						if (set.contains(update_fileArray[1])) {
							appLog.info(update_fileArray[1]+" is successfully found in "+PageName.ContactsPage.toString());
						}
						else {
							appLog.error(update_fileArray[1]+" is not found in "+PageName.ContactsPage.toString());
							sa.assertTrue(false, update_fileArray[1]+" is not found in "+PageName.ContactsPage.toString());
						}


				} else {
					appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			}
		} else {
			appLog.error("Not able to Click Contact tab ");
			sa.assertTrue(false, "Not able to Click Contact tab ");
		}
		//contact 2 will have access to isntitution 2

		
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M7Contact2FirstName, M7Contact2LastName, null)) {
				appLog.info("Opened Contact  : " + M7Contact2FirstName+" "+M7Contact2LastName);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"fundraising workspace view");

				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
						Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);
						//update_mult2.pdf will be present in institution 2

						HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPage(30, Workspace.FundraisingWorkspace), By.xpath("//div[@id='divFrWorkspace']//span[contains(@id,'myGridfundr-cell-0-')]//a/u"));
						if (set.contains(update_fileArray[1])) {
							appLog.info(update_fileArray[1]+" is successfully found in "+PageName.ContactsPage.toString());
						}
						else {
							appLog.error(update_fileArray[1]+" is not found in "+PageName.ContactsPage.toString());
							sa.assertTrue(false, update_fileArray[1]+" is not found in "+PageName.ContactsPage.toString());
						}


				} else {
					appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			}
		} else {
			appLog.error("Not able to Click Contact tab ");
			sa.assertTrue(false, "Not able to Click Contact tab ");
		}

		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
}
@Test
	public void M7tc027_UpdateStandardFolderMultipleInstitution_ImpactInvestor() {
		//Investor Side
		//contact 1
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);

	String parentID=null;
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	//upload_mult1.pdf, upload_mult2.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	String fileArray[] = fileName.split(",");
	
	//update_mult1.pdf, update_mult2.pdf
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String update_fileArray[] = update_fileName.split(",");
		lp.investorLogin(M7Contact1EmailId, adminPassword);
		if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.PotentialInvestmentPage,
					null, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);
				HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));
				if (set.contains(update_fileArray[0])) {
					appLog.info(update_fileArray[0]+" is successfully found in "+PageName.PotentialInvestmentPage.toString());
				}
				else {
					appLog.error(update_fileArray[0]+" is not found in "+PageName.PotentialInvestmentPage.toString());
					sa.assertTrue(false, update_fileArray[0]+" is not found in "+PageName.PotentialInvestmentPage.toString());
				}
				if (set.contains(update_fileArray[1])) {
					appLog.info(update_fileArray[1]+" is successfully found in "+PageName.PotentialInvestmentPage.toString());
				}
				else {
					appLog.error(update_fileArray[1]+" is not found in "+PageName.PotentialInvestmentPage.toString());
					sa.assertTrue(false, update_fileArray[1]+" is not found in "+PageName.PotentialInvestmentPage.toString());
				}
				sa.combineAssertions(saa);
			}

		
		}
		lp.investorLogout();
		ThreadSleep(3000);
		driver.close();
		config(ExcelUtils.readDataFromPropertyFile("Browser"));
		lp = new LoginPageBusinessLayer(driver);
		fp = new FundsPageBusinessLayer(driver);
		ifp = new InvestorFirmPageBusinesslayer(driver);

		lp.investorLogin(M7Contact2EmailId, adminPassword);
		if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.PotentialInvestmentPage,
					null, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);
				HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));
				if (set.contains(update_fileArray[0])) {
					appLog.error(update_fileArray[0]+" is found in "+PageName.PotentialInvestmentPage.toString());
					sa.assertTrue(false, update_fileArray[0]+" is found in "+PageName.PotentialInvestmentPage.toString());
				}
				else {
					appLog.info(update_fileArray[0]+" is not found in "+PageName.PotentialInvestmentPage.toString()+", it is same as expected.");
					
				}
				if (set.contains(update_fileArray[1])) {
					appLog.info(update_fileArray[1]+" is successfully found in "+PageName.PotentialInvestmentPage.toString());
				}
				else {
					appLog.error(update_fileArray[1]+" is not found in "+PageName.PotentialInvestmentPage.toString());
					sa.assertTrue(false, update_fileArray[1]+" is not found in "+PageName.PotentialInvestmentPage.toString());
				}
				sa.combineAssertions(saa);
			}

		
		}
		lp.investorLogout();
		sa.combineAssertions(saa);
		sa.assertAll();
}
@Test
	public void M7tc028_UpdateFileInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String parentID= null;
	String filePath = "\\UploadFiles\\Module8\\";
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.UploadedFileStandard);
	System.out.println("standard path " + stdPath);
	System.out.println("filename " + fileName);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			if (click(driver, ifp.getUploadIcon(60), "upload icon on investor side potential investment", action.SCROLLANDBOOLEAN)) {
			parentID = switchOnWindow(driver);
			if (sendKeys(driver, ifp.getChooseFileButton(60), System.getProperty("user.dir")+filePath+fileName, "browse/choose file button on upload window on investor page", action.SCROLLANDBOOLEAN)) {
					if (click(driver, ifp.getAddButton(60), "add button on upload window", action.SCROLLANDBOOLEAN)) {
						if (ifp.getDuplicateDocText(60).getText().trim().equals(InvestorFirmPageErrorMessage.DocumentUploadUpdateSuccessMsg)) {
							appLog.info("duplicate document uploaded previously by same investor text is successfully found");
						}
						else {
							appLog.error("duplicate document text is not found");
							sa.assertTrue(false, "duplicate document text is not found");
						}
						click(driver,ifp.getIgnoreBtn(60), "ignore button on upload window investor login", action.SCROLLANDBOOLEAN);
							driver.switchTo().window(parentID);
						}
						
					}
			}
			else {
				appLog.error("upload icon is not clickable on potential investments content grid");
				sa.assertTrue(false, "upload icon is not clickable on potential investments content grid");
			}
			if (click(driver, ifp.getUploadIcon(60),"upload icon on investor side potential investment", action.SCROLLANDBOOLEAN)) {
				parentID = switchOnWindow(driver);
				if (sendKeys(driver, ifp.getChooseFileButton(60), System.getProperty("user.dir")+filePath+fileName, "browse/choose file button", action.SCROLLANDBOOLEAN)) {
					if (click(driver, ifp.getAddButton(60), "add button on upload window", action.SCROLLANDBOOLEAN)) {
						
						if (click(driver, ifp.getUpdateButton(60), "update button on upload window investor portal", action.BOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {
							
							String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
							switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
							if (msg.trim().equals(FundsPageErrorMessage.DocumentUploadRepeatSuccessMsg)) {
								appLog.info("correct alert message for document upload is found successfully");
							}
							else {
								appLog.error("alert message for document upload is not found");
								sa.assertTrue(false, "alert message for document upload is not found");
							}
						}
							else {
								appLog.error("no alert is present when document is updated");
								sa.assertTrue(false, "no alert is present when document is updated");
							}
					}
						else {
							appLog.error("update button on upload window is not clickable");
							sa.assertTrue(false, "update button on upload window is not clickable");
						}
				}
					else {
						appLog.error("add button on upload window is not clickable");
						sa.assertTrue(false, "add button on upload window is not clickable");
					}
			}
				else {
					appLog.error("choose file/browse button is not visible on upload window");
					sa.assertTrue(false, "choose file/browse button is not visible on upload window");
				}
				//verifying presence of file in potential investment workspace
				driver.switchTo().window(parentID);
				if (click(driver, ifp.getRefreshIcon(60), "refresh icon on potential investment workspace", action.SCROLLANDBOOLEAN)) {
					HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));
					if (set.contains(fileName)) {
						appLog.info(fileName+" is found in "+PageName.PotentialInvestmentPage.toString());
					
					}
					else {
						appLog.error(fileName+" is not found in "+PageName.PotentialInvestmentPage.toString()+", it is same as expected.");
						sa.assertTrue(false, fileName+" is not found in "+PageName.PotentialInvestmentPage.toString());
					}
				}
			}
			else {
				appLog.error("upload icon on potential workspace content grid is not clickable");
				sa.assertTrue(false, "upload icon on potential workspace content grid is not clickable");
			}
		}
		else {
			appLog.error("the path specified "+stdPath+ " is not found in folder structure");
			sa.assertTrue(false, "the path specified "+stdPath+ " is not found in folder structure");
		}
		
	}
	else {
		appLog.error("investor tab potential workspace link is not clickable");
		sa.assertTrue(false, "investor tab potential workspace link is not clickable");
	}
	sa.assertAll();
}
@Test
	public void M7tc029_ManageVersionCommonAction() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileCommon);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileCommon);
	
	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//"+updatedFileName;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, fileName, Workspace.FundraisingWorkspace, 30, "Yes")) {
					//verify manage version ui
					//v3 version
					if (fp.verifyManageVersionUI(updatedFileName, System.getProperty("user.dir")+path, fileName,"V3", true,false,true,null)) {
						appLog.info("manage version ui 1st time is successfully verified");
					}
					else {
						appLog.error("manage version ui 1st time could not be verified");
						sa.assertTrue(false, "manage version ui 1st time could not be verified");
					}
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version pop up close button", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "fundraising workspace refresh button", action.SCROLLANDBOOLEAN)) {
							
						}
					}
					else {
						appLog.error("manage version popup close button is not clickable");
						sa.assertTrue(false, "manage version popup close button is not clickable");
					}
				}
				
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.FundraisingWorkspace, 30, "Yes")) {
					if (fp.verifyManageVersion2ndTime(updatedFileName, fileName, oldestFileName, "V4")) {
						appLog.info("manage version window is successfully verified 2nd time");
					}
					else {
						appLog.error("manage version window cannot be verified");
						sa.assertTrue(false, "manage version window cannot be verified");
					}
					//after verifying UI, clicking on refresh button
					if (click(driver, fp.getManageVersionRefresh(60), "manage version refresh button", action.SCROLLANDBOOLEAN)) {
						appLog.info("clicking on refresh button on manage version window");
					}
					
					//check make current functionality
					if (fp.verifyMakeCurrentFunctionalityManageVersion(updatedFileName, fileName,oldestFileName, "V5")) {
					appLog.info("make current functionality is successfully verified");
					}
					else {
					appLog.error("make current functionality cannot be verified");
					sa.assertTrue(false, "make current funcionality cannot be verified");
					}
					//closing manage version popup
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version close button", action.SCROLLANDBOOLEAN)) {
						appLog.info("close button on manage version close button");
					}
					else {
						appLog.error("manage version close button is not clickable");
						sa.assertTrue(false, "manage version close button is not clickable");
					}
					
					//verifying open file functionality on manage version popup
					if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.FundraisingWorkspace, 30, "Yes")) {
							if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.FundraisingWorkspace, fileName, true, true, false)) {
								appLog.info("download button and close button are successfully verified on manage version window");
							}
							else {
								appLog.error("download and close button could not be verified on manage version window");
								sa.assertTrue(false, "download and close button could not be verified on manage version window");
							}
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							scrollDownThroughWebelement(driver, fp.getManageVersionsPopUpCrossIcon(60) , "cross icon on manage version window");
							if (click(driver, fp.getManageVersionsPopUpCrossIcon(60), "manage version cross icon", action.SCROLLANDBOOLEAN)) {
								if (fp.getUploadIcon(Workspace.FundraisingWorkspace, 30)!=null) {
									appLog.info("manage version window is successfully closed");
									
								}
							}
							
					}
					else {
						appLog.error("manage version could not be found in down arrow dropdown list");
						sa.assertTrue(false, "manage version could not be found in down arrow dropdown list");
					}
				}
				else {
					appLog.error("down arrow dropdown menu manage version is not clickable");
					sa.assertTrue(false, "down arrow dropdown menu manage version is not clickable");
				}
			}
			else {
				appLog.error("folder path "+cmnPath + " was not found in folder structure");
				sa.assertTrue(false, cmnPath + " was not found in folder structure");
			}
		}
		else {
			appLog.error("fund name "+M7FundName1+" was not found in funds page");
			sa.assertTrue(false, M7FundName1 + " was not found in funds page");
		}
		switchToDefaultContent(driver);
	}
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc029_ManageVersionCommonImpact() {
		// Institution
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileCommon);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileCommon);
	
	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//"+updatedFileName;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedInstitution(M7Institution1)) {
				appLog.info("Opened Institution : " + M7Institution1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"fundrasising workspace view");
				
				if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + cmnPath);

					String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
							excelLabel.UploadedFileCommon);

					if (filesName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified Institution : " + cmnPath);
					sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + cmnPath);
				}

			} else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}

		
			// Contact Tab
				
				switchToDefaultContent(driver);
				if (bp.clickOnTab(TabName.ContactTab)) {
					if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
						appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
						switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
								"fundraising workspace view");

						if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
								Workspace.FundraisingWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + cmnPath);

							String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
									excelLabel.UploadedFileCommon);

							if (filesName != null) {

								saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName,
										"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

								sa.combineAssertions(saa);

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified for Contact : " + cmnPath);
							sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + cmnPath);
						}

					} else {
						appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
						sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					}
				} else {
					appLog.error("Not able to Click Contact tab ");
					sa.assertTrue(false, "Not able to Click Contact tab ");
				}
				
		
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
}

@Test
	public void M7tc029_ManageVersionCommonImpactInvestor() {
	//Investor Side
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);

	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileCommon);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileCommon);

	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//"+updatedFileName;


	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);
				String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
						excelLabel.UploadedFileCommon);
				saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
				sa.combineAssertions(saa);
			} else {
				appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
				saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
			}

		} else {
			appLog.info("Not able to click on Potential Investment tab");
			saa.assertTrue(false, "Not able to click on Potential Investment tab");
		}
		lp.investorLogout();
		ThreadSleep(3000);
		sa.combineAssertions(saa);
		sa.assertAll();
	
	sa.assertAll();
}
@Test
	public void M7tc030_ManageVersionInternal_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileInternal);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileInternal);
	
	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//"+updatedFileName;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, fileName, Workspace.FundraisingWorkspace, 30, "Yes")) {
					//verify manage version ui
					//v3 version
					if (fp.verifyManageVersionUI(updatedFileName, System.getProperty("user.dir")+path, fileName,"V3", true,false,true,null)) {
						appLog.info("manage version ui 1st time is successfully verified");
					}
					else {
						appLog.error("manage version ui 1st time could not be verified");
						sa.assertTrue(false, "manage version ui 1st time could not be verified");
					}
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version pop up close button", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "fundraising workspace refresh button", action.SCROLLANDBOOLEAN)) {
							
						}
					}
					else {
						appLog.error("manage version popup close button is not clickable");
						sa.assertTrue(false, "manage version popup close button is not clickable");
					}
				}
				
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.FundraisingWorkspace, 30, "Yes")) {
					if (fp.verifyManageVersion2ndTime(updatedFileName, fileName, oldestFileName, "V4")) {
						appLog.info("manage version window is successfully verified 2nd time");
					}
					else {
						appLog.error("manage version window cannot be verified");
						sa.assertTrue(false, "manage version window cannot be verified");
					}
					//after verifying UI, clicking on refresh button
					if (click(driver, fp.getManageVersionRefresh(60), "manage version refresh button", action.SCROLLANDBOOLEAN)) {
						appLog.info("clicking on refresh button on manage version window");
					}
					
					//check make current functionality
					if (fp.verifyMakeCurrentFunctionalityManageVersion(updatedFileName, fileName,oldestFileName, "V5")) {
					appLog.info("make current functionality is successfully verified");
					}
					else {
					appLog.error("make current functionality cannot be verified");
					sa.assertTrue(false, "make current funcionality cannot be verified");
					}
					//closing manage version popup
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version close button", action.SCROLLANDBOOLEAN)) {
						appLog.info("close button on manage version close button");
					}
					else {
						appLog.error("manage version close button is not clickable");
						sa.assertTrue(false, "manage version close button is not clickable");
					}
					
					//verifying open file functionality on manage version popup
					if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.FundraisingWorkspace, 30, "Yes")) {
							if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.FundraisingWorkspace, fileName, true, true, false)) {
								appLog.info("download button and close button are successfully verified on manage version window");
							}
							else {
								appLog.error("download and close button could not be verified on manage version window");
								sa.assertTrue(false, "download and close button could not be verified on manage version window");
							}
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							scrollDownThroughWebelement(driver, fp.getManageVersionsPopUpCrossIcon(60) , "cross icon on manage version window");
							if (click(driver, fp.getManageVersionsPopUpCrossIcon(60), "manage version cross icon", action.SCROLLANDBOOLEAN)) {
								if (fp.getUploadIcon(Workspace.FundraisingWorkspace, 30)!=null) {
									appLog.info("manage version window is successfully closed");
									
								}
							}
							
					}
					else {
						appLog.error("manage version could not be found in down arrow dropdown list");
						sa.assertTrue(false, "manage version could not be found in down arrow dropdown list");
					}
				}
				else {
					appLog.error("down arrow dropdown menu manage version is not clickable");
					sa.assertTrue(false, "down arrow dropdown menu manage version is not clickable");
				}
			}
			else {
				appLog.error("folder path "+intPath + " was not found in folder structure");
				sa.assertTrue(false, intPath + " was not found in folder structure");
			}
		}
		else {
			appLog.error("fund name "+M7FundName1+" was not found in funds page");
			sa.assertTrue(false, M7FundName1 + " was not found in funds page");
		}
		switchToDefaultContent(driver);
	}
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc030_ManageVersionInternal_ImpactCRM() {
		// Institution
		
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileInternal);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileInternal);
	
	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//"+updatedFileName;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedInstitution(M7Institution1)) {
				appLog.info("Opened Institution : " + M7Institution1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"fundrasising workspace view");
				
				if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + intPath);

					String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
							excelLabel.UploadedFileInternal);

					if (filesName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified Institution : " + intPath);
					sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + intPath);
				}

			} else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
	
		
		switchToDefaultContent(driver);
		lp.CRMlogout();
		
	
	sa.assertAll();
}
@Test
	public void M7tc031_ManageVersionShared_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileShared);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileShared);
	
	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//"+updatedFileName;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, fileName, Workspace.FundraisingWorkspace, 30, "Yes")) {
					//verify manage version ui
					//v3 version
					if (fp.verifyManageVersionUI(updatedFileName, System.getProperty("user.dir")+path, fileName,"V3", true,false,true,null)) {
						appLog.info("manage version ui 1st time is successfully verified");
					}
					else {
						appLog.error("manage version ui 1st time could not be verified");
						sa.assertTrue(false, "manage version ui 1st time could not be verified");
					}
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version pop up close button", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "fundraising workspace refresh button", action.SCROLLANDBOOLEAN)) {
							
						}
					}
					else {
						appLog.error("manage version popup close button is not clickable");
						sa.assertTrue(false, "manage version popup close button is not clickable");
					}
				}
				
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.FundraisingWorkspace, 30, "Yes")) {
					if (fp.verifyManageVersion2ndTime(updatedFileName, fileName, oldestFileName, "V4")) {
						appLog.info("manage version window is successfully verified 2nd time");
					}
					else {
						appLog.error("manage version window cannot be verified");
						sa.assertTrue(false, "manage version window cannot be verified");
					}
					//after verifying UI, clicking on refresh button
					if (click(driver, fp.getManageVersionRefresh(60), "manage version refresh button", action.SCROLLANDBOOLEAN)) {
						appLog.info("clicking on refresh button on manage version window");
					}
					
					//check make current functionality
					if (fp.verifyMakeCurrentFunctionalityManageVersion(updatedFileName, fileName,oldestFileName, "V5")) {
					appLog.info("make current functionality is successfully verified");
					}
					else {
					appLog.error("make current functionality cannot be verified");
					sa.assertTrue(false, "make current funcionality cannot be verified");
					}
					//closing manage version popup
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version close button", action.SCROLLANDBOOLEAN)) {
						appLog.info("close button on manage version close button");
					}
					else {
						appLog.error("manage version close button is not clickable");
						sa.assertTrue(false, "manage version close button is not clickable");
					}
					
					//verifying open file functionality on manage version popup
					if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.FundraisingWorkspace, 30, "Yes")) {
							if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.FundraisingWorkspace, fileName, true, true, false)) {
								appLog.info("download button and close button are successfully verified on manage version window");
							}
							else {
								appLog.error("download and close button could not be verified on manage version window");
								sa.assertTrue(false, "download and close button could not be verified on manage version window");
							}
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							scrollDownThroughWebelement(driver, fp.getManageVersionsPopUpCrossIcon(60) , "cross icon on manage version window");
							if (click(driver, fp.getManageVersionsPopUpCrossIcon(60), "manage version cross icon", action.SCROLLANDBOOLEAN)) {
								if (fp.getUploadIcon(Workspace.FundraisingWorkspace, 30)!=null) {
									appLog.info("manage version window is successfully closed");
									
								}
							}
							
					}
					else {
						appLog.error("manage version could not be found in down arrow dropdown list");
						sa.assertTrue(false, "manage version could not be found in down arrow dropdown list");
					}
				}
				else {
					appLog.error("down arrow dropdown menu manage version is not clickable");
					sa.assertTrue(false, "down arrow dropdown menu manage version is not clickable");
				}
			}
			else {
				appLog.error("folder path "+shdPath + " was not found in folder structure");
				sa.assertTrue(false, shdPath + " was not found in folder structure");
			}
		}
		else {
			appLog.error("fund name "+M7FundName1+" was not found in funds page");
			sa.assertTrue(false, M7FundName1 + " was not found in funds page");
		}
		switchToDefaultContent(driver);
	}
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc031_ManageVersionShared_ImpactCRM() {
		// Institution
		
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileShared);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileShared);
	
	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//"+updatedFileName;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedInstitution(M7Institution1)) {
				appLog.info("Opened Institution : " + M7Institution1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"fundrasising workspace view");
				
				if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + shdPath);

					String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
							excelLabel.UploadedFileShared);

					if (filesName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified Institution : " + shdPath);
					sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + shdPath);
				}

			} else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}

		
			// Contact Tab
				
				switchToDefaultContent(driver);
				if (bp.clickOnTab(TabName.ContactTab)) {
					if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
						appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
						switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
								"fundraising workspace view");

						if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
								Workspace.FundraisingWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + shdPath);

							String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
									excelLabel.UploadedFileShared);

							if (filesName != null) {

								saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName,
										"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

								sa.combineAssertions(saa);

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified for Contact : " + shdPath);
							sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + shdPath);
						}

					} else {
						appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
						sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					}
				} else {
					appLog.error("Not able to Click Contact tab ");
					sa.assertTrue(false, "Not able to Click Contact tab ");
				}
				
		
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
}
@Test
	public void M7tc031_ManageVersionShared_ImpactInvestor() {
		//Investor Side
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileShared);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileShared);

	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//"+updatedFileName;

	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdPath);
			String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
					excelLabel.UploadedFileShared);
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);

	sa.assertAll();
}

@Test
	public void M7tc032_ManageVersionStandardSingleInst_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileStandard);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	
	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//";
	path = path + updatedFileName;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				int i =0;
				boolean flag=false;
				while(true) {
					List<WebElement> ele=fp.getColumnHeads();
					List<WebElement>listOfVisibleElements = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.FundsPage);
					for (int j = 0;j<listOfVisibleElements.size();j++) {
						String a = listOfVisibleElements.get(j).getText().trim();
						if (a.equalsIgnoreCase(fileName)) {
							appLog.info(fileName+" is available in the content grid");
							flag=true;
							break;
						}
						if(j==listOfVisibleElements.size()-1){
							appLog.error(fileName+"file is not present in the  content grid");
						}
					}
					if(flag){
						break;					
					}else {
						i++;
						if(i==2){
							appLog.error(fileName+" is not available in the content grid ");
							sa.assertTrue(false,fileName+" is not available in the content grid");
							break;
						}
					}
					click(driver, ele.get(0),"document name column head", action.SCROLLANDBOOLEAN);
				}
				
				
				if (flag == true) {
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, fileName, Workspace.FundraisingWorkspace, 30, "Yes")) {
					//verify manage version ui
					//v3 version
					if (fp.verifyManageVersionUI(updatedFileName, System.getProperty("user.dir")+path, fileName,"V3", true,false,true,null)) {
						appLog.info("manage version ui 1st time is successfully verified");
					}
					else {
						appLog.error("manage version ui 1st time could not be verified");
						sa.assertTrue(false, "manage version ui 1st time could not be verified");
					}
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version pop up close button", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "fundraising workspace refresh button", action.SCROLLANDBOOLEAN)) {
							
						}
					}
					else {
						appLog.error("manage version popup close button is not clickable");
						sa.assertTrue(false, "manage version popup close button is not clickable");
					}
				}
				}
				else {
					
				}
			
				
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.FundraisingWorkspace, 30, "Yes")) {
					if (fp.verifyManageVersion2ndTime(updatedFileName, fileName, oldestFileName, "V4")) {
						appLog.info("manage version window is successfully verified 2nd time");
					}
					else {
						appLog.error("manage version window cannot be verified");
						sa.assertTrue(false, "manage version window cannot be verified");
					}
					//after verifying UI, clicking on refresh button
					if (click(driver, fp.getManageVersionRefresh(60), "manage version refresh button", action.SCROLLANDBOOLEAN)) {
						appLog.info("clicking on refresh button on manage version window");
					}
					
					//check make current functionality
					if (fp.verifyMakeCurrentFunctionalityManageVersion(updatedFileName, fileName,oldestFileName, "V5")) {
					appLog.info("make current functionality is successfully verified");
					}
					else {
					appLog.error("make current functionality cannot be verified");
					sa.assertTrue(false, "make current funcionality cannot be verified");
					}
					//closing manage version popup
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version close button", action.SCROLLANDBOOLEAN)) {
						appLog.info("close button on manage version close button");
					}
					else {
						appLog.error("manage version close button is not clickable");
						sa.assertTrue(false, "manage version close button is not clickable");
					}
					
					//verifying open file functionality on manage version popup
					if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.FundraisingWorkspace, 30, "Yes")) {
							if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.FundraisingWorkspace, fileName, true, true, false)) {
								appLog.info("download button and close button are successfully verified on manage version window");
							}
							else {
								appLog.error("download and close button could not be verified on manage version window");
								sa.assertTrue(false, "download and close button could not be verified on manage version window");
							}
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							scrollDownThroughWebelement(driver, fp.getManageVersionsPopUpCrossIcon(60) , "cross icon on manage version window");
							if (click(driver, fp.getManageVersionsPopUpCrossIcon(60), "manage version cross icon", action.SCROLLANDBOOLEAN)) {
								if (fp.getUploadIcon(Workspace.FundraisingWorkspace, 30)!=null) {
									appLog.info("manage version window is successfully closed");
									
								}
							}
							
					}
					else {
						appLog.error("manage version could not be found in down arrow dropdown list");
						sa.assertTrue(false, "manage version could not be found in down arrow dropdown list");
					}
				}
				else {
					appLog.error("down arrow dropdown menu manage version is not clickable");
					sa.assertTrue(false, "down arrow dropdown menu manage version is not clickable");
				}
				
			}
			else {
				appLog.error("folder path "+stdPath + " was not found in folder structure");
				sa.assertTrue(false, stdPath + " was not found in folder structure");
			}
		}
		else {
			appLog.error("fund name "+M7FundName1+" was not found in funds page");
			sa.assertTrue(false, M7FundName1 + " was not found in funds page");
		}
		switchToDefaultContent(driver);
	}
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc032_ManageVersionStandardSingleInst_ImpactCRM() {
	
		// Institution
		
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileStandard);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	
	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//";
	path = path + updatedFileName;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedInstitution(M7Institution1)) {
				appLog.info("Opened Institution : " + M7Institution1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"fundrasising workspace view");
				
				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);

					String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
							excelLabel.UploadedFileStandard);

					if (filesName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}

		
			// Contact Tab
				
				switchToDefaultContent(driver);
				if (bp.clickOnTab(TabName.ContactTab)) {
					if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
						appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
						switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
								"fundraising workspace view");

						if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
								Workspace.FundraisingWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + stdPath);

							String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
									excelLabel.UploadedFileStandard);

							if (filesName != null) {
								HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPage(30, Workspace.FundraisingWorkspace), By.xpath("//div[@id='divFrWorkspace']//span[contains(@id,'myGridfundr-cell-0-')]//a/u"));
								if (set.contains(filesName)) {
									appLog.info(filesName+" was successfully found in "+PageName.ContactsPage.toString());
								}
								else {
									appLog.error(filesName+" was not found in "+PageName.ContactsPage.toString());
									sa.assertTrue(false, filesName+" was not found in "+PageName.ContactsPage.toString());
								}


							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
							sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
						}

					} else {
						appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
						sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					}
				} else {
					appLog.error("Not able to Click Contact tab ");
					sa.assertTrue(false, "Not able to Click Contact tab ");
				}
				
		
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
}
@Test
	public void M7tc032_ManageVersionStandardSingleInst_ImpactInvestor() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileStandard);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	
	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//";
	path = path + updatedFileName;
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, currentlyExecutingTC,
					excelLabel.UploadedFileStandard);
			
			
			if (fileName != null) {
				HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));
					
					if (set.contains(fileName)) {
						appLog.info(fileName+" was succesfully found in "+PageName.PotentialInvestmentPage.toString());
					}
					else {
						appLog.error(fileName+" was not found in "+PageName.PotentialInvestmentPage.toString());
						sa.assertTrue(false, fileName+" was not found in "+PageName.PotentialInvestmentPage.toString());
					}
					
				 
			}
			
			//saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			//sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	sa.combineAssertions(saa);
	ThreadSleep(3000);
	sa.assertAll();
}

@Test
	public void M7tc033_ManageVersionStandardMultInstitution_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	//upload_oi_mult1.pdf, upload_oi_mult2.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileStandard);
	String files[] = fileName.split(",");
	//upload_mv1.pdf, upload_mv2.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	String updatedFiles[] = updatedFileName.split(",");
	String path1 = "//UploadFiles//Module8//ManageVersion//";
	path1 = path1+updatedFiles[0];
	String path2 = "//UploadFiles//Module8//ManageVersion//";
	path2 = path2 + updatedFiles[1];
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, files[0], Workspace.FundraisingWorkspace, 30, "Yes")) {
					//verify manage version ui
					//v1 version
					if (fp.verifyManageVersionUI(updatedFiles[0], System.getProperty("user.dir")+path1, files[0],"V1", true, true, false,multiInstance.ThisInvestorOnly)) {
						appLog.info("manage version ui 1st time is successfully verified");
					}
					else {
						appLog.error("manage version ui 1st time could not be verified");
						sa.assertTrue(false, "manage version ui 1st time could not be verified");
					}
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version pop up close button", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "fundraising workspace refresh button", action.SCROLLANDBOOLEAN)) {
							
						}
					}
					else {
						appLog.error("manage version popup close button is not clickable");
						sa.assertTrue(false, "manage version popup close button is not clickable");
					}
				}
				
				//verify updatedFileName will be present in 1st inst, but not in 2nd inst
				if (bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace, updatedFiles[0])) {
					appLog.info(updatedFiles[0]+" is successfully found in "+M7Institution1+" standard folder");
				}
				if (fp.verifyFolderPathdummy(stdPath, M7Institution2, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 30)) {
					if (!bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace, updatedFiles[0])) {
						appLog.info(updatedFiles[0]+" is not found successfully in "+M7Institution2+" standard folder");
					}
				}
				if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 30)) {
					
				}
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions,files[1], Workspace.FundraisingWorkspace, 30, "Yes")) {
					//verify manage version ui
					//v1 version
					if (fp.verifyManageVersionUI(updatedFiles[1], System.getProperty("user.dir")+path2, files[1],"V1", true, true,false,multiInstance.AllInvestor)) {
						appLog.info("manage version ui is successfully verified");
					}
					else {
						appLog.error("manage version ui could not be verified");
						sa.assertTrue(false, "manage version ui could not be verified");
					}
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version pop up close button", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "fundraising workspace refresh button", action.SCROLLANDBOOLEAN)) {
							
						}
					}
					else {
						appLog.error("manage version popup close button is not clickable");
						sa.assertTrue(false, "manage version popup close button is not clickable");
					}
				
					//verify updatedFileName will be present in 1st inst and 2nd inst
					if (bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace, updatedFiles[1])) {
						appLog.info(updatedFiles[1]+" is successfully found in "+M7Institution1+" standard folder");
					}
					if (fp.verifyFolderPathdummy(stdPath, M7Institution2, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 30)) {
						if (bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace, updatedFiles[1])) {
							appLog.info(updatedFiles[1]+" is found successfully in "+M7Institution2+" standard folder");
						}
					}
					if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 30)) {
						
					}
					
					else {
						appLog.error("manage version could not be found in down arrow dropdown list");
						sa.assertTrue(false, "manage version could not be found in down arrow dropdown list");
					}
				}
				else {
					appLog.error("down arrow dropdown menu manage version is not clickable");
					sa.assertTrue(false, "down arrow dropdown menu manage version is not clickable");
				}
			}
			else {
				appLog.error("folder path "+stdPath + " was not found in folder structure");
				sa.assertTrue(false, stdPath + " was not found in folder structure");
			}
		}
		else {
			appLog.error("fund name "+M7FundName1+" was not found in funds page");
			sa.assertTrue(false, M7FundName1 + " was not found in funds page");
		}
		switchToDefaultContent(driver);
	}
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc033_ManageVersionStandardMultInstitution_ImpactCRM() {
	// Institution
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	//upload_oi_mult1.pdf, upload_oi_mult2.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileStandard);
	String files[] = fileName.split(",");
	//upload_mv1.pdf, upload_mv2.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	String updatedFiles[] = updatedFileName.split(",");
	String path1 = "//UploadFiles//Module8//ManageVersion//";
	path1 = path1+updatedFiles[0];
	String path2 = "//UploadFiles//Module8//ManageVersion//";
	path2 = path2 + updatedFiles[1];
	lp.CRMLogin(CRMUser1EmailID, adminPassword);


	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
				appLog.info("Opened Institution : " + M7Institution1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"fundrasising workspace view");
				
				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);

					if ((updatedFiles[0] != null)&&(updatedFiles[1]!=null)) {

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, updatedFiles[0],
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

						sa.combineAssertions(saa);
						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, updatedFiles[1],
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

						sa.combineAssertions(saa);


					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}

		// Institution 2
		switchToDefaultContent(driver);

				if (fp.clickOnTab(TabName.InstituitonsTab)) {
					if (ip.clickOnCreatedInstitution(M7Institution2)) {
						appLog.info("Opened Institution : " + M7Institution2);
						switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
								"fundrasising workspace view");
						
						if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
								Workspace.FundraisingWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + stdPath);

							if ((updatedFiles[1] != null)&&(files[0]!=null)) {
								saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, files[0],
										"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

								sa.combineAssertions(saa);
								saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, updatedFiles[1],
										"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

								sa.combineAssertions(saa);

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
							sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
						}

					} else {
						appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
						sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
					}
				} else {
					appLog.error("Not able to Click Institution tab ");
					sa.assertTrue(false, "Not able to Click Institution tab ");
				}

				
		
		
			// Contact Tab
				
				switchToDefaultContent(driver);
				if (bp.clickOnTab(TabName.ContactTab)) {
					if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
						appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
						switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
								"fundraising workspace view");

						if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
								Workspace.FundraisingWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + stdPath);

							if ((updatedFiles[0] != null)&&(updatedFiles[1]!=null)) {
								saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, updatedFiles[0],
										"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

								sa.combineAssertions(saa);
								saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, updatedFiles[1],
										"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

								sa.combineAssertions(saa);

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
							sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
						}

					} else {
						appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
						sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					}
				} else {
					appLog.error("Not able to Click Contact tab ");
					sa.assertTrue(false, "Not able to Click Contact tab ");
				}
				
		// Contact 2
		
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M7Contact2FirstName, M7Contact2LastName, null)) {
				appLog.info("Opened Contact  : " + M7Contact2FirstName+" "+M7Contact2LastName);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"fundraising workspace view");

				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
						Workspace.FundraisingWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);

					if ((files[0] != null)&&(updatedFiles[1]!=null)) {
						saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, files[0],
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

						sa.combineAssertions(saa);
						saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, updatedFiles[1],
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			}
		} else {
			appLog.error("Not able to Click Contact tab ");
			sa.assertTrue(false, "Not able to Click Contact tab ");
		}
		

		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
}
@Test
	public void M7tc033_ManageVersionStandardMultInstitution_ImpactInvestor() {
		//Investor Side
		
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	//upload_oi_mult1.pdf, upload_oi_mult2.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileStandard);
	String files[] = fileName.split(",");
	//upload_mv1.pdf, upload_mv2.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	String updatedFiles[] = updatedFileName.split(",");
	String path1 = "//UploadFiles//Module8//ManageVersion//";
	path1 = path1+updatedFiles[0];
	String path2 = "//UploadFiles//Module8//ManageVersion//";
	path2 = path2 + updatedFiles[1];


	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);

			if ((updatedFiles[0] != null)&&(updatedFiles[1]!=null)) {
				HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));

				if (set.contains(updatedFiles[0])) {
					appLog.info(updatedFiles[0]+" was succesfully found in "+PageName.PotentialInvestmentPage.toString());
				}
				else {
					appLog.error(updatedFiles[0]+" was not found in "+PageName.PotentialInvestmentPage.toString());
					sa.assertTrue(false, updatedFiles[0]+" was not found in "+PageName.PotentialInvestmentPage.toString());
				}
				if (set.contains(updatedFiles[1])) {
					appLog.info(updatedFiles[1]+" was succesfully found in "+PageName.PotentialInvestmentPage.toString());
				}
				else {
					appLog.error(updatedFiles[1]+" was not found in "+PageName.PotentialInvestmentPage.toString());
					sa.assertTrue(false, updatedFiles[1]+" was not found in "+PageName.PotentialInvestmentPage.toString());
				}

			}

		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);

	//Investor 2


	driver.close();
	config(browserToLaunch);
	lp = new LoginPageBusinessLayer(driver);
	fp = new FundsPageBusinessLayer(driver);
	ifp = new InvestorFirmPageBusinesslayer(driver);
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			if ((updatedFiles[0] != null)&&(updatedFiles[1]!=null)) {
				HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));

				if (set.contains(updatedFiles[0])) {
					appLog.info(updatedFiles[0]+" was succesfully found in "+PageName.PotentialInvestmentPage.toString());
				}
				else {
					appLog.error(updatedFiles[0]+" was not found in "+PageName.PotentialInvestmentPage.toString());
					sa.assertTrue(false, updatedFiles[0]+" was not found in "+PageName.PotentialInvestmentPage.toString());
				}
				if (set.contains(updatedFiles[1])) {
					appLog.info(updatedFiles[1]+" was succesfully found in "+PageName.PotentialInvestmentPage.toString());
				}
				else {
					appLog.error(updatedFiles[1]+" was not found in "+PageName.PotentialInvestmentPage.toString());
					sa.assertTrue(false, updatedFiles[1]+" was not found in "+PageName.PotentialInvestmentPage.toString());
				}

			}


		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);

	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc034_OpenFileAllFoldersFundsPage() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		
		
		String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
		String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
		String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
		
		String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
		;
		
		lp.CRMLogin(CRMUser1EmailID, adminPassword);

		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M7FundName1)) {

				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"Investor workspace view");
				if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
						Workspace.FundraisingWorkspace, 60)) {

					appLog.info(" Folder Structure Verified: " + cmnPath);
					
					appLog.info("Going To open File via DownArrow");
					if (fp.verifyFileOpenViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 30, "Yes")) {
						appLog.info("File Opened and Close Successfully " + filesName);	
					}else{
						appLog.error("Not able to Opened and Close Successfully " + filesName);
						sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
					}
					
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
					
					appLog.info("Going To open File via Direct Click");
					if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, true,
							true,true)) {
						appLog.info("Successfully download file : " + filesName);
					} else {
						appLog.error("Not able to download file : " + filesName);
						sa.assertTrue(false, "Not able to download file : " + filesName);
					}
				
				
				} else {
					appLog.error(" Folder Structure Not Verified  : " + cmnPath);
					sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
				}
				
				
				// Internal
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
						Workspace.FundraisingWorkspace, 60)) {

					appLog.info(" Folder Structure Verified: " + intPath);

					appLog.info("Going To open File via DownArrow");
					if (fp.verifyFileOpenViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 30, "Yes")) {
						appLog.info("File Opened and Close Successfully " + filesName);	
					}else{
						appLog.error("Not able to Opened and Close Successfully " + filesName);
						sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
					}
					
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
					
					appLog.info("Going To open File via Direct Click");
					if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, true,
							true,true)) {
						appLog.info("Successfully download file : " + filesName);
					} else {
						appLog.error("Not able to download file : " + filesName);
						sa.assertTrue(false, "Not able to download file : " + filesName);
					}
				
				
				} else {
					appLog.error(" Folder Structure Not Verified  : " + intPath);
					sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
				}
				
				
				// Shared
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
						Workspace.FundraisingWorkspace, 60)) {

					appLog.info(" Folder Structure Verified: " + shdPath);

					appLog.info("Going To open File via DownArrow");
					if (fp.verifyFileOpenViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 30, "Yes")) {
						appLog.info("File Opened and Close Successfully " + filesName);	
					}else{
						appLog.error("Not able to Opened and Close Successfully " + filesName);
						sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
					}
					
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
					
					appLog.info("Going To open File via Direct Click");
					if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, true,
							true,true)) {
						appLog.info("Successfully download file : " + filesName);
					} else {
						appLog.error("Not able to download file : " + filesName);
						sa.assertTrue(false, "Not able to download file : " + filesName);
					}
				
				
				} else {
					appLog.error(" Folder Structure Not Verified  : " + shdPath);
					sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
				}
				
				
				// Standard
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage,
						Workspace.FundraisingWorkspace, 60)) {

					appLog.info(" Folder Structure Verified: " + stdPath);

					appLog.info("Going To open File via DownArrow");
					if (fp.verifyFileOpenViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 30, "Yes")) {
						appLog.info("File Opened and Close Successfully " + filesName);	
					}else{
						appLog.error("Not able to Opened and Close Successfully " + filesName);
						sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
					}
					
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
					
					appLog.info("Going To open File via Direct Click");
					if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, true,
							true,true)) {
						appLog.info("Successfully download file : " + filesName);
					} else {
						appLog.error("Not able to download file : " + filesName);
						sa.assertTrue(false, "Not able to download file : " + filesName);
					}
				
				
				} else {
					appLog.error(" Folder Structure Not Verified  : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
				}

			} else {
				appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
				sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			}
		} else {
			appLog.info("Not Able to Click Funds Tab");
			sa.assertTrue(false, "Not Able to Click Funds Tab");
		}

		switchToDefaultContent(driver);

		lp.CRMlogout();
		ThreadSleep(3000);
		sa.assertAll();

	
}
@Test
	public void M7tc035_OpenFileInAllFoldersInstitutionPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);

			switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, ip.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				
				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 30, "Yes")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);
				
				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 30, "Yes")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 30, "Yes")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 30, "Yes")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		}else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}

	switchToDefaultContent(driver);

	lp.CRMlogout();
	
	sa.assertAll();

}
@Test
	public void M7tc036_OpenFileInAllFoldersContactPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
			
			switchToFrame(driver, 30, cp.getFrame(PageName.ContactsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				
				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, 30, "no")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, cp.getFrame(PageName.ContactsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
		
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, 30, "no")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, cp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				appLog.info("Going To open File via DownArrow");
				
				scrollDownThroughWebelement(driver, cp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"Investor workspace view");
				
				appLog.info("Going To open File via Direct Click");
				boolean flag = false;
				int i = 0;
				while(true) {
					List<WebElement> ele=cp.getColumnHeads(PageName.FundsPage, Workspace.FundraisingWorkspace);
					List<WebElement>listOfVisibleElements = fp.getContentGridDocNameList(Workspace.FundraisingWorkspace, PageName.ContactsPage);
					for (int j = 0;j<listOfVisibleElements.size();j++) {
						String a = listOfVisibleElements.get(j).getText().trim();
						if (a.equalsIgnoreCase(filesName)) {
							appLog.info(filesName+" is available in the content grid");
							
							flag=true;
							break;
						}
						if(j==listOfVisibleElements.size()-1){
							appLog.error(filesName+"file is not present in the content grid for "+i+" th iteration");
						}
					}
					if(flag){
						break;					
					}else {
						i++;
						if(i==3){
							appLog.error(filesName+" is not available in the content grid ");
							sa.assertTrue(false,filesName+" is not available in the content grid");
							break;
						}
					}
					click(driver, ele.get(0),"document name column head", action.SCROLLANDBOOLEAN);
				}
				
				
				if (flag ==true) {
					if (bp.verifyDownloadFunctionality(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, true,
							true,true)) {
						appLog.info("Successfully download file : " + filesName);
					} else {
						appLog.error("Not able to download file : " + filesName);
						sa.assertTrue(false, "Not able to download file : " + filesName);
					}
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					
					if (fp.verifyFileOpenViaDownArrow(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, 30, "no")) {
						appLog.info("File Opened and Close Successfully " + filesName);	
					}else{
						appLog.error("Not able to Opened and Close Successfully " + filesName);
						sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
					}
				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
		}
	} else {
		appLog.error("Not able to Click Contact tab ");
		sa.assertTrue(false, "Not able to Click Contact tab ");
	}

	switchToDefaultContent(driver);

	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}
@Test
	public void M7tc037_OpenFileInAllFoldersInvestorPortal() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
	//shared
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdPath);
			
			appLog.info("Going To open File via Direct Click");
			if (bp.verifyDownloadFunctionality(PageName.PotentialInvestmentPage, Workspace.FundraisingWorkspace, filesName, true,
					true,true)) {
				appLog.info("Successfully download file : " + filesName);
			} else {
				appLog.error("Not able to download file : " + filesName);
				sa.assertTrue(false, "Not able to download file : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdPath);
		}
		
		switchToDefaultContent(driver);
		
		//common
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			appLog.info("Going To open File via Direct Click");
			if (bp.verifyDownloadFunctionality(PageName.PotentialInvestmentPage, Workspace.FundraisingWorkspace, filesName, true,
					true,true)) {
				appLog.info("Successfully download file : " + filesName);
			} else {
				appLog.error("Not able to download file : " + filesName);
				sa.assertTrue(false, "Not able to download file : " + filesName);
			}				
							
							
			
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}
		//standard
		switchToDefaultContent(driver);
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			
			boolean flag = false;
			int i = 0;
			while(true) {
				List<WebElement> ele=ifp.getColumnHeadsInvestor();
				List<WebElement>listOfVisibleElements = ifp.getDocListonInvestmentTab();
				for (int j = 0;j<listOfVisibleElements.size();j++) {
					String a = listOfVisibleElements.get(j).getText().trim();
					if (a.equalsIgnoreCase(filesName)) {
						appLog.info(filesName+" is available in the content grid");
						
						flag=true;
						break;
					}
					if(j==listOfVisibleElements.size()-1){
						appLog.error(filesName+"file is not present in the content grid for "+i+" th iteration");
					}
				}
				if(flag){
					break;					
				}else {
					i++;
					if(i==3){
						appLog.error(filesName+" is not available in the content grid ");
						sa.assertTrue(false,filesName+" is not available in the content grid");
						break;
					}
				}
				click(driver, ele.get(0),"document name column head", action.SCROLLANDBOOLEAN);
			}
			
			if (flag == true) {
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.PotentialInvestmentPage, Workspace.FundraisingWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}

			}
		}
		else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on PotentialInvestment tab");
		sa.assertTrue(false, "Not able to click on PotentialInvestment tab");
	}


	switchToDefaultContent(driver);

	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();

}
@Test
	public void M7tc038_DeleteFilesFromAllFolder_FundsPageNegativeCase() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
				
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
				
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);

				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
				
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);

				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
				
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}	
@Test
	public void M7tc039_1_DeleteFilesFromAllFolderAction_FundsPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
				
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
				
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);

				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
				
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);

				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
				
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc039_2_DeleteFilesFromAllFolderImpact_FundsPage() {
	// Institution
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);

			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");
			//Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				
				if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName)){
				
					appLog.error("File has not been deleted and is present: "+filesName);
					sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
				} else {
					appLog.info("File has been deleted and not Present : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);
				
				if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName)){
					
					appLog.error("File has not been deleted and is present: "+filesName);
					sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
				} else {
					appLog.info("File has been deleted and not Present : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		}else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
	
	
	// Contact
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
			
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				

				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
		
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
		}
	} else {
		appLog.error("Not able to Click Contact tab ");
		sa.assertTrue(false, "Not able to Click Contact tab ");
	}
	
	

	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc039_3_DeleteFilesFromAllFolderImpactInvestor_FundsPage() {
	
	//  Investor
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);;
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
	
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdPath);
			
			if (bp.verifyFileinContentGrid(PageName.PotentialInvestmentPage, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdPath);
		}
		
		switchToDefaultContent(driver);
		
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if (bp.verifyFileinContentGrid(PageName.PotentialInvestmentPage, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}
		
		switchToDefaultContent(driver);
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			
			
			if (bp.verifyFileinContentGrid(PageName.PotentialInvestmentPage, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on PotentialInvestmentPage tab");
		sa.assertTrue(false, "Not able to click on PotentialInvestmentPage tab");
	}


	switchToDefaultContent(driver);
	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();

}
@Test
	public void M7tc040_DeleteFilesFromAllFolder_InstitutionPageNegativeCase() {

	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);

			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");
			//Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		}else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
		
		switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

	
}
@Test
	public void M7tc041_1_DeleteFilesFromAllFolderAction_InstitutionPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	

	// Institution
	
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);

			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");
			//Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		}else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
	
	// Funds Page
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc041_2_DeleteFilesFromAllFolderImpact_InstitutionPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);				
	
	
	if (bp.clickOnTab(TabName.FundsTab)) {
	if (fp.clickOnCreatedFund(M7FundName1)) {

		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
				"Investor workspace view");
		if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.FundraisingWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		} else {
			appLog.error(" Folder Structure Not Verified  : " + cmnPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
		}
		
		
		// Internal
		
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.FundraisingWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + intPath);
			
			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + intPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
		}
		
		
		// Shared
		
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.FundraisingWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + shdPath);

			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + shdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
		}
		
		
		// Standard
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage,
				Workspace.FundraisingWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + stdPath);

			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + stdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
		}

	} else {
		appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
		sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
	}
} else {
	appLog.info("Not Able to Click Funds Tab");
	sa.assertTrue(false, "Not Able to Click Funds Tab");
}
	
	
	// Contact
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
			
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				

				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
		
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
		}
	} else {
		appLog.error("Not able to Click Contact tab ");
		sa.assertTrue(false, "Not able to Click Contact tab ");
	}
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc041_3_DeleteFilesFromAllFolderImpact_InstitutionPage() {
					
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);;
	
	//  Investor
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
	
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdPath);
			
			if (bp.verifyFileinContentGrid(PageName.PotentialInvestmentPage, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdPath);
		}
		
		switchToDefaultContent(driver);
		
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if (bp.verifyFileinContentGrid(PageName.PotentialInvestmentPage, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}
		
		switchToDefaultContent(driver);
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			
			
			if (bp.verifyFileinContentGrid(PageName.PotentialInvestmentPage, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}


	switchToDefaultContent(driver);
	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();

}
@Test
				
	public void M7tc042_DeleteFilesFromAllFolder_ContactPageNegativeCase() {

	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	
	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
			
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");
			
			// Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				

				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
		
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
		}
	} else {
		appLog.error("Not able to Click Contact tab ");
		sa.assertTrue(false, "Not able to Click Contact tab ");
	}
	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();
}
	@Test
	public void M7tc043_1_DeleteFilesFromAllFolderAction_ContactPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);


	// Contact
	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);

			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");

			// Common Path

			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);

				if (fp.verifyDeleteViaDownArrow(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			// Shared

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);

				if (fp.verifyDeleteViaDownArrow(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}


			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);

				if (fp.verifyDeleteViaDownArrow(PageName.ContactsPage, Workspace.FundraisingWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}


			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
		}
	} else {
		appLog.error("Not able to Click Contact tab ");
		sa.assertTrue(false, "Not able to Click Contact tab ");
	}


	switchToDefaultContent(driver);
	//deleting file from internal folder, because not accessible from contacts page
	appLog.info("deleting file from internal folder, because not accessible from contacts page");
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30), "fundraising workspace section");
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 30)) {
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Delete, filesName, Workspace.FundraisingWorkspace, 30, null)) {
					if (click(driver, fp.getDeleteFileYesButtonContentGrid(Workspace.FundraisingWorkspace, 60), "delete yes button", action.BOOLEAN)) {
						appLog.info("file "+filesName+" has been deleted");
						
					}
					else {
						appLog.error("delete yes button is not clickable");
						sa.assertTrue(false, "delete yes button is not clickable");
					}
				}
				else {
					appLog.error("delete button not found in down arrow menu");
					sa.assertTrue(false, "delete button not found in down arrow menu");
				}
			}
			else {
				appLog.error("could not find "+intPath+" in folder structure");
				sa.assertTrue(false, "could not find "+intPath+" in folder structure");
			}
		}
		else {
			appLog.error("fund "+M7FundName1+" could not be found on funds page");
			sa.assertTrue(false, "fund "+M7FundName1+" could not be found on funds page");
		}
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc043_2_DeleteFilesFromAllFolderImpact_ContactPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	
	if (bp.clickOnTab(TabName.FundsTab)) {
	if (fp.clickOnCreatedFund(M7FundName1)) {

		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
				"Investor workspace view");
		if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.FundraisingWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		} else {
			appLog.error(" Folder Structure Not Verified  : " + cmnPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
		}
		
		
		
		// Shared
		
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.FundraisingWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + shdPath);

			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + shdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
		}
		
		
		// Standard
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage,
				Workspace.FundraisingWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + stdPath);

			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + stdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
		}

	} else {
		appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
		sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
	}
} else {
	appLog.info("Not Able to Click Funds Tab");
	sa.assertTrue(false, "Not Able to Click Funds Tab");
}
	
	// Institution
	
			switchToDefaultContent(driver);
			if (fp.clickOnTab(TabName.InstituitonsTab)) {
				if (ip.clickOnCreatedInstitution(M7Institution1)) {
					appLog.info("Opened Institution : " + M7Institution1);

					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
							"Investor workspace view");
					//Common
					
					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.FundraisingWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + cmnPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName)){
						
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
					}
					
					
					
					
					// Shared
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.FundraisingWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + shdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
					}
					
					
					// Standard
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.FundraisingWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + stdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.FundraisingWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
					}

				}else {
						appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
						sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
					}
				} else {
					appLog.error("Not able to Click Institution tab ");
					sa.assertTrue(false, "Not able to Click Institution tab ");
				}
	

	

	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc043_3_DeleteFilesFromAllFolderImpact_ContactPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	ThreadSleep(3000);
	
	
	//  Investor
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
	
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdPath);
			
			if (bp.verifyFileinContentGrid(PageName.PotentialInvestmentPage, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdPath);
		}
		
		switchToDefaultContent(driver);
		
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if (bp.verifyFileinContentGrid(PageName.PotentialInvestmentPage, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}
		
		switchToDefaultContent(driver);
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			
			
			if (bp.verifyFileinContentGrid(PageName.PotentialInvestmentPage, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}


	switchToDefaultContent(driver);
	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();

}
@Test
	public void M7tc044_SearchingInFundsPageForPresentAndAbsentFiles() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	SoftAssert saa = new SoftAssert();
	SoftAssert sa = new SoftAssert();
	String msg;

	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);

	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	;
	WebElement ele;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	String alertMessage;

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");

			// 1st

			ele = bp.getSearchIcon(driver, PageName.FundsPage, Workspace.FundraisingWorkspace, 30);
			if (ele != null) {

				if (click(driver, ele, "Search Icon", action.SCROLLANDBOOLEAN)) {

					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutSelectingAFolder)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Click Search Icon ");
					sa.assertTrue(false, " Not Able to Click Search Icon ");
				}
			} else {
				appLog.error(" Search Icon Element is Null ");
				sa.assertTrue(false, " Search Icon Element is Null ");
			}

			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);

				// 2nd

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace,
						filesName[0], 30)) {

					saa = bp.verifySearchUI(cmnPath, 30, PageName.FundsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, cmnPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 2a
					if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN)) {

						if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage,
								Workspace.FundraisingWorkspace, filesName[0], 30)) {

							if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
									"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

								ele = bp.getNoDataToDisplaySearchPopMsg(30);
								if (ele != null) {
									msg = ele.getText().trim();
									if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
										appLog.info("  Msg Verified : " + msg);
									} else {
										appLog.error("  Msg Not Verified : Actual - " + msg);
										sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
									}
								} else {
									appLog.error(" No Data Display Msg Element is Null ");
									sa.assertTrue(false, " No Data Display Msg Element is Null ");
								}

								// 2b

								if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

									if (bp.verifyDownloadFunctionality(PageName.FundsPage,
											Workspace.FundraisingWorkspace, filesName[0], true, true, false)) {
										appLog.info("Verify UI of Opened File : " + filesName[0]);
									} else {
										appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
										sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
									}

									switchToDefaultContent(driver);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));

									// 3RD
									if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
											action.BOOLEAN)) {

										String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;
										saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
										sa.combineAssertions(saa);
									} else {
										appLog.error(" Not Able to Click All Folder Radio Button  ");
										sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
									}

									if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
											action.SCROLLANDBOOLEAN)) {

									} else {
										appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
										sa.assertTrue(false,
												" Not Able to CLick Search Pop Search Text Cross Icon");
									}

								} else {
									appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
									sa.assertTrue(false,
											" Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

								}

							} else {
								appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
								sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
							}

						} else {
							appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
							sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");
						}

					} else {
						appLog.error(" Not Able to Click Search Cross Icon ");
						sa.assertTrue(false, " Not Able to Click Search Cross Icon ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));

				// 4

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace,
						" ", 30)) {
					ThreadSleep(5000);
					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutEnteringValue)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				// 5
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"Investor workspace view");
				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace,
						filesName[1], 30)) {

					ThreadSleep(5000);

					ele = bp.getNoDataToDisplaySearchPopMsg1(30);
					if (ele != null) {
						msg = ele.getText().trim();
						if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
							appLog.info("  Msg Verified : " + msg);
						} else {
							appLog.error("  Msg Not Verified : Actual - " + msg);
							sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
						}
					} else {
						appLog.error(" No Data Display Msg Element is Null ");
						sa.assertTrue(false, " No Data Display Msg Element is Null ");
					}

					saa = bp.verifySearchUI(cmnPath, 30, PageName.FundsPage);
					sa.combineAssertions(saa);

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);

			}

			// Internal

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace,
						filesName[0], 30)) {

					// 6

					saa = bp.verifySearchUI(intPath, 30, PageName.FundsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, intPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 6a -- add code for Sorting

					saa = bp.performSortingCheckOnSearchPopUpForAllColumns(false,false);
					sa.combineAssertions(saa);

					if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
							"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

						if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

							// 6b -- add Code for Sorting  No Sorting
							/*	saa = bp.performSortingCheckOnSearchPopUpForAllColumns(true,false);
								sa.combineAssertions(saa);*/

							//  folder path Sorting
							saa = bp.performSortingCheckOnSearchPopUpForAllColumns(false,true);
							sa.combineAssertions(saa);

							if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
									action.BOOLEAN)) {


								String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

								// 7

								saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
								sa.combineAssertions(saa);


								// 6b -- No  Sorting
								saa = bp.performSortingCheckOnSearchPopUpForAllColumns(true,false);
								sa.combineAssertions(saa);

							} else {
								appLog.error(" Not Able to Click All Folder Radio Button  ");
								sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
							}

							// 5

							if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
									action.SCROLLANDBOOLEAN)) {

								if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage,
										Workspace.FundraisingWorkspace, filesName[1], 30)) {

									ThreadSleep(5000);

									ele = bp.getNoDataToDisplaySearchPopMsg1(30);
									if (ele != null) {
										msg = ele.getText().trim();
										if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
											appLog.info("  Msg Verified : " + msg);
										} else {
											appLog.error("  Msg Not Verified : Actual - " + msg);
											sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
										}
									} else {
										appLog.error(" No Data Display Msg Element is Null ");
										sa.assertTrue(false, " No Data Display Msg Element is Null ");
									}

									saa = bp.verifySearchUI(intPath, 30, PageName.FundsPage);
									sa.combineAssertions(saa);

									click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
											action.SCROLLANDBOOLEAN);

								} else {
									appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
									sa.assertTrue(false,
											" Not Able to Enter Value/ Not Able to click Search Icon ");

								}

							} else {
								appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
								sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
							}

						} else {
							appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
							sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

						}

					} else {
						appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
						sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}

			// Shared

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace,
						filesName[0], 30)) {

					// 9

					saa = bp.verifySearchUI(shdPath, 30, PageName.FundsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, shdPath, filesName[0], date);
					sa.combineAssertions(saa);

					if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

						String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

						// 10

						saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
						sa.combineAssertions(saa);
					} else {
						appLog.error(" Not Able to Click All Folder Radio Button  ");
						sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
					}

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}

			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1,
					PageName.FundsPage, Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage, Workspace.FundraisingWorkspace,
						filesName[0], 30)) {

					// 11

					saa = bp.verifySearchUI(stdPath, 30, PageName.FundsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, stdPath, filesName[0], date);
					sa.combineAssertions(saa);

					if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

						String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

						// 12

						saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
						sa.combineAssertions(saa);

						// 13

						if (bp.verifyDownloadFunctionality(PageName.FundsPage,
								Workspace.FundraisingWorkspace, filesName[0], true, true, false)) {
							appLog.info("Verify UI of Opened File : " + filesName[0]);
						} else {
							appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
							sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
						}

						switchToDefaultContent(driver);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));

					} else {
						appLog.error(" Not Able to Click All Folder Radio Button  ");
						sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
					}

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();



}	
@Test
	public void M7tc045_SearchingInInstPageForPresentAndAbsentFiles() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	SoftAssert saa = new SoftAssert();
	String msg;

	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);

	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	;
	WebElement ele;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	String alertMessage;

	if (bp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {

			switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");

			// 1st

			ele = bp.getSearchIcon(driver, PageName.InstitutionsPage, Workspace.FundraisingWorkspace, 30);
			if (ele != null) {

				if (click(driver, ele, "Search Icon", action.SCROLLANDBOOLEAN)) {

					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutSelectingAFolder)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Click Search Icon ");
					sa.assertTrue(false, " Not Able to Click Search Icon ");
				}
			} else {
				appLog.error(" Search Icon Element is Null ");
				sa.assertTrue(false, " Search Icon Element is Null ");
			}



			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);

				// 1st

				// 2nd

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.FundraisingWorkspace,
						filesName[0], 30)) {

					saa = bp.verifySearchUI(cmnPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, cmnPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 2a
					if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN)) {

						if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage,
								Workspace.FundraisingWorkspace, filesName[0], 30)) {

							if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
									"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

								ele = bp.getNoDataToDisplaySearchPopMsg(30);
								if (ele != null) {
									msg = ele.getText().trim();
									if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
										appLog.info("  Msg Verified : " + msg);
									} else {
										appLog.error("  Msg Not Verified : Actual - " + msg);
										sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
									}
								} else {
									appLog.error(" No Data Display Msg Element is Null ");
									sa.assertTrue(false, " No Data Display Msg Element is Null ");
								}

								// 2b

								if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

									if (bp.verifyDownloadFunctionality(PageName.InstitutionsPage,
											Workspace.FundraisingWorkspace, filesName[0], true, true, false)) {
										appLog.info("Verify UI of Opened File : " + filesName[0]);
									} else {
										appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
										sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
									}

									switchToDefaultContent(driver);
									switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));

									/*	// 3RD
									if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
											action.BOOLEAN)) {

										String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;
										saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
										sa.combineAssertions(saa);
									} else {
										appLog.error(" Not Able to Click All Folder Radio Button  ");
										sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
									}*/

									if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
											action.SCROLLANDBOOLEAN)) {

									} else {
										appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
										sa.assertTrue(false,
												" Not Able to CLick Search Pop Search Text Cross Icon");
									}

								} else {
									appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
									sa.assertTrue(false,
											" Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

								}

							} else {
								appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
								sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
							}

						} else {
							appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
							sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");
						}

					} else {
						appLog.error(" Not Able to Click Search Cross Icon ");
						sa.assertTrue(false, " Not Able to Click Search Cross Icon ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));

				// 4

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.FundraisingWorkspace,
						" ", 30)) {
					ThreadSleep(5000);
					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutEnteringValue)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				// 5
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"Investor workspace view");
				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.FundraisingWorkspace,
						filesName[1], 30)) {

					ThreadSleep(5000);

					ele = bp.getNoDataToDisplaySearchPopMsg1(30);
					if (ele != null) {
						msg = ele.getText().trim();
						if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
							appLog.info("  Msg Verified : " + msg);
						} else {
							appLog.error("  Msg Not Verified : Actual - " + msg);
							sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
						}
					} else {
						appLog.error(" No Data Display Msg Element is Null ");
						sa.assertTrue(false, " No Data Display Msg Element is Null ");
					}

					saa = bp.verifySearchUI(cmnPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 20));

			// Internal

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.FundraisingWorkspace,
						filesName[0], 30)) {

					// 6

					saa = bp.verifySearchUI(intPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, intPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 6a -- add code for Sorting

					if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
							"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

						if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

							// 6b -- add Code for Sorting
							saa = bp.performSortingCheckOnSearchPopUpForAllColumns(false,true);
							sa.combineAssertions(saa);

							/*	if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
									action.BOOLEAN)) {

								// 6b -- add Code for Sorting

								String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

								// 7

								saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
								sa.combineAssertions(saa);
							} else {
								appLog.error(" Not Able to Click All Folder Radio Button  ");
								sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
							}*/

							// 5

							if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
									action.SCROLLANDBOOLEAN)) {

								if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage,
										Workspace.FundraisingWorkspace, filesName[1], 30)) {

									ThreadSleep(5000);

									ele = bp.getNoDataToDisplaySearchPopMsg1(30);
									if (ele != null) {
										msg = ele.getText().trim();
										if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
											appLog.info("  Msg Verified : " + msg);
										} else {
											appLog.error("  Msg Not Verified : Actual - " + msg);
											sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
										}
									} else {
										appLog.error(" No Data Display Msg Element is Null ");
										sa.assertTrue(false, " No Data Display Msg Element is Null ");
									}

									saa = bp.verifySearchUI(intPath, 30, PageName.InstitutionsPage);
									sa.combineAssertions(saa);

									click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
											action.SCROLLANDBOOLEAN);

								} else {
									appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
									sa.assertTrue(false,
											" Not Able to Enter Value/ Not Able to click Search Icon ");

								}

							} else {
								appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
								sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
							}

						} else {
							appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
							sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

						}

					} else {
						appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
						sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}

			// Shared

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.FundraisingWorkspace,
						filesName[0], 30)) {

					// 9

					saa = bp.verifySearchUI(shdPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, shdPath, filesName[0], date);
					sa.combineAssertions(saa);

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}

			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1,
					PageName.InstitutionsPage, Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.FundraisingWorkspace,
						filesName[0], 30)) {

					// 11

					saa = bp.verifySearchUI(stdPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, stdPath, filesName[0], date);
					sa.combineAssertions(saa);

			
					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Institution or Institution Not Available : " + M7Institution1);
			sa.assertTrue(false, "Not Able to Click Institution or Institution Not Available : " + M7Institution1);
		}
	} else {
		appLog.info("Not Able to Click Institution Tab");
		sa.assertTrue(false, "Not Able to Click Institution Tab");
	}

	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();


}	
	
	@Test
	public void M7tc046_SearchingInContactPageForPresentAndAbsentFiles() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	SoftAssert saa = new SoftAssert();
	String msg;

	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);

	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	;
	WebElement ele;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	String alertMessage;

	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
			switchToFrame(driver, 30, ip.getFrame(PageName.ContactsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"Investor workspace view");

			// 1st

			ele = bp.getSearchIcon(driver, PageName.ContactsPage, Workspace.FundraisingWorkspace, 30);
			if (ele != null) {

				if (click(driver, ele, "Search Icon", action.SCROLLANDBOOLEAN)) {

					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutSelectingAFolder)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Click Search Icon ");
					sa.assertTrue(false, " Not Able to Click Search Icon ");
				}
			} else {
				appLog.error(" Search Icon Element is Null ");
				sa.assertTrue(false, " Search Icon Element is Null ");
			}



			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);

				// 1st

				// 2nd

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.ContactsPage, Workspace.FundraisingWorkspace,
						filesName[0], 30)) {

					saa = bp.verifySearchUI(cmnPath, 30, PageName.ContactsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, cmnPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 2a
					if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN)) {

						if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.ContactsPage,
								Workspace.FundraisingWorkspace, filesName[0], 30)) {

							if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
									"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

								ele = bp.getNoDataToDisplaySearchPopMsg(30);
								if (ele != null) {
									msg = ele.getText().trim();
									if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
										appLog.info("  Msg Verified : " + msg);
									} else {
										appLog.error("  Msg Not Verified : Actual - " + msg);
										sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
									}
								} else {
									appLog.error(" No Data Display Msg Element is Null ");
									sa.assertTrue(false, " No Data Display Msg Element is Null ");
								}

								// 2b

								if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

									if (bp.verifyDownloadFunctionality(PageName.ContactsPage,
											Workspace.FundraisingWorkspace, filesName[0], true, true, false)) {
										appLog.info("Verify UI of Opened File : " + filesName[0]);
									} else {
										appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
										sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
									}

									switchToDefaultContent(driver);
									switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));


									if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
											action.SCROLLANDBOOLEAN)) {

									} else {
										appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
										sa.assertTrue(false,
												" Not Able to CLick Search Pop Search Text Cross Icon");
									}

								} else {
									appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
									sa.assertTrue(false,
											" Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

								}

							} else {
								appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
								sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
							}

						} else {
							appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
							sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");
						}

					} else {
						appLog.error(" Not Able to Click Search Cross Icon ");
						sa.assertTrue(false, " Not Able to Click Search Cross Icon ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));

				// 4

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.ContactsPage, Workspace.FundraisingWorkspace,
						" ", 30)) {
					ThreadSleep(5000);
					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutEnteringValue)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				// 5
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
						"Investor workspace view");
				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.ContactsPage, Workspace.FundraisingWorkspace,
						filesName[1], 30)) {

					ThreadSleep(5000);

					ele = bp.getNoDataToDisplaySearchPopMsg1(30);
					if (ele != null) {
						msg = ele.getText().trim();
						if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
							appLog.info("  Msg Verified : " + msg);
						} else {
							appLog.error("  Msg Not Verified : Actual - " + msg);
							sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
						}
					} else {
						appLog.error(" No Data Display Msg Element is Null ");
						sa.assertTrue(false, " No Data Display Msg Element is Null ");
					}

					saa = bp.verifySearchUI(cmnPath, 30, PageName.ContactsPage);
					sa.combineAssertions(saa);

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, ip.getFrame(PageName.ContactsPage, 20));

			// Shared

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.ContactsPage, Workspace.FundraisingWorkspace,
						filesName[0], 30)) {

					// 9

					saa = bp.verifySearchUI(shdPath, 30, PageName.ContactsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, shdPath, filesName[0], date);
					sa.combineAssertions(saa);

					/*	if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

						String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

						// 10

						saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
						sa.combineAssertions(saa);
					} else {
						appLog.error(" Not Able to Click All Folder Radio Button  ");
						sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
					}*/

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				}
				appLog.info("starting akul's part");
				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.ContactsPage, Workspace.FundraisingWorkspace,
						filesName[0], 30)) {


					saa = bp.performSortingCheckOnSearchPopUpForAllColumns(false,true);
					sa.combineAssertions(saa);
					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}

			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1,
					PageName.ContactsPage, Workspace.FundraisingWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.ContactsPage, Workspace.FundraisingWorkspace,
						filesName[0], 30)) {

					// 11

					saa = bp.verifySearchUI(stdPath, 30, PageName.ContactsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, stdPath, filesName[0], date);
					sa.combineAssertions(saa);

					/*	if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

						String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

						// 12

						saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
						sa.combineAssertions(saa);

						// 13

						if (bp.verifyDownloadFunctionality(PageName.ContactsPage,
								Workspace.FundraisingWorkspace, filesName[0], true, true, false)) {
							appLog.info("Verify UI of Opened File : " + filesName[0]);
						} else {
							appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
							sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
						}

						switchToDefaultContent(driver);
						switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));

					} else {
						appLog.error(" Not Able to Click All Folder Radio Button  ");
						sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
					}*/

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
		}
	} else {
		appLog.error("Not able to Click Contact tab ");
		sa.assertTrue(false, "Not able to Click Contact tab ");
	}

	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}	
@Test
	public void M7tc047_SearchingInInvestorPortalForPresentAndAbsentFiles() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	SoftAssert saa = new SoftAssert();
	String msg;

	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);

	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	;
	WebElement ele;
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
		// 1st
		if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.PotentialInvestmentPage,
				Workspace.FundraisingWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + cmnPath);

			// 2nd

			if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.PotentialInvestmentPage, Workspace.FundraisingWorkspace,
					filesName[0], 30)) {

				saa = bp.verifySearchUI(cmnPath, 30,PageName.PotentialInvestmentPage);
				sa.combineAssertions(saa);

				saa = bp.verifyContentGridForSearch(driver, cmnPath, filesName[0], date);
				sa.combineAssertions(saa);

				// 2a
				if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN)) {

					if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.PotentialInvestmentPage,
							Workspace.FundraisingWorkspace, filesName[0], 30)) {

						if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
								"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

							ele = bp.getNoDataToDisplaySearchPopMsg(30);
							if (ele != null) {
								msg = ele.getText().trim();
								if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
									appLog.info("  Msg Verified : " + msg);
								} else {
									appLog.error("  Msg Not Verified : Actual - " + msg);
									sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
								}
							} else {
								appLog.error(" No Data Display Msg Element is Null ");
								sa.assertTrue(false, " No Data Display Msg Element is Null ");
							}

							// 2b

							if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

								if (bp.verifyDownloadFunctionality(PageName.PotentialInvestmentPage,
										Workspace.FundraisingWorkspace, filesName[0], true, true, false)) {
									appLog.info("Verify UI of Opened File : " + filesName[0]);
								} else {
									appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
									sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
								}

								switchToDefaultContent(driver);

								// 3RD
								if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
										action.BOOLEAN)) {

									String AllPath = cmnPath + "," + shdPath + "," + stdPath;
									saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
									sa.combineAssertions(saa);
								} else {
									appLog.error(" Not Able to Click All Folder Radio Button  ");
									sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
								}

								if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
										action.SCROLLANDBOOLEAN)) {

								} else {
									appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
									sa.assertTrue(false,
											" Not Able to CLick Search Pop Search Text Cross Icon");
								}

							} else {
								appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
								sa.assertTrue(false,
										" Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

							}

						} else {
							appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
							sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
						}

					} else {
						appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
						sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");
					}

				} else {
					appLog.error(" Not Able to Click Search Cross Icon ");
					sa.assertTrue(false, " Not Able to Click Search Cross Icon ");
				}

			} else {
				appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
				sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

			}


			// 5
			if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.PotentialInvestmentPage, Workspace.FundraisingWorkspace,
					filesName[1], 30)) {

				ThreadSleep(5000);

				ele = bp.getNoDataToDisplaySearchPopMsg1(30);
				if (ele != null) {
					msg = ele.getText().trim();
					if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
						appLog.info("  Msg Verified : " + msg);
					} else {
						appLog.error("  Msg Not Verified : Actual - " + msg);
						sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
					}
				} else {
					appLog.error(" No Data Display Msg Element is Null ");
					sa.assertTrue(false, " No Data Display Msg Element is Null ");
				}

				saa = bp.verifySearchUI(cmnPath, 30,PageName.PotentialInvestmentPage);
				sa.combineAssertions(saa);

				click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);



			} else {
				appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
				sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");
			}
		} else {
			appLog.error(" Folder Structure Not Verified  : " + cmnPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
		}
		// Shared

		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.PotentialInvestmentPage,
				Workspace.FundraisingWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + shdPath);

			if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.PotentialInvestmentPage, Workspace.FundraisingWorkspace,
					filesName[0], 30)) {

				// 9

				saa = bp.verifySearchUI(shdPath, 30, PageName.PotentialInvestmentPage);
				sa.combineAssertions(saa);

				saa = bp.verifyContentGridForSearch(driver, shdPath, filesName[0], date);
				sa.combineAssertions(saa);

				if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

					String AllPath = cmnPath + "," + shdPath + "," + stdPath;

					// 10

					saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
					sa.combineAssertions(saa);
				} else {
					appLog.error(" Not Able to Click All Folder Radio Button  ");
					sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
				}

				click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

			} else {
				appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
				sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

			}
			appLog.info("performing akul's part");
			if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.PotentialInvestmentPage, Workspace.FundraisingWorkspace,
					filesName[0], 30)) {


				saa = bp.performSortingCheckOnSearchPopUpForAllColumns(false,true);
				sa.combineAssertions(saa);
				click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

			}
			else {
				appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
				sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

			}
		} else {
			appLog.error(" Folder Structure Not Verified  : " + shdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
		}

		// Standard
		switchToDefaultContent(driver);
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.PotentialInvestmentPage,
				Workspace.FundraisingWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + stdPath);

			if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.PotentialInvestmentPage, Workspace.FundraisingWorkspace,
					filesName[0], 30)) {
				// 11

				saa = bp.verifySearchUI(stdPath, 30, PageName.PotentialInvestmentPage);
				sa.combineAssertions(saa);

				saa = bp.verifyContentGridForSearch(driver, stdPath, filesName[0], date);
				sa.combineAssertions(saa);

				if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

					String AllPath = cmnPath + "," + shdPath + "," + stdPath;

					// 12

					saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 13

					if (bp.verifyDownloadFunctionality(PageName.PotentialInvestmentPage, Workspace.FundraisingWorkspace,
							filesName[0], true, true, false)) {
						appLog.info("Verify UI of Opened File : " + filesName[0]);
					} else {
						appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
						sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
					}

					switchToDefaultContent(driver);

				} else {
					appLog.error(" Not Able to Click All Folder Radio Button  ");
					sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
				}

				click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

			} else {
				appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
				sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

			}

		} else {
			appLog.error(" Folder Structure Not Verified  : " + stdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
		}
	}
	else {
		appLog.error("potential investment tab is not clickable");
		sa.assertTrue(false, "potential investment tab is not clickable");
	}


	switchToDefaultContent(driver);
	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();

}	
@Test
	public void M7tc048_1_UpdateCRMUserNameAndCheckOnContentGrid_VerifyUI() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	NIMPageBusinessLayer np = new NIMPageBusinessLayer(driver);
	AllFirmsPageBusinesslayer af = new AllFirmsPageBusinesslayer(driver);
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String updatedUserName = ExcelUtils.readData("Users", excelLabel.Variable_Name, "User1", excelLabel.Updated_LastName);
	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	String updatedFirmName = "updated"+M7FirmName;
	String updatedContactFirstName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M7C1", excelLabel.ContactNew_fName);
	String updatedContactLastName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M7C1", excelLabel.ContactNew_lName);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"fundraising workspace view");
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {
			if (fp.verifyUploadedByNameAndFirmName(filesName[0], M7FirmName, CRMUser1FirstName+" "+CRMUser1LastName,true,true,"User")) {
				appLog.info("uploaded by name and firm name is successfully verified");
			}
			else {
				appLog.error("uploaded by name and firm name could not be verified");
				sa.assertTrue(false, "uploaded by name and firm name could not be verified");
			}
			}
			switchToDefaultContent(driver);
		}
		else {
			appLog.error(M7FundName1+" is not found in funds page");
			sa.assertTrue(false, M7FundName1+" is not found in funds page");
		}
	}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}

	if (fp.clickOnTab(TabName.NIMTab)) {
		switchToFrame(driver, 30, bp.getFrame(PageName.NavatarInvestorManager, 30));
		if (np.clickOnSideMenusTab(sideMenu.Profiles)) {
			if (click(driver, np.getEditIcon(60), "edit icon on NIM page", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, np.getMyProfileLastName(60), updatedUserName, "last name of user 1 on nim page", action.SCROLLANDBOOLEAN)) {
					if (click(driver, np.getMyProfileSaveButton(60), "save button on nim profile page", action.SCROLLANDBOOLEAN)) {
						if (np.getMyProfileNameInViewMode(60).getText().contains(updatedUserName)) {
							appLog.info("user last name has been successfully changed to "+updatedUserName);
						}
						else {
							appLog.error("user last name has not been changed");
							sa.assertTrue(false, "user last name has not been changed");
						}
					}else {
						appLog.error("save button is not clickable on profle page");
						sa.assertTrue(false, "save button is not clickable on profle page");
					}
				}
				else {
					appLog.error("last name textbox is not visible on my profile page");
					sa.assertTrue(false, "last name textbox is not visible on my profile page");
				}
			}
			else {
				appLog.error("edit icon is not clickable on my profile page");
				sa.assertTrue(false, "edit icon is not clickable on my profile page");
			}
		}
		else {
			appLog.error("side menu profile link is not clickable");
			sa.assertTrue(false, "side menu profile link is not clickable");
		}
		switchToDefaultContent(driver);
	}
	//find name in content grid after updating name on nim page
	if (np.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			
		
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
				"fundraising workspace view");
		if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage,
				Workspace.FundraisingWorkspace, 60)) {
			if (fp.verifyUploadedByNameAndFirmName(filesName[0], "", CRMUser1FirstName+" "+updatedUserName, false, true,"User")) {
				appLog.info("file name is successfully verified");
			}
			else {
				appLog.error("file name could not be verified");
				sa.assertTrue(false, "file name could not be verified");
			}
			
		}
		else {
			appLog.error(stdPath + " is not found in funds page content grid");
			sa.assertTrue(false, stdPath + " is not found in funds page content grid");
		}
		}
		else {
			appLog.error(M7FundName1+" was not found on funds page");
			sa.assertTrue(false, M7FundName1+" was not found on funds page");
		}
	switchToDefaultContent(driver);
	}
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc048_2_UpdateCRMUserNameAndCheckOnContentGrid_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	NIMPageBusinessLayer np = new NIMPageBusinessLayer(driver);
	AllFirmsPageBusinesslayer af = new AllFirmsPageBusinesslayer(driver);
	InvestorProfileBusinessLayer ifp = new InvestorProfileBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String updatedUserName = ExcelUtils.readData("Users", excelLabel.Variable_Name, "User1", excelLabel.Updated_LastName);
	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	String updatedFirmName = "updated"+M7FirmName;
	String updatedContactFirstName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M7C1", excelLabel.ContactNew_fName);
	String updatedContactLastName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M7C1", excelLabel.ContactNew_lName);

	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (click(driver, af.getProfileLink(60), "profile link on investor all firms page", action.SCROLLANDBOOLEAN)) {
		if (click(driver,ifp.getEditIcon(60) , "Edit button on investor profile page", action.SCROLLANDBOOLEAN)) {
			if (sendKeys(driver, ifp.getFirstNameTextBox(60), updatedContactFirstName, "contact first name textbox on investor profile page", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, ifp.getLastNameTextBox(60), updatedContactLastName, "contact last name textbox on investor profile paeg", action.SCROLLANDBOOLEAN)) {
					if (click(driver, ifp.getSaveButtonMyProfilePage(60), "save button my profile page", action.SCROLLANDBOOLEAN)) {
						appLog.info("save button on my profile page has been clicked, contact has been successfully updated");
					}
					else {
						appLog.error("save button on my profile page is not clickable");
						sa.assertTrue(false, "save button on my profile page is not clickable");
					}
				}
				else {
					appLog.error("last name textbox is not visible on my profile page");
					sa.assertTrue(false, "last name textbox is not visible on my profile page");
				}
			}
			else {
				appLog.error("first name textbox is nto visible on my profile page");
				sa.assertTrue(false, "first name textbox is nto visible on my profile page");
			}
		}
		else {
			appLog.error("edit icon is not clckable on my profile page");
			sa.assertTrue(false, "edit icon is not clckable on my profile page");
		}
		if (click(driver, ifp.getMyFirmProfileTab(60), "my firm profile tab", action.SCROLLANDBOOLEAN) ) {
			if (click(driver, ifp.getEditIcon(60), "edit icon on my firm profile paeg", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, ifp.getFirmNameTextbox(60), updatedFirmName, "firm name texbtox on my firm profile page", action.SCROLLANDBOOLEAN)) {
					if (click(driver, ifp.getSaveButtonFirmProfile(60), "save button on firm profile page", action.SCROLLANDBOOLEAN)) {
						appLog.info("save button on my firm profile page has been clicked, firm details has been susccessfully updated");
					}
					else {
						appLog.error("save button is not clickable on firm profile page");
						sa.assertTrue(false, "save button is not clickable on firm profile page");
					}
				}
				else {
					appLog.error("firm name textbox is not visible on firm profile page");
					sa.assertTrue(false, "firm name textbox is not visible on firm profile page");
				}
			}
			else {
				appLog.error("edit icon is not clickable on my firm profile page");
				sa.assertTrue(false, "edit icon is not clickable on my firm profile page");
			}
		}
		else {
			appLog.error("my firm profile tab is not clickable on profile page");
			sa.assertTrue(false, "my firm profile tab is not clickable on profile page");
		}
	}
	else {
		appLog.error("profile link is not clickable on investor login page");
		sa.assertTrue(false, "profile link is not clickable on investor login page");
	}
	
	lp.investorLogout();
	sa.assertAll();
}
@Test
	public void M7tc048_3_UpdateCRMUserNameAndCheckOnContentGrid_ImpactCRM() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	NIMPageBusinessLayer np = new NIMPageBusinessLayer(driver);
	AllFirmsPageBusinesslayer af = new AllFirmsPageBusinesslayer(driver);
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String updatedUserName = ExcelUtils.readData("Users", excelLabel.Variable_Name, "User1", excelLabel.Updated_LastName);
	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	String updatedFirmName = "updated"+M7FirmName;
	String updatedContactFirstName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M7C1", excelLabel.ContactNew_fName);
	String updatedContactLastName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M7C1", excelLabel.ContactNew_lName);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	//now contact name and firm name will be updated in crm side content grid
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"fundraising workspace view");
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {
				
				if (fp.verifyUploadedByNameAndFirmName(filesName[1], updatedFirmName, updatedContactFirstName+ " "+ updatedContactLastName, true, true,"Contact")) {
					appLog.info("uploaded by name and firm name is successfully changed and verified from crm side content grid");
				}
				else {
					appLog.error("uploaded by name and firm name cannot be verified on content grid");
					sa.assertTrue(false, "uploaded by name and firm name cannot be verified on content grid");
				}
			}
			else {
				appLog.error("folder structure is not verified "+stdPath);
				sa.assertTrue(false, "folder structure is not verified "+stdPath);
			}
			
		}
		else {
			appLog.error("fund name "+M7FundName1+" is not found");
			sa.assertTrue(false, "fund name "+M7FundName1+" is not found");
		}
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc048_4_UpdateCRMUserNameAndCheckOnContentGrid_RevertBackChanges() {
	//reverting back changes
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	NIMPageBusinessLayer np = new NIMPageBusinessLayer(driver);
	InvestorProfileBusinessLayer ifp = new InvestorProfileBusinessLayer(driver);
	AllFirmsPageBusinesslayer af = new AllFirmsPageBusinesslayer(driver);
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String updatedUserName = ExcelUtils.readData("Users", excelLabel.Variable_Name, "User1", excelLabel.Updated_LastName);
	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	String updatedFirmName = "updated"+M7FirmName;
	String updatedContactFirstName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M7C1", excelLabel.ContactNew_fName);
	String updatedContactLastName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M7C1", excelLabel.ContactNew_lName);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (fp.clickOnTab(TabName.NIMTab)) {
		switchToFrame(driver, 30, bp.getFrame(PageName.NavatarInvestorManager, 30));
		if (np.clickOnSideMenusTab(sideMenu.Profiles)) {
			if (click(driver, np.getEditIcon(60), "edit icon on NIM page", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, np.getMyProfileLastName(60), CRMUser1LastName, "last name of user 1 on nim page", action.SCROLLANDBOOLEAN)) {
					if (click(driver, np.getMyProfileSaveButton(60), "save button on nim profile page", action.SCROLLANDBOOLEAN)) {
						if (np.getMyProfileNameInViewMode(60).getText().contains(CRMUser1LastName)) {
							appLog.info("user last name has been successfully changed to "+CRMUser1LastName);
						}
						else {
							appLog.error("user last name has not been changed");
							sa.assertTrue(false, "user last name has not been changed");
						}
					}else {
						appLog.error("save button is not clickable on profle page");
						sa.assertTrue(false, "save button is not clickable on profle page");
					}
				}
				else {
					appLog.error("last name textbox is not visible on my profile page");
					sa.assertTrue(false, "last name textbox is not visible on my profile page");
				}
			}
			else {
				appLog.error("edit icon is not clickable on my profile page");
				sa.assertTrue(false, "edit icon is not clickable on my profile page");
			}
		}
		else {
			appLog.error("side menu profile link is not clickable");
			sa.assertTrue(false, "side menu profile link is not clickable");
		}
		switchToDefaultContent(driver);
	}
	lp.CRMlogout();
	config(ExcelUtils.readDataFromPropertyFile("Browser"));
	lp = new LoginPageBusinessLayer(driver);
	af = new AllFirmsPageBusinesslayer(driver);
	ifp = new InvestorProfileBusinessLayer(driver);
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (click(driver, af.getProfileLink(60), "profile link on investor all firms page", action.SCROLLANDBOOLEAN)) {
		if (click(driver,ifp.getEditIcon(60) , "Edit button on investor profile page", action.SCROLLANDBOOLEAN)) {
			if (sendKeys(driver, ifp.getFirstNameTextBox(60), M7Contact1FirstName, "contact first name textbox on investor profile page", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, ifp.getLastNameTextBox(60), M7Contact1LastName, "contact last name textbox on investor profile paeg", action.SCROLLANDBOOLEAN)) {
					if (click(driver, ifp.getSaveButtonMyProfilePage(60), "save button my profile page", action.SCROLLANDBOOLEAN)) {
						appLog.info("save button on my profile page has been clicked, contact has been successfully updated");
					}
					else {
						appLog.error("save button on my profile page is not clickable");
						sa.assertTrue(false, "save button on my profile page is not clickable");
					}
				}
				else {
					appLog.error("last name textbox is not visible on my profile page");
					sa.assertTrue(false, "last name textbox is not visible on my profile page");
				}
			}
			else {
				appLog.error("first name textbox is nto visible on my profile page");
				sa.assertTrue(false, "first name textbox is nto visible on my profile page");
			}
		}
		else {
			appLog.error("edit icon is not clckable on my profile page");
			sa.assertTrue(false, "edit icon is not clckable on my profile page");
		}
		if (click(driver, ifp.getMyFirmProfileTab(60), "my firm profile tab", action.SCROLLANDBOOLEAN) ) {
			if (click(driver, ifp.getEditIcon(60), "edit icon on my firm profile paeg", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, ifp.getFirmNameTextbox(60), M7FirmName, "firm name texbtox on my firm profile page", action.SCROLLANDBOOLEAN)) {
					if (click(driver, ifp.getSaveButtonFirmProfile(60), "save button on firm profile page", action.SCROLLANDBOOLEAN)) {
						appLog.info("save button on my firm profile page has been clicked, firm details has been susccessfully updated");
					}
					else {
						appLog.error("save button is not clickable on firm profile page");
						sa.assertTrue(false, "save button is not clickable on firm profile page");
					}
				}
				else {
					appLog.error("firm name textbox is not visible on firm profile page");
					sa.assertTrue(false, "firm name textbox is not visible on firm profile page");
				}
			}
			else {
				appLog.error("edit icon is not clickable on my firm profile page");
				sa.assertTrue(false, "edit icon is not clickable on my firm profile page");
			}
		}
		else {
			appLog.error("my firm profile tab is not clickable on profile page");
			sa.assertTrue(false, "my firm profile tab is not clickable on profile page");
		}
	}
	else {
		appLog.error("profile link is not clickable on investor login page");
		sa.assertTrue(false, "profile link is not clickable on investor login page");
	}
	sa.assertAll();
}
@Test
	public void M7tc049_CheckLinksUploadedByAndFirmName() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	String parentID = null;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30),
					"fundraising workspace view");
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {
				if (click(driver, fp.getUploadedByFromFileNameContentGrid(fileName, "Contact"), "uploaded by value in front of "+fileName, action.SCROLLANDBOOLEAN)) {
					ThreadSleep(5000);
					parentID = switchOnWindow(driver);
					if (parentID!=null) {
						scrollDownThroughWebelement(driver, cp.getContactFullNameInViewMode(60), "contact name on contacts page");
						if (cp.getContactFullNameInViewMode(60).getText().trim().equals(M7Contact1FirstName+" "+M7Contact1LastName)) {
							appLog.info("contact page has been successfully opened after clicking on name in content grid");
						}
						else {
							appLog.error("contact page cannot be opened in new window");
							sa.assertTrue(false, "contact page cannot be opened in new window");
						}
						driver.close();
						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
					}
					else {
						appLog.error("no new window for contact page is opened");
						sa.assertTrue(false, "no new window for contact page is opened");
					}
				}
				if (click(driver, fp.getFirmNameFromFileNameContentGrid(fileName, "Contact"), "firm name from content grid", action.SCROLLANDBOOLEAN)) {
					ThreadSleep(5000);
					parentID = switchOnWindow(driver);
					if (parentID!=null) {
						scrollDownThroughWebelement(driver, ip.getLegalNameLabelTextbox(60), "instituion name on institutions page");
						if (ip.getLegalNameLabelTextbox(60).getText().trim().contains(M7Institution1)) {
							appLog.info("institutions page for "+M7Institution1+" is opened successfully after clicking on firm name in content grid");
						}
						else {
							appLog.error("instittuions page could not be opened after clicking on firm name on content grid");
							sa.assertTrue(false, "instittuions page could not be opened after clicking on firm name on content grid");
						}
						driver.close();
						driver.switchTo().window(parentID);
					}
					else {
						appLog.error("no new window for institutions page is opened");
						sa.assertTrue(false, "no new window for institutions page is opened");
					}
				}
				else {
					appLog.error("firm name is not clickable on content grid in front of "+fileName);
					sa.assertTrue(false, "firm name is not clickable on content grid in front of "+fileName);
				}
			}
			else {
				appLog.error(stdPath+" path is not found in folder structure");
				sa.assertTrue(false, stdPath+" path is not found in folder structure");
			}
		}
		else {
			appLog.error("fund name "+M7FundName1+" is not found in funds page");
			sa.assertTrue(false, "fund name "+M7FundName1+" is not found in funds page");
		}
	}
	if (bp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			scrollDownThroughWebelement(driver, ip.getFrame(PageName.InstitutionsPage, 30), "institutions frame");
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.FundraisingWorkspace, 60)) {
					if (click(driver,fp.getUploadedByFromFileNameContentGrid(fileName, "Contact") , "uploaded by contact for "+fileName, action.SCROLLANDBOOLEAN)) {
						ThreadSleep(5000);
						parentID = switchOnWindow(driver);
						if (parentID!=null) {
							scrollDownThroughWebelement(driver, cp.getContactFullNameInViewMode(60), "contact name on contacts page");
							if (cp.getContactFullNameInViewMode(60).getText().trim().equals(M7Contact1FirstName+" "+M7Contact1LastName)) {
								appLog.info("contact page has been successfully opened after clicking on name in content grid");
							}
							else {
								appLog.error("contact page cannot be opened in new window");
								sa.assertTrue(false, "contact page cannot be opened in new window");
							}
							driver.close();
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 30));
						}
						else {
							appLog.error("no new window for contact page is opened");
							sa.assertTrue(false, "no new window for contact page is opened");
						}
					}
					if (click(driver, fp.getFirmNameFromFileNameContentGrid(fileName, "Contact"), "firm name adjacent to file "+fileName, action.SCROLLANDBOOLEAN)) {
						ThreadSleep(5000);
						parentID = switchOnWindow(driver);
						if (parentID!=null) {
							scrollDownThroughWebelement(driver, ip.getLegalNameLabelTextbox(60), "instituion name on institutions page");
							if (ip.getLegalNameLabelTextbox(60).getText().trim().contains(M7Institution1)) {
								appLog.info("institutions page for "+M7Institution1+" is opened successfully after clicking on firm name in content grid");
							}
							else {
								appLog.error("instittuions page could not be opened after clicking on firm name on content grid");
								sa.assertTrue(false, "instittuions page could not be opened after clicking on firm name on content grid");
							}
							driver.close();
							driver.switchTo().window(parentID);
						}
						else {
							appLog.error("no new window for institutions page is opened");
							sa.assertTrue(false, "no new window for institutions page is opened");
						}
					}
					else {
						appLog.error("firm name cannot be get from "+fileName);
						sa.assertTrue(false, "firm name cannot be get from "+fileName);
					}
					
			}
			else {
				appLog.error("path "+stdPath+" cannot be found in folder structure");
				sa.assertTrue(false, "path "+stdPath+" cannot be found in folder structure");
			}
		}
		else {
			appLog.error("institution "+M7Institution1+" cannot be found on institutiions page");
			sa.assertTrue(false, "institution "+M7Institution1+" cannot be found on institutiions page");
		}
	}
	if (ip.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName,M7Contact1LastName, null)) {
			scrollDownThroughWebelement(driver, ip.getFrame(PageName.ContactsPage, 30), "contacts frame");
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.FundraisingWorkspace, 60)) {
				if (click(driver,fp.getUploadedByFromFileNameContentGrid(fileName, "Contact") , "uploaded by contact for "+fileName, action.SCROLLANDBOOLEAN)) {
					ThreadSleep(5000);
					parentID = switchOnWindow(driver);
					if (parentID!=null) {
						scrollDownThroughWebelement(driver, cp.getContactFullNameInViewMode(60), "contact name on contacts page");
						if (cp.getContactFullNameInViewMode(60).getText().trim().equals(M7Contact1FirstName+" "+M7Contact1LastName)) {
							appLog.info("contact page has been successfully opened after clicking on name in content grid");
						}
						else {
							appLog.error("contact page cannot be opened in new window");
							sa.assertTrue(false, "contact page cannot be opened in new window");
						}
						driver.close();
						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 30));
					}
					else {
						appLog.error("no new window for contact page is opened");
						sa.assertTrue(false, "no new window for contact page is opened");
					}
				}
				if (click(driver, fp.getFirmNameFromFileNameContentGrid(fileName, "Contact"), "firm name adjacent to file "+fileName, action.SCROLLANDBOOLEAN)) {
					ThreadSleep(5000);
					parentID = switchOnWindow(driver);
					if (parentID!=null) {
						scrollDownThroughWebelement(driver, ip.getLegalNameLabelTextbox(60), "instituion name on institutions page");
						if (ip.getLegalNameLabelTextbox(60).getText().trim().contains(M7Institution1)) {
							appLog.info("institutions page for "+M7Institution1+" is opened successfully after clicking on firm name in content grid");
						}
						else {
							appLog.error("instittuions page could not be opened after clicking on firm name on content grid");
							sa.assertTrue(false, "instittuions page could not be opened after clicking on firm name on content grid");
						}
						driver.close();
						driver.switchTo().window(parentID);
					}
					else {
						appLog.error("no new window for institutions page is opened");
						sa.assertTrue(false, "no new window for institutions page is opened");
					}
				}
				else {
					appLog.error("firm name cannot be get from content grid adjacent to file "+fileName);
					sa.assertTrue(false, "firm name cannot be get from content grid adjacent to file "+fileName);
				}

			}
			else {
				appLog.error("path "+stdPath+" could not be found in folder structure");
				sa.assertTrue(false, "path "+stdPath+" could not be found in folder structure");
			}
		}
		else {
			appLog.error("contact "+M7Contact1FirstName+" "+M7Contact1LastName+" cannot be found on contacts page");
			sa.assertTrue(false, "contact "+M7Contact1FirstName+" "+M7Contact1LastName+" cannot be found on contacts page");
		}
	}
	else {
		appLog.error("contacts tab is not clickable");
		sa.assertTrue(false, "contacts tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
@Test
	public void M7tc050_CheckLinksAfterDeletingContact() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	HomePageBusineesLayer hp = new HomePageBusineesLayer(driver);
	String msg=null;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			if (click(driver, cp.getDeleteButtonContactsPage(60), "delete button on contacts page", action.SCROLLANDBOOLEAN)) {
				ThreadSleep(3000);
				if (isAlertPresent(driver)) {
					msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
					switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
				}
				else {
					appLog.error("no alert is present");
					sa.assertTrue(false, "no alert is present");
				}
			}
			else {
				appLog.error("delete button on contacts page is not clickable");
				sa.assertTrue(false, "delete button on contacts page is not clickable");
			}
		}
		else {
			appLog.error("contact "+M7Contact1FirstName+" "+M7Contact1LastName+" was not found");
			sa.assertTrue(false, "contact "+M7Contact1FirstName+" "+M7Contact1LastName+" was not found");
		}
	}
	else {
		appLog.error("contacts tab is not clickable");
		sa.assertTrue(false, "contacts tab is not clickable");
	}
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage,
					Workspace.FundraisingWorkspace, 60)) {
				if (click(driver, fp.getUploadedByFromFileNameContentGrid(fileName, "Contact"), "firm name url adjacent to file "+fileName, action.SCROLLANDBOOLEAN)) {
					if (isAlertPresent(driver)) {
						msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
						if (msg.trim().equals(FundsPageErrorMessage.couldNotFindContactOrFirm)) {
							appLog.info("correct alert that contact is not present is successfully verified");
						}
						else {
							appLog.error("alert message is wrong for contact not found");
							sa.assertTrue(false, "alert message is wrong for contact not found");
						}
					}
					else {
						appLog.error("alert is not present when deleted contact is accessed");
						sa.assertTrue(false, "alert is not present when deleted contact is accessed");
					}
				}
				if (click(driver, fp.getFirmNameFromFileNameContentGrid(fileName, "Contact"), "firm name adjacent to "+fileName+" on contact grid", action.SCROLLANDBOOLEAN)) {
					if (isAlertPresent(driver)) {
						msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
						if (msg.trim().equals(FundsPageErrorMessage.couldNotFindContactOrFirm)) {
							appLog.info("correct alert that firm is not present is successfully verified");
						}
						else {
							appLog.error("alert for firm not found is wrong");
							sa.assertTrue(false, "alert for firm not found is wrong");
						}
					}
					else {
						appLog.error("no alert is present when clicking on deleted firm name");
						sa.assertTrue(false, "no alert is present when clicking on deleted firm name");
					}
				}
				else {
					appLog.error("cannot click on contact who uploaded file "+fileName);
					sa.assertTrue(false, "cannot click on contact who uploaded file "+fileName);
				}
			}
			else {
				appLog.error("folder path "+stdPath+" is not present in folder structrure");
				sa.assertTrue(false, "folder path "+stdPath+" is not present in folder structrure");
			}
			switchToDefaultContent(driver);

				if (hp.restoreValuesFromRecycleBin(M7Contact1FirstName+" "+M7Contact1LastName)) {
					if (bp.clickOnTab(TabName.ContactTab)) {
						if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
							appLog.info("contact has been successfully restored");
							if (click(driver, cp.getEditButton(60), "edit button on contacts page", action.SCROLLANDBOOLEAN)) {
								if (sendKeys(driver, cp.getEmailId(60), "**"+M7Contact1EmailId.substring(2), "email id textbox on contact page", action.SCROLLANDBOOLEAN)) {
									if (click(driver, cp.getSaveButton(60), "contacts page save button", action.SCROLLANDBOOLEAN)) {
										if (bp.clickOnTab(TabName.FundsTab)) {
											if (fp.clickOnCreatedFund(M7FundName1)) {
												switchToFrame(driver, 30, bp.getFrame(PageName.FundsPage, 30));
												if (fp.verifyFolderPathdummy(stdPath, M7Institution1, null, M7FundName1, PageName.FundsPage,
														Workspace.FundraisingWorkspace, 60)) {
													if (click(driver, fp.getUploadedByFromFileNameContentGrid(fileName, "Contact"), "contact name in front of file "+fileName+" in content grid", action.SCROLLANDBOOLEAN)) {
														if (isAlertPresent(driver)) {
															msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
															switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
															if (msg.trim().equals(FundsPageErrorMessage.couldNotFindContactOrFirm)) {
																appLog.info("correct error message alert is present after editing email id of contact and clicking on contact name");
															}
															else {
																appLog.error("error message is wrong when updated contact name and clicking on contact");
																sa.assertTrue(false, "error message is wrong when updated contact name and clicking on contact");
															}
														}
														else {
															appLog.error("no alert message is present when clicked on changed email id of contact");
															sa.assertTrue(false, "no alert message is present when clicked on changed email id of contact");
														}
													}
													if (click(driver, fp.getFirmNameFromFileNameContentGrid(fileName, "Contact"), "firm name in front of file "+fileName+" in content grid", action.SCROLLANDBOOLEAN)) {
														if (isAlertPresent(driver)) {
															msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
															switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
															if (msg.trim().equals(FundsPageErrorMessage.couldNotFindContactOrFirm)) {
																appLog.info("correct error message alert is present after editing email id of contact and clicking on contact name");
															}
															else {
																appLog.error("error message is wrong when updated contact name and clicking on firmname");
																sa.assertTrue(false, "error message is wrong when updated contact name and clicking on firmname");
															}
														}
														else {
															appLog.error("no alert message is present when clicked on changed email id of contact");
															sa.assertTrue(false, "no alert message is present when clicked on changed email id of contact");
														}
													}
													
													//revert back changes
													switchToDefaultContent(driver);
													if (fp.clickOnTab(TabName.ContactTab)) {
														if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
															if (click(driver, cp.getEditButton(60), "edit button on contacts page", action.SCROLLANDBOOLEAN)) {
																if (sendKeys(driver, cp.getEmailId(60), M7Contact1EmailId, "email id textbox on contact page", action.SCROLLANDBOOLEAN)) {
																	if (click(driver, cp.getSaveButton(60), "contacts page save button", action.SCROLLANDBOOLEAN)) {
																		appLog.info("correct email id has been successfully reverted back of "+M7Contact1FirstName+" "+M7Contact1LastName);
																	}
																	else {
																		appLog.error("save button onc contacts page is not clickable");
																		sa.assertTrue(false, "save button onc contacts page is not clickable");
																	}
																}
																else {
																	appLog.error("email id textbox is not visible on contacts page");
																	sa.assertTrue(false, "email id textbox is not visible on contacts page");
																}
															}
															else {
																appLog.error("edit button on contacts page is not clickable");
																sa.assertTrue(false, "edit button on contacts page is not clickable");
															}
														}
														else {
															appLog.error("contact "+M7Contact1LastName+" is not found on contacts page");
															sa.assertTrue(false, "contact "+M7Contact1LastName+" is not found on contacts page");
														}
													}
													
													else {
														appLog.error("cannot click on uploaded by link in front of "+fileName);
														sa.assertTrue(false, "cannot click on uploaded by link in front of "+fileName);
													}
												}
												else {
													appLog.error(stdPath+" is not found in folder structure");
													sa.assertTrue(false, stdPath+" is not found in folder structure");
												}
											}
											else {
												appLog.error("cannot find fund "+M7FundName1);
												sa.assertTrue(false, "cannot find fund "+M7FundName1);
											}
										}
										else {
											appLog.error("cannot click on funds tab");
											sa.assertTrue(false, "cannot click on funds tab");
										}
									}
									else {
										appLog.error("save button on contact page edit page is not clickable");
										sa.assertTrue(false, "save button on contact page edit page is not clickable");
									}
								}
								else {
									appLog.error("email id text box is not visible on contact page edit page");
									sa.assertTrue(false, "email id text box is not visible on contact page edit page");
								}
							}
							else {
								appLog.error("edit button on contact page is not clickable");
								sa.assertTrue(false, "edit button on contact page is not clickable");
							}
						}
						else {
							appLog.error("contact could not be restored from recycle bin");
							sa.assertTrue(false, "contact could not be restored from recycle bin");
						}
					}
					else {
						appLog.error("contacts tab is not clickable");
						sa.assertTrue(false, "contacts tab is not clickable");
					}

				}
				else {
					appLog.error("could not undelete contact "+M7Contact1FirstName+" "+M7Contact1LastName+" from recycle bin");
					sa.assertTrue(false, "could not undelete contact "+M7Contact1FirstName+" "+M7Contact1LastName+" from recycle bin");
				}

		}
		else {
			appLog.error("funds tab is not clickable");
			sa.assertTrue(false, "funds tab is not clickable");
		}
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}
	
@Test
	public void M7tc051_InvestorSideBuildWorkspaceAndImportFolderTemplateCheckButton() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	WebElement onlineImport;
	WebElement uploadButton;
	WebElement contactAccessIcon;
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	

	if (fp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			String Size = ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M7F1", excelLabel.Fund_Size);
			String vintageyear = ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M7F1",
					excelLabel.Fund_VintageYear);
			String phone = ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M7F1", excelLabel.Fund_Phone);
			
			String description = ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M7F1",
					excelLabel.Fund_Description);
			String[] data = { Size, vintageyear, M7Contact1FirstName + " " + M7Contact1LastName, phone,
					M7Contact1EmailId, description };

			if (fp.buildWorkspace(data, WorkSpaceAction.IMPORTFOLDERTEMPLATE, folderTemplateName, null,
					M7Institution1 + "/" + M7LimitedPartner1 + "<break>" + M7Institution2 + "/" + M7LimitedPartner2,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info("InvestorWorkspace work is build successfully for :" + M7FundName1);
				ThreadSleep(5000);

				//
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
				// Institution Folder

				if (fp.verifyFolderPathdummy("", M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info("InvestorWorkspace Folder Structure Verified: " + M7Institution1 + "/"
							+ M7LimitedPartner1);
					
					click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
							"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);
					
					onlineImport = fp.getOnlineImportLink(Workspace.InvestorWorkspace, 10);
					if (onlineImport == null) {
						appLog.info("Online Import Button is Not Present for Folder : " + M7Institution1 + "/"
								+ M7LimitedPartner1);

					} else {
						appLog.error("Online Import Button is  Present for Folder : " + M7Institution1 + "/"
								+ M7LimitedPartner1);
						sa.assertTrue(false, "Online Import Button is  Present for Folder : " + M7Institution1 + "/"
								+ M7LimitedPartner1);
					}

					uploadButton = fp.getUploadIcon(Workspace.InvestorWorkspace, 10);
					if (uploadButton == null) {
						appLog.info("Upload Button is Not Present for Folder " + M7Institution1 + "/"
								+ M7LimitedPartner1);

					} else {
						appLog.error("Upload Button is Present for Folder : " + M7Institution1 + "/"
								+ M7LimitedPartner1);
						sa.assertTrue(false, "Upload Button is Present for Folder : " + M7Institution1 + "/"
								+ M7LimitedPartner1);
					}

					// Standard

					if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1,
							PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + M7Institution1 + "/" + M7LimitedPartner1 + "/"
								+ stdPath);
						
						click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
								"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);

						contactAccessIcon = fp.getContactAccessIcon(Workspace.InvestorWorkspace, 10);
						if (contactAccessIcon != null) {
							appLog.info("Contact Access Icon is Present for Folder : " + M7Institution1 + "/"
									+ M7LimitedPartner1 + "/" + stdPath);

						} else {
							appLog.error("Contact Access Icon  is Not Present for Folder : " + M7Institution1 + "/"
									+ M7LimitedPartner1 + "/" + stdPath);
							sa.assertTrue(false, "Contact Access Icon  is Not Present for Folder : "
									+ M7Institution1 + "/" + M7LimitedPartner1 + "/" + stdPath);
						}

						onlineImport = fp.getOnlineImportLink(Workspace.InvestorWorkspace, 10);
						if (onlineImport != null) {
							appLog.info("Online Import Button is Present for Folder : " + M7Institution1 + "/"
									+ M7LimitedPartner1 + "/" + stdPath);

						} else {
							appLog.error("Online Import Button is Not Present for Folder : " + M7Institution1 + "/"
									+ M7LimitedPartner1 + "/" + stdPath);
							sa.assertTrue(false, "Online Import Button is Not Present for Folder : "
									+ M7Institution1 + "/" + M7LimitedPartner1 + "/" + stdPath);
						}

						uploadButton = fp.getUploadIcon(Workspace.InvestorWorkspace, 10);
						if (uploadButton != null) {
							appLog.info("Upload Button is Present for Folder : " + M7Institution1 + "/"
									+ M7LimitedPartner1 + "/" + stdPath);

						} else {
							appLog.error("Upload Button is Not Present for Folder :" + M7Institution1 + "/"
									+ M7LimitedPartner1 + "/" + stdPath);
							sa.assertTrue(false, "Upload Button is Not Present for Folder :" + M7Institution1 + "/"
									+ M7LimitedPartner1 + "/" + stdPath);
						}

					} else {
						appLog.error(" Folder Structure Not Verified  : " + M7Institution1 + "/" + M7LimitedPartner1
								+ "/" + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + M7Institution1 + "/"
								+ M7LimitedPartner1 + "/" + stdPath);
					}

				} else {
					appLog.error(" Folder Structure Not Verified  : " + M7Institution1 + "/" + M7LimitedPartner1);
					sa.assertTrue(false,
							" Folder Structure Not Verified  : " + M7Institution1 + "/" + M7LimitedPartner1);
				}

				// Common

				if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + cmnPath);
					click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
							"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);

					onlineImport = fp.getOnlineImportLink(Workspace.InvestorWorkspace, 10);
					if (onlineImport != null) {
						appLog.info("Online Import Button is Present for Folder : " + cmnPath);

					} else {
						appLog.error("Online Import Button is Not Present for Folder : " + cmnPath);
						sa.assertTrue(false, "Online Import Button is Not Present for Folder : " + cmnPath);
					}

					uploadButton = fp.getUploadIcon(Workspace.InvestorWorkspace, 10);
					if (uploadButton != null) {
						appLog.info("Upload Button is Present for Folder : " + cmnPath);

					} else {
						appLog.error("Upload Button is Not Present for Folder :" + cmnPath);
						sa.assertTrue(false, "Upload Button is Not Present for Folder :" + cmnPath);
					}

				} else {
					appLog.error(" Folder Structure Not Verified  : " + cmnPath);
					sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
				}

				// Internal

				if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + intPath);
					click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
							"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);

					onlineImport = fp.getOnlineImportLink(Workspace.InvestorWorkspace, 10);
					if (onlineImport != null) {
						appLog.info("Online Import Button is Present for Folder : " + intPath);

					} else {
						appLog.error("Online Import Button is Not Present for Folder : " + intPath);
						sa.assertTrue(false, "Online Import Button is Not Present for Folder : " + intPath);
					}

					uploadButton = fp.getUploadIcon(Workspace.InvestorWorkspace, 10);
					if (uploadButton != null) {
						appLog.info("Upload Button is Present for Folder : " + intPath);

					} else {
						appLog.error("Upload Button is Not Present for Folder :" + intPath);
						sa.assertTrue(false, "Upload Button is Not Present for Folder :" + intPath);
					}

				} else {
					appLog.error(" Folder Structure Not Verified  : " + intPath);
					sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
				}

				// Shared

				if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + shdPath);
					click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
							"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);

					contactAccessIcon = fp.getContactAccessIcon(Workspace.InvestorWorkspace, 10);
					if (contactAccessIcon != null) {
						appLog.info("Contact Access Icon is Present for Folder : " + shdPath);

					} else {
						appLog.error("Contact Access Icon  is Not Present for Folder : " + shdPath);
						sa.assertTrue(false, "Contact Access Icon  is Not Present for Folder : " + shdPath);
					}

					onlineImport = fp.getOnlineImportLink(Workspace.InvestorWorkspace, 10);
					if (onlineImport != null) {
						appLog.info("Online Import Button is Present for Folder : " + shdPath);

					} else {
						appLog.error("Online Import Button is Not Present for Folder : " + shdPath);
						sa.assertTrue(false, "Online Import Button is Not Present for Folder : " + shdPath);
					}

					uploadButton = fp.getUploadIcon(Workspace.InvestorWorkspace, 10);
					if (uploadButton != null) {
						appLog.info("Upload Button is Present for Folder : " + shdPath);

					} else {
						appLog.error("Upload Button is Not Present for Folder :" + shdPath);
						sa.assertTrue(false, "Upload Button is Not Present for Folder :" + shdPath);
					}

				} else {
					appLog.error(" Folder Structure Not Verified  : " + shdPath);
					sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
				}

			} else {
				appLog.error("Not able to bulid fundraising workspace on fund: " + M7FundName1);
				sa.assertTrue(false, "Not able to bulid fundraising workspace on fund: " + M7FundName1);
			}

		} else {
			appLog.error("Not able to Click Fund OR Fund is not Present: " + M7FundName1);
			sa.assertTrue(false, "Not able to Click fund OR Fund is not Present: " + M7FundName1);
		}
	} else {
		appLog.error("Not able to Click Fund tab ");
		sa.assertTrue(false, "Not able to Click Fund tab ");
	}

	// Institution Tab
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			if (ip.getErrorMessageAfterAdminAndCRMUserRegistrationInvestorWorkspace(10) == null) {
				appLog.info("Error Message is Not Present Hence Investor workspace has been created");
			} else {
				sa.assertTrue(false, "Error Message is Present Hence Investor workspace has been created");
				appLog.error("Error Message is Present Hence Investor workspace has been created");
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	// Institution Tab
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution2)) {
			appLog.info("Opened Institution : " + M7Institution2);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			if (ip.getErrorMessageAfterAdminAndCRMUserRegistrationInvestorWorkspace(10) == null) {
				appLog.info("Error Message is Not Present Hence Investor workspace has been created");
			} else {
				sa.assertTrue(false, "Error Message is Present Hence Investor workspace has been created");
				appLog.error("Error Message is Present Hence Investor workspace has been created");
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution2);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution2);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	// Institution Tab
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
			appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			if (ip.getErrorMessageAfterAdminAndCRMUserRegistrationInvestorWorkspace(10) == null) {
				appLog.info("Error Message is Not Present Hence Investor workspace has been created");
			} else {
				sa.assertTrue(false, "Error Message is Present Hence Investor workspace has been created");
				appLog.error("Error Message is Present Hence Investor workspace has been created");
			}

		} else {
			appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			sa.assertTrue(false,
					"Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	// Institution Tab
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner2)) {
			appLog.info(" Opened Limited Partner : " + M7LimitedPartner2);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			if (ip.getErrorMessageAfterAdminAndCRMUserRegistrationInvestorWorkspace(10) == null) {
				appLog.info("Error Message is Not Present Hence Investor workspace has been created");
			} else {
				sa.assertTrue(false, "Error Message is Present Hence Investor workspace has been created");
				appLog.error("Error Message is Present Hence Investor workspace has been created");
			}

		} else {
			appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner2);
			sa.assertTrue(false,
					"Not able to Click LP OR LP is not Present: " + M7LimitedPartner2);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}

@Test
	public void M7tc052_InvestorSideProvideContactAccess() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,excelLabel.StandardPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,excelLabel.SharedPath);

	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			// Institution1+Lp1+Standard
			if (fp.inviteContact(M7Institution1 + "/" + M7LimitedPartner1, M7Contact1EmailId, stdPath,
					FolderType.Standard, "upload", "Yes", "no", "Standard", Workspace.InvestorWorkspace,
					M7Contact1LastName)) {
				appLog.info("For " + M7Institution1 + "/" + M7LimitedPartner1 + "/" + stdPath
						+ " contact has been given access successfully and invite has been sent to mail "
						+ M7Contact1FirstName + " " + M7Contact1LastName);
			} else {
				appLog.error("For " + M7Institution1 + "/" + M7LimitedPartner1 + "/" + stdPath
						+ " Access has not been Given Successfully " + M7Contact1FirstName + " "
						+ M7Contact1LastName);
				sa.assertTrue(false,
						"For " + M7Institution1 + "/" + M7LimitedPartner1 + "/" + stdPath
								+ " Access has not been Given Successfully " + M7Contact1FirstName + " "
								+ M7Contact1LastName);
			}

			// Institution1+Shared
			if (fp.inviteContact(null, M7Contact1EmailId, shdPath, FolderType.Shared, "Download", "Yes",
					"no", "Shared", Workspace.InvestorWorkspace, M7Contact1LastName)) {
				appLog.info("For " +  shdPath
						+ " contact has been given access successfully and invite has been sent to mail "
						+ M7Contact1FirstName + " " + M7Contact1LastName);
			} else {
				appLog.error("For "  + shdPath + " Access has not been Given Successfully "
						+ M7Contact1FirstName + " " + M7Contact1LastName);
				sa.assertTrue(false,
						"For " + shdPath + " Access has not been Given Successfully "
								+ M7Contact1FirstName + " " + M7Contact1LastName);
			}

			// Institution2+Lp2+Standard
			if (fp.inviteContact(M7Institution2 + "/" + M7LimitedPartner2, M7Contact2EmailId, stdPath,
					FolderType.Standard, "upload", "Yes", "no", "Standard", Workspace.InvestorWorkspace,
					M7Contact2LastName)) {
				appLog.info("For " + M7Institution2 + "/" + M7LimitedPartner2 + "/" + stdPath
						+ " contact has been given access successfully and invite has been sent to mail "
						+ M7Contact2FirstName + " " + M7Contact2LastName);
			} else {
				appLog.error("For " + M7Institution2 + "/" + M7LimitedPartner2 + "/" + stdPath
						+ " Access has not been Given Successfully " + M7Contact1FirstName + " "
						+ M7Contact1LastName);
				sa.assertTrue(false,
						"For " + M7Institution2 + "/" + M7LimitedPartner2 + "/" + stdPath
								+ " Access has not been Given Successfully " + M7Contact1FirstName + " "
								+ M7Contact1LastName);
			}

			// Institution2+Shared
			if (fp.inviteContact(null, M7Contact2EmailId, shdPath, FolderType.Shared, "Download", "Yes",
					"no", "Shared", Workspace.InvestorWorkspace, M7Contact2LastName)) {
				appLog.info("For " +  shdPath
						+ " contact has been given access successfully and invite has been sent to mail "
						+ M7Contact2FirstName + " " + M7Contact2LastName);
			} else {
				appLog.error("For "+ shdPath + " Access has not been Given Successfully "
						+ M7Contact2FirstName + " " + M7Contact2LastName);
				sa.assertTrue(false,
						"For " +  shdPath + " Access has not been Given Successfully "
								+ M7Contact2FirstName + " " + M7Contact2LastName);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fund is Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fund is Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Fund Tab");
		sa.assertTrue(false, "Not Able to Click Fund Tab");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();
}

	@Test
	public void M7tc053_1_UploadFileCommonNegative() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	String parentID = null;
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.CommonPath);
	String uploadFiles = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.UploadedFileCommon);

	List<String> uploaded_files_list = createListOutOfString(uploadFiles);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {
				if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30),
						"upload icon on " + Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					if (fp.getUploadDocumentToFolderTextLabel(60).getText().trim()
							.contains("Upload Document to Folder")) {
						appLog.info("Upload document to folder text is successfully found");
						WebElement common_text = isDisplayed(driver,
								FindElement(driver, "//span[contains(text(),'" + cmnPath + "')]",
										"common folder name", action.SCROLLANDBOOLEAN, 30),
								"visibility", 30, "common folder name");
						if (common_text != null) {
							appLog.info("correct folder name is succesfully displayed");
						} else {
							appLog.error("folder name text present is wrong on upload window");
							sa.assertTrue(false, "folder name text present is wrong on upload window");
						}
						if (fp.getUploadWindowCancelBtn(60) != null) {
							appLog.info("cancel button is successfully displayed");
						} else {
							appLog.error("cancel button is not displayed on upload window");
							sa.assertTrue(false, "cancel button is not displayed on upload window");
						}
						if (fp.getUploadSaveButton(60) != null) {
							appLog.info("save button is successfully displayed");
						} else {
							appLog.error("save button is not displayed on upload window");
							sa.assertTrue(false, "save button is not displayed on upload window");
						}
					} else {
						appLog.error("upload document to folder text is not found");
						sa.assertTrue(false, "upload document to folder text is not found");
					}
					click(driver, fp.getUploadWindowCancelBtn(60), "cancel button on upload file window",
							action.SCROLLANDBOOLEAN);
					appLog.info("successfully clicked on close button and closed window");

					driver.switchTo().window(parentID);
					switchToFrame(driver, 30, bp.getFrame(PageName.FundsPage, 30));
					// clicking upload icon and click save button without
					// file
					if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 60),
							"upload icon on " + Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
						parentID = switchOnWindow(driver);

						if (click(driver, fp.getUploadSaveButton(60), "save button on upload window",
								action.SCROLLANDBOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {

								String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
								switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
								if (msg.trim().equals(FundsPageErrorMessage.noDocumentUploaded)) {
									appLog.info(
											"correct error message to upload document in correct area is found successfully");
								} else {
									appLog.error("error message to upload document in correct area is not found");
									sa.assertTrue(false,
											"error message to upload document in correct area is not found");
								}

							} else {
								appLog.error("alert message for save button is not found");
								sa.assertTrue(false, "alert message for save button is not found");
							}
							// drag and drop file in correct area
							if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "DropLoc.jpg")) {

								appLog.info("files are successfully dropped into upload section");
								if (fp.removeAllFilesUploadWindow(fp.getCrossIconListUploadDoc())) {
									appLog.info("crossed on all files uploaded");
								}
								else {
									appLog.error("could not click on some files cross icon");
									sa.assertTrue(false, "could not click on some files cross icon");
								}

								if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(0), 10)!=null) {
									appLog.error(uploaded_files_list.get(0)+ " is found even after clicking cancel button");
									sa.assertTrue(false, uploaded_files_list.get(0)+ " is found even after clicking cancel button");
								}
								else {
									appLog.info("file has been succesfully removed after clicking cross icon");
								}
								if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(1), 10)!=null) {
									appLog.error(uploaded_files_list.get(1)+ " is found even after clicking cancel button");
									sa.assertTrue(false, uploaded_files_list.get(1)+ " is found even after clicking cancel button");
								}
								else {
									appLog.info("file has been succesfully removed after clicking cross icon");
								}
								if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(2), 10)!=null) {
									appLog.error(uploaded_files_list.get(2)+ " is found even after clicking cancel button");
									sa.assertTrue(false, uploaded_files_list.get(2)+ " is found even after clicking cancel button");
								}
								else {
									appLog.info("file has been succesfully removed after clicking cross icon");
								}
							}

							else {
								appLog.error("0 documents have been uploaded");
								sa.assertTrue(false, "0 documents have been uploaded");
							}
							// upload zero size documents
							if (fp.dragDropFiles("UploadFiles\\0sizeDocument", "DropLoc.jpg")) {
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {

									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if (msg.trim().equals(FundsPageErrorMessage.zeroSizeFile)) {
										appLog.info("correct error message that zero size file is not allowed");
									} else {
										appLog.error("zero size file error message is not found");
										sa.assertTrue(false, "zero size file error message is not found");
									}
								} else {
									appLog.error("error message for zero size file is not found");
									sa.assertTrue(false, "error message for zero size file is not found");
								}
							} else {
								appLog.error("no file has been uploaded");
								sa.assertTrue(false, "no file has been uploaded");
							}
							// uploaded documents on wrong area
							if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "wrong.png")) {
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {

									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if (msg.trim()
											.equals(FundsPageErrorMessage.documentNotUploadedInUploadedArea)) {
										appLog.info(
												"correct error message that document is not uploaded in correct area");
									} else {
										appLog.error(
												"error message that document is not uploaded in correct area is not found");
										sa.assertTrue(false,
												"error message that document is not uploaded in correct area is not found");
									}
								} else {
									appLog.error("error alert is not found for wrong area dropping of files");
									sa.assertTrue(false,
											"error alert is not found for wrong area dropping of files");
								}

							} else {
								appLog.error("drag and drop files on wrong area could not be done");
								sa.assertTrue(false, "drag and drop files on wrong area could not be done");
							}

						} else {
							appLog.error("save button on upload window is not clickable");
							sa.assertTrue(false, "save button on upload window is not clickable");
						}
					} else {
						appLog.error("upload icon on funds page workspace is not clickable");
						sa.assertTrue(false, "upload icon on funds page workspace is not clickable");
					}

				} else {
					appLog.error("upload icon on funds page worskpace is not clickable");
					sa.assertTrue(false, "upload icon on funds page workspace is not clickable");
				}
			} else {
				appLog.error("Folder is not present in workspace");
				sa.assertTrue(false, "Folder is not present in workspace");
			}
		} else {
			appLog.error("fund is not found: " + M7FundName1);
			sa.assertTrue(false, "funds is not found: " + M7FundName1);
		}
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}

	@Test
	public void M7tc053_2_UploadFileInternalNegative() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		String parentID=null;
		String internalPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
		String uploadFiles = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileInternal);
		List<String> uploaded_files_list = createListOutOfString(uploadFiles);

		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M7FundName1)) {
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
				if (fp.verifyFolderPathdummy(internalPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
					if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
						parentID = switchOnWindow(driver);
						if (fp.getUploadDocumentToFolderTextLabel(60).getText().trim().contains("Upload Document to Folder")) {
							appLog.info("Upload document to folder text is successfully found");
							WebElement internal_text = isDisplayed(driver, FindElement(driver, "//span[contains(text(),'"+internalPath+"')]", "internal folder name", action.SCROLLANDBOOLEAN,30), "visibility", 30, "internal folder name");
							if (internal_text!=null) {
								appLog.info("correct folder name is succesfully displayed");
							}
							else {
								appLog.error("folder name text present is wrong on upload window");
								sa.assertTrue(false, "folder name text present is wrong on upload window");
							}
							if (fp.getUploadWindowCancelBtn(60)!=null) {
								appLog.info("cancel button is successfully displayed");
							}
							else {
								appLog.error("cancel button is not displayed on upload window");
								sa.assertTrue(false,"cancel button is not displayed on upload window");
							}
							if (fp.getUploadSaveButton(60)!=null) {
								appLog.info("save button is successfully displayed");
							}
							else {
								appLog.error("save button is not displayed on upload window");
								sa.assertTrue(false, "save button is not displayed on upload window");
							}
						}
						else {
							appLog.error("upload document to folder text is not found");
							sa.assertTrue(false, "upload document to folder text is not found");
						}
						click(driver, fp.getUploadWindowCancelBtn( 30), "cancel button on upload file window", action.SCROLLANDBOOLEAN);
						appLog.info("successfully clicked on close button and closed window");

						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, bp.getFrame(PageName.FundsPage, 30));

						//clicking upload icon and click save button without file
						if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 60), "upload icon on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
							parentID = switchOnWindow(driver);

							if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {

									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if (msg.trim().equals(FundsPageErrorMessage.noDocumentUploaded)) {
										appLog.info("correct error message to upload document in correct area is found successfully");
									}
									else {
										appLog.error("error message to upload document in correct area is not found");
										sa.assertTrue(false, "error message to upload document in correct area is not found");
									}
								}
								else {
									appLog.error("alert message for save button is not found");
									sa.assertTrue(false, "alert message for save button is not found");
								}
								//drag and drop file in correct area
								if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "DropLoc.jpg")) {

									appLog.info("files are successfully dropped into upload section");
									if (fp.removeAllFilesUploadWindow(fp.getCrossIconListUploadDoc())) {
										appLog.info("crossed on all files uploaded");
									}
									else {
										appLog.error("could not click on some files cross icon");
										sa.assertTrue(false, "could not click on some files cross icon");
									}

									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(0), 10)!=null) {
										appLog.error(uploaded_files_list.get(0)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(0)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}
									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(1), 10)!=null) {
										appLog.error(uploaded_files_list.get(1)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(1)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}
									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(2), 10)!=null) {
										appLog.error(uploaded_files_list.get(2)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(2)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}
								}

								else {
									appLog.error("0 documents have been uploaded");
									sa.assertTrue(false, "0 documents have been uploaded");
								}
								//upload zero size documents
								if (fp.dragDropFiles("UploadFiles\\0sizeDocument", "DropLoc.jpg")) {
									ThreadSleep(5000);
									if (isAlertPresent(driver)) {

										String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
										switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
										if (msg.trim().equals(FundsPageErrorMessage.zeroSizeFile)) {
											appLog.info("correct error message that zero size file is not allowed");
										}
										else {
											appLog.error("zero size file error message is not found");
											sa.assertTrue(false, "zero size file error message is not found");
										}
									}
									else {
										appLog.error("error message for zero size file is not found");
										sa.assertTrue(false, "error message for zero size file is not found");
									}
								}
								else {
									appLog.error("no file has been uploaded");
									sa.assertTrue(false, "no file has been uploaded");
								}
								//uploaded documents on wrong area
								if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "wrong.png")) {
									ThreadSleep(5000);
									if (isAlertPresent(driver)) {

										String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
										switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
										if (msg.trim().equals(FundsPageErrorMessage.documentNotUploadedInUploadedArea)) {
											appLog.info("correct error message that document is not uploaded in correct area");
										}
										else {
											appLog.error("error message that document is not uploaded in correct area is not found");
											sa.assertTrue(false, "error message that document is not uploaded in correct area is not found");
										}
									}
									else {
										appLog.error("error alert is not found for wrong area dropping of files");
										sa.assertTrue(false, "error alert is not found for wrong area dropping of files");
									}
									driver.close();
									driver.switchTo().window(parentID);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								}
								else {
									appLog.error("drag and drop files on wrong area could not be done");
									sa.assertTrue(false,"drag and drop files on wrong area could not be done" );
								}

							}
							else {
								appLog.error("save button on upload window is not clickable");
								sa.assertTrue(false, "save button on upload window is not clickable");
							}
						}
						else {
							appLog.error("upload icon on funds page workspace is not clickable");
							sa.assertTrue(false, "upload icon on funds page workspace is not clickable");
						}

					}
					else {
						appLog.error("upload icon on funds page worskpace is not clickable");
						sa.assertTrue(false, "upload icon on funds page workspace is not clickable");
					}
				}
				else {
					appLog.error("Folder is not present in workspace");
					sa.assertTrue(false, "Folder is not present in workspace");
				}
			}
			else {
				appLog.error("fund is not found: "+M7FundName1);
				sa.assertTrue(false, "funds is not found: "+M7FundName1);
			}

		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Test
	public void M7tc053_3_UploadFileSharedNegative() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		String parentID=null;
		String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		String uploadFiles = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileShared);
		List<String> uploaded_files_list = createListOutOfString(uploadFiles);

		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		//lp.CRMLogin("pe2.2.1_trial3745_admin@navatarplatform.com", "navatar123");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M7FundName1)) {
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
				if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
					if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
						parentID = switchOnWindow(driver);
						if (fp.getUploadDocumentToFolderTextLabel(60).getText().trim().contains("Upload Document to Folder")) {
							appLog.info("Upload document to folder text is successfully found");
							WebElement shared_text = isDisplayed(driver, FindElement(driver, "//span[contains(text(),'"+shdPath+"')]", "shared folder name", action.SCROLLANDBOOLEAN,30), "visibility", 30, "shared folder name");
							if (shared_text!=null) {
								appLog.info("correct folder name is succesfully displayed");
							}
							else {
								appLog.error("folder name text present is wrong on upload window");
								sa.assertTrue(false, "folder name text present is wrong on upload window");
							}
							if (fp.getUploadWindowCancelBtn(60)!=null) {
								appLog.info("cancel button is successfully displayed");
							}
							else {
								appLog.error("cancel button is not displayed on upload window");
								sa.assertTrue(false,"cancel button is not displayed on upload window");
							}
							if (fp.getUploadSaveButton(60)!=null) {
								appLog.info("save button is successfully displayed");
							}
							else {
								appLog.error("save button is not displayed on upload window");
								sa.assertTrue(false, "save button is not displayed on upload window");
							}
						}
						else {
							appLog.error("upload document to folder text is not found");
							sa.assertTrue(false, "upload document to folder text is not found");
						}
						click(driver, fp.getUploadWindowCancelBtn( 30), "cancel button on upload file window", action.SCROLLANDBOOLEAN);
						appLog.info("successfully clicked on close button and closed window");

						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, bp.getFrame(PageName.FundsPage, 30));

						//clicking upload icon and click save button without file
						if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 60), "upload icon on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
							parentID = switchOnWindow(driver);

							if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {

									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if (msg.trim().equals(FundsPageErrorMessage.noDocumentUploaded)) {
										appLog.info("correct error message to upload document in correct area is found successfully");
									}
									else {
										appLog.error("error message to upload document in correct area is not found");
										sa.assertTrue(false, "error message to upload document in correct area is not found");
									}


								}
								else {
									appLog.error("alert message for save button is not found");
									sa.assertTrue(false, "alert message for save button is not found");
								}
								//drag and drop file in correct area
								if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "DropLoc.jpg")) {
									appLog.info("files are successfully dropped into upload section");
									if (fp.removeAllFilesUploadWindow(fp.getCrossIconListUploadDoc())) {
										appLog.info("crossed on all files uploaded");
									}
									else {
										appLog.error("could not click on some files cross icon");
										sa.assertTrue(false, "could not click on some files cross icon");
									}

									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(0), 10)!=null) {
										appLog.error(uploaded_files_list.get(0)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(0)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}
									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(1), 10)!=null) {
										appLog.error(uploaded_files_list.get(1)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(1)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}
									if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(2), 10)!=null) {
										appLog.error(uploaded_files_list.get(2)+ " is found even after clicking cancel button");
										sa.assertTrue(false, uploaded_files_list.get(2)+ " is found even after clicking cancel button");
									}
									else {
										appLog.info("file has been succesfully removed after clicking cross icon");
									}


								}


								else {
									appLog.error("0 documents have been uploaded");
									sa.assertTrue(false, "0 documents have been uploaded");
								}
								//upload zero size documents
								if (fp.dragDropFiles("UploadFiles\\0sizeDocument", "DropLoc.jpg")) {
									ThreadSleep(5000);
									if (isAlertPresent(driver)) {

										String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
										switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
										if (msg.trim().equals(FundsPageErrorMessage.zeroSizeFile)) {
											appLog.info("correct error message that zero size file is not allowed");
										}
										else {
											appLog.error("zero size file error message is not found");
											sa.assertTrue(false, "zero size file error message is not found");
										}
									}
									else {
										appLog.error("error message for zero size file is not found");
										sa.assertTrue(false, "error message for zero size file is not found");
									}
								}
								else {
									appLog.error("no file has been uploaded");
									sa.assertTrue(false, "no file has been uploaded");
								}
								//uploaded documents on wrong area
								if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "wrong.png")) {
									ThreadSleep(5000);
									if (isAlertPresent(driver)) {

										String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
										switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
										if (msg.trim().equals(FundsPageErrorMessage.documentNotUploadedInUploadedArea)) {
											appLog.info("correct error message that document is not uploaded in correct area");
										}
										else {
											appLog.error("error message that document is not uploaded in correct area is not found");
											sa.assertTrue(false, "error message that document is not uploaded in correct area is not found");
										}
									}
									else {
										appLog.error("error alert is not found for wrong area dropping of files");
										sa.assertTrue(false, "error alert is not found for wrong area dropping of files");
									}
									driver.close();
									driver.switchTo().window(parentID);

								}
								else {
									appLog.error("drag and drop files on wrong area could not be done");
									sa.assertTrue(false,"drag and drop files on wrong area could not be done" );
								}

							}
							else {
								appLog.error("save button on upload window is not clickable");
								sa.assertTrue(false, "save button on upload window is not clickable");
							}
						}
						else {
							appLog.error("upload icon on funds page workspace is not clickable");
							sa.assertTrue(false, "upload icon on funds page workspace is not clickable");
						}

					}
					else {
						appLog.error("upload icon on funds page worskpace is not clickable");
						sa.assertTrue(false, "upload icon on funds page workspace is not clickable");
					}
				}
				else {
					appLog.error("Folder is not present in workspace");
					sa.assertTrue(false, "Folder is not present in workspace");
				}
			}
			else{
				appLog.error("fund is not found: "+M7FundName1);
				sa.assertTrue(false, "funds is not found: "+M7FundName1);
			}
		}

		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}

@Test
	public void M7tc054_1_UploadFileActionAtCommonFolderFundPageCorrectly() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");


	SoftAssert saa = new SoftAssert();

	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
					excelLabel.CommonPath);
			String docpath = "UploadFiles\\Module8\\INV_CommonFolder";

			if (fp.uploadFile(cmnPath, null, docpath, null, UploadFileActions.Upload,
					Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
				appLog.info("File is upload successfullly");
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileCommon);

					if (filesName != null) {
						
						
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("File is not uploaded in " + cmnPath);
				sa.assertTrue(false, "File is not uploaded in " + cmnPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	switchToDefaultContent(driver);
	lp.CRMlogout();

	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc054_2_UploadFileImpactAtCommonFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	String	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
String dependsOnTc = "M7tc054_1_UploadFileActionAtCommonFolderFundPageCorrectly";

	SoftAssert saa = new SoftAssert();

	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.CommonPath);

	
		String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,dependsOnTc,
				excelLabel.UploadedFileCommon);
	
// Institution Tab
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);

				if (filesName != null) {

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + cmnPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	// Limited Tab
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
			appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			

			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);

			

				if (filesName != null) {

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified LP : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified LP : " + cmnPath);
			}

		} else {
			appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
	// Committment Tab
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.CommitmentsTab)) {
				if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
					appLog.info("Opened Commitment  : " + M7Commitment1ID);
					switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					

					if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + cmnPath);


						if (filesName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + cmnPath);
					}

				} else {
					appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
				}
			} else {
				appLog.error("Not able to Click Commitment tab ");
				sa.assertTrue(false, "Not able to Click Commitment tab ");
			}
			
			// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					

					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + cmnPath);


						if (filesName != null) {

		
							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + cmnPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			

	switchToDefaultContent(driver);
	lp.CRMlogout();
	
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc054_3_UploadFileImpactAtCommonFolderInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String dependsOnTc = "M7tc054_1_UploadFileActionAtCommonFolderFundPageCorrectly";


	SoftAssert saa = new SoftAssert();
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
		String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
				excelLabel.CommonPath);
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
					excelLabel.UploadedFileCommon);
		
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc055_1_UploadFileActionAtInternalFolderFundPageCorrectly() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);

	SoftAssert saa = new SoftAssert();
	
	String intFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.InternalPath);
	
	String filesName =null;
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			
			String docpath = "UploadFiles\\Module8\\INV_CommonFolder";

			if (fp.uploadFile(intFolder, null, docpath, null, UploadFileActions.Upload,
					Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
				appLog.info("File is upload successfullly");
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileInternal);

					if (filesName != null ) {
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("File is not uploaded in " + intFolder);
				sa.assertTrue(false, "File is not uploaded in " + intFolder);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	
	
	switchToDefaultContent(driver);
	
	
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc055_2_UploadFileImpactAtInternalFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String dependsOnTc = "M7tc055_1_UploadFileActionAtInternalFolderFundPageCorrectly";
	String intFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.InternalPath);
	
	String  filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.UploadedFileInternal);

	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	
	
	// Institution
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(intFolder, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + intFolder);

				
				if (filesName != null) {

					

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + intFolder);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + intFolder);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	// Limited 
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
			appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
		

			if (fp.verifyFolderPathdummy(intFolder, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + intFolder);

		

				if (filesName != null) {

				

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified LP : " + intFolder);
				sa.assertTrue(false, " Folder Structure Not Verified LP : " + intFolder);
			}

		} else {
			appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
	// Committment Tab
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.CommitmentsTab)) {
				if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
					appLog.info("Opened Commitment  : " + M7Commitment1ID);
					switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
				
					if (fp.verifyFolderPathdummy(intFolder, null, null, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + intFolder);


						if (filesName != null) {

							

							saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + intFolder);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + intFolder);
					}

				} else {
					appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
				}
			} else {
				appLog.error("Not able to Click Commitment tab ");
				sa.assertTrue(false, "Not able to Click Commitment tab ");
			}
			
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc056_1_UploadFileActionAtSharedFolderFundPageCorrectly() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String shdFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.SharedPath);
	
	String filesName =null;

	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			
			String docpath = "UploadFiles\\Module8\\INV_CommonFolder";

			if (fp.uploadFile(shdFolder, null, docpath, null, UploadFileActions.Upload,
					Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
				appLog.info("File is upload successfullly");
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileShared);

					if (filesName != null) {
						
					
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("File is not uploaded in " + shdFolder);
				sa.assertTrue(false, "File is not uploaded in " + shdFolder);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}

@Test
	public void M7tc056_2_UploadFileImpactAtSharedFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	

	String dependsOnTc = "M7tc056_1_UploadFileActionAtSharedFolderFundPageCorrectly";
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.UploadedFileShared);
	String shdFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.SharedPath);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	
	// Institution
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(shdFolder, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + shdFolder);

				 

				if (filesName != null) {

					

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + shdFolder);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + shdFolder);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	// Limited 
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
			appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
		

			if (fp.verifyFolderPathdummy(shdFolder, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + shdFolder);

				

				if (filesName != null) {

					date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified LP : " + shdFolder);
				sa.assertTrue(false, " Folder Structure Not Verified LP : " + shdFolder);
			}

		} else {
			appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
	// Committment Tab
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.CommitmentsTab)) {
				if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
					appLog.info("Opened Commitment  : " + M7Commitment1ID);
					switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
				
					if (fp.verifyFolderPathdummy(shdFolder, null, null, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + shdFolder);

					

						if (filesName != null) {

							date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

							saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + shdFolder);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + shdFolder);
					}

				} else {
					appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
				}
			} else {
				appLog.error("Not able to Click Commitment tab ");
				sa.assertTrue(false, "Not able to Click Commitment tab ");
			}
			
			// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					

					if (fp.verifyFolderPathdummy(shdFolder, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + shdFolder);


						if (filesName != null) {

							date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + shdFolder);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + shdFolder);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	//
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}

@Test
	public void M7tc056_3_UploadFileImpactAtSharedFolderInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String dependsOnTc = "M7tc056_1_UploadFileActionAtSharedFolderFundPageCorrectly";
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.UploadedFileShared);
	String shdFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.SharedPath);



	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
	
		if (fp.verifyFolderPathdummy(shdFolder, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdFolder);
			
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdFolder);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdFolder);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	sa.assertAll();
}

	@Test
	public void M7tc057_UploadFileStandardFolderSingleFolderNegative() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String parentID = null;
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String uploaded_files = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileStandard);
	List<String> uploaded_files_list = createListOutOfString(uploaded_files);
	String[] standardUploadText = {"Add to Single Institution", "Add to Multiple Institutions", "Use Bulk Uploader or File Splitter"};
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {

		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					if (parentID!=null) {
						if (fp.getUploadDocumentToFolderTextLabel(60).getText().trim().contains("Upload Document to Folder")) {
							appLog.info("Upload document to folder text is successfully found");
						}
						else {
							appLog.error("text for upload document to folder label is not correct");
							sa.assertTrue(false, "text for upload document to folder label is not correct");
						}
							WebElement standard_text = isDisplayed(driver, FindElement(driver, "//span[contains(text(),'"+stdPath+"')]", "standard folder name", action.SCROLLANDBOOLEAN,30), "visibility", 30, "standard folder name");
							if (standard_text!=null) {
								appLog.info("correct folder name is succesfully displayed");
							}
							else {
								appLog.error("folder name displayed is not correct");
								sa.assertTrue(false, "folder name displayed is not correct");
							}
							for (int i = 0;i<fp.standardFolderUploadWindowLabels().size();i++) {
								WebElement el = fp.standardFolderUploadWindowLabels().get(i);
								if (el.getText().trim().equals(standardUploadText[i])) {
									appLog.info(standardUploadText[i]+" Text in standard folder upload window is present");
								}
								else {
									appLog.error(standardUploadText[i]+"is not present");
									sa.assertTrue(false, standardUploadText[i]+"is not present");
								}
							}
							WebElement institution1=fp.uploadWindowInstitutionTextElementInvestorSide(M7Institution1,M7LimitedPartner1);
							if (institution1!=null) {
								appLog.info(M7Institution1+"/"+M7LimitedPartner1+" is present on institutions list");

								if (fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1,M7LimitedPartner1).isSelected()
										&& !fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1,M7LimitedPartner1).isEnabled()) {
									appLog.info(M7Institution1+"/"+M7LimitedPartner1+" checkbox is selected and Disabled by default");
								}
								else {
									appLog.error(M7Institution1+"/"+M7LimitedPartner1+" checkbox may not be selected and Disabled by default");
									sa.assertTrue(false, M7Institution1+"/"+M7LimitedPartner1+" checkbox may not be selected and Disabled by default");
								}

							}
							else {
								appLog.error(M7Institution1+"/"+M7LimitedPartner1+" is not displayed on upload window");
								sa.assertTrue(false, M7Institution1+"/"+M7LimitedPartner1+" is not displayed on upload window");
							}

							WebElement institution2=fp.uploadWindowInstitutionTextElementInvestorSide(M7Institution2,M7LimitedPartner2);
							if (institution2!=null) {
								appLog.info(M7Institution2+"/"+M7LimitedPartner2+" is present on institutions list");
								if (!fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2,M7LimitedPartner2).isSelected()
										&& !fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2,M7LimitedPartner2).isEnabled()) {
									appLog.info(M7Institution2+"/"+M7LimitedPartner2+" checkbox is not selected and Disabled by default");
								}
								else {
									appLog.error(M7Institution2+"/"+M7LimitedPartner2+" checkbox may not be selected and Disabled by default");
									sa.assertTrue(false, M7Institution2+"/"+M7LimitedPartner2+" checkbox may not be selected and Disabled by default");
								}

							}
							else {
								appLog.error(M7Institution2+"/"+M7LimitedPartner2+" is not displayed on upload window");
								sa.assertTrue(false, M7Institution2+"/"+M7LimitedPartner2+" is not displayed on upload window");
							}

							//click on cancel button
							click(driver, fp.getUploadStandard1stCancel(30), "cancel button on upload window", action.BOOLEAN);
							appLog.info("cancel button is successfully clicked");
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
						}
						else {
							appLog.error("could not find child window to switch");
							sa.assertTrue(false, "could not find child window to switch");
						}
						if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
							appLog.info("clicked on upload icon on fundraising workspace");
							parentID = switchOnWindow(driver);
							if (parentID!=null) {
								//click on next button to go to upload window
								if (click(driver, fp.getUploadNextButton(Workspace.InvestorWorkspace, 30), "next button in upload fundraising workspace", action.SCROLLANDBOOLEAN)) {
									//drag and drop file in correct area
									if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "DropLoc.jpg")) {

										appLog.info("files are successfully dropped into upload section");

										if (fp.removeAllFilesUploadWindow(fp.getCrossIconListUploadDoc())) {
											appLog.info("crossed on all files uploaded");
										}
										else {
											appLog.error("could not click on some files cross icon");
											sa.assertTrue(false, "could not click on some files cross icon");
										}
										if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(2),10)==null) {
											appLog.info(uploaded_files_list.get(2)+" file has been successfully removed after cliicking cross button");
										}
										else {
											appLog.error(uploaded_files_list.get(2)+" file has not been removed after clicking cross button");
											sa.assertTrue(false, uploaded_files_list.get(2)+" file has not been removed after clicking cross button");
										}
										if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(1),10)==null) {
											appLog.info(uploaded_files_list.get(1)+" file has been successfully removed after cliicking cross button");
										}
										else {
											appLog.error(uploaded_files_list.get(1)+" file has not been removed after clicking cross button");
											sa.assertTrue(false, uploaded_files_list.get(1)+" file has not been removed after clicking cross button");
										}
										if (fp.findPresentOrAbsentFileOnUploadWindow(uploaded_files_list.get(0),10)==null) {
											appLog.info(uploaded_files_list.get(0)+" file has been successfully removed after cliicking cross button");
										}
										else {
											appLog.error(uploaded_files_list.get(0)+" file has not been removed after clicking cross button");
											sa.assertTrue(false, uploaded_files_list.get(0)+" file has not been removed after clicking cross button");
										}

										//clicking cancel button to close window and go to 1st page of upload window
										click(driver, fp.getUploadWindowCancelBtn(60), "cancel button on upload window", action.SCROLLANDBOOLEAN);
									}
									else {
										appLog.error("drag and drop of files is not successful");
										sa.assertTrue(false, "drag and drop of files is not successful");
									}
								}
								else {
									appLog.error("next button on uplaod window is not clickable");
									sa.assertTrue(false, "next button on uplaod window is not clickable");
								}
								driver.switchTo().window(parentID);
								switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							}
							else {
								appLog.error("could not find child window to switch");
								sa.assertTrue(false, "could not find child window to switch");
							}
							
								if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
								}
								parentID = switchOnWindow(driver);
								if (parentID!=null) {
									//selecting multiple institutions radio button and check if all institutions checkboxes are enabled
									if (click(driver, fp.getMultipleInstituionRadioButton(60), "multiple institutions checkbox", action.SCROLLANDBOOLEAN)) {
										WebElement findDisabledCheckbox = isDisplayed(driver, FindElement(driver, "//input[@disabled='disabled']", "disabled checkbox", action.BOOLEAN, 10), "visibility", 10, "disabled checkbox");
										if (findDisabledCheckbox==null) {
											appLog.info("after clicking add to multiple institutions, all institutions checkboxes are now enabled");
										}
										else {
											appLog.error("all institutions checkboxes are not enabled after selecting multiple institutions");
											sa.assertTrue(false, "all institutions checkboxes are not enabled after selecting multiple institutions");
										}
									}
									else {
										appLog.error("multiple institutions radio button is not clickable");
										sa.assertTrue(false, "multiple institutions radio button is not clickable");
									}
									if (!fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1).isSelected()) {
										if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1), "upload window standard inst 1 checkbox", action.SCROLLANDBOOLEAN)) {
											appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
										}
									}
									else {
										appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
									}
									if (!fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2).isSelected()) {
										if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2), "upload window standard inst 2 checkbox", action.SCROLLANDBOOLEAN)) {
											appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
										}
									}
									else {
										appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
									}
									if (click(driver, fp.getUploadNextButton(Workspace.InvestorWorkspace, 30), "next button on upload window "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
										appLog.info("next button on upload window is succesfully clicked");
										if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
											ThreadSleep(5000);
											if (isAlertPresent(driver)) {

												String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
												switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
												if (msg.trim().equals(FundsPageErrorMessage.noDocumentUploaded)) {
													appLog.info("correct error message to upload document in correct area is found successfully");
												}
												else {
													appLog.error("error message to upload document in correct area is not found");
													sa.assertTrue(false, "error message to upload document in correct area is not found");
												}


											}
											else {
												appLog.error("no alert is present for no document present");
												sa.assertTrue(false, "no alert is present for no document present");
											}
										}
										else {
											appLog.error("save button is not clickable on upload window");
											sa.assertTrue(false, "save button is not clickable on upload window");
										}

										//upload zero size documents
										if (fp.dragDropFiles("UploadFiles\\0sizeDocument", "DropLoc.jpg")) {
											ThreadSleep(5000);
											if (isAlertPresent(driver)) {

												String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
												switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
												if (msg.trim().equals(FundsPageErrorMessage.zeroSizeFile)) {
													appLog.info("correct error message that zero size file is not allowed");
												}
												else {
													appLog.error("zero size file error message is not found");
													sa.assertTrue(false, "zero size file error message is not found");
												}
											}
											else {
												appLog.error("no alert is found when zero size document is uploaded");
												sa.assertTrue(false, "no alert is found when zero size document is uploaded");
											}
										}
										else {
											appLog.error("dragging and drop files was not successful for zero size file");
											sa.assertTrue(false, "dragging and drop files was not successful for zero size file");
										}



										//uploaded documents on wrong area
										if (fp.dragDropFiles("UploadFiles\\Module8\\UnsuccessfulUpload", "wrong.png")) {
											ThreadSleep(5000);
											if (isAlertPresent(driver)) {

												String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
												switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
												if (msg.trim().equals(FundsPageErrorMessage.documentNotUploadedInUploadedArea)) {
													appLog.info("correct error message that document is not uploaded in correct area");
												}
												else {
													appLog.error("error message that document is not uploaded in correct area is not found");
													sa.assertTrue(false, "error message that document is not uploaded in correct area is not found");
												}
											}
											else {
												appLog.error("error alert is not found for wrong area dropping of files");
												sa.assertTrue(false, "error alert is not found for wrong area dropping of files");
											}
										}
										else {
											appLog.error("dragging and drop was not successful for wrong area dropping of files");
											sa.assertTrue(false, "dragging and drop was not successful for wrong area dropping of files");
										}

									}
									else {
										appLog.error("next button on upload window is not clickable");
										sa.assertTrue(false, "next button on upload window is not clickable");
									}
									driver.close();
									driver.switchTo().window(parentID);
									switchToFrame(driver,30, fp.getFrame(PageName.FundsPage, 30));
								}
								else {
									appLog.error("could not find child window to switch");
									sa.assertTrue(false, "could not find child window to switch");
								}
							}
							else {
								appLog.error("upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
								sa.assertTrue(false, "upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
							}
						}
						else {
							appLog.error("upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
							sa.assertTrue(false, "upload icon is not clickable on "+Workspace.FundraisingWorkspace.toString());
						}
					}
					else {
						appLog.error("folder "+stdPath+" could not be found");
						sa.assertTrue(false, "folder "+stdPath+" could not be found");
					}
				}
				else {
					appLog.error("fund "+M7FundName1+"could not be found");
					sa.assertTrue(false, "fund "+M7FundName1+"could not be found");
				}
			}
			else {
				appLog.error("funds tab is not clickable");
				sa.assertTrue(false, "funds tab is not clickable");
			}
			switchToDefaultContent(driver);
			lp.CRMlogout();
			sa.assertAll();
		}

	@Test
	public void M7tc058_1_UploadFileActionAtStandardFolderFundPageCorrectly() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	String filesName =null;
	String insLpPath=M7Institution1+"/"+M7LimitedPartner1;

	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			
			String docpath = "UploadFiles\\Module8\\INV_CommonFolder";

			if (fp.uploadFile(stdPath, insLpPath, docpath, null, UploadFileActions.Upload,
					Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
				appLog.info("File is upload successfullly");
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileStandard);

					if (filesName != null) {
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("File is not uploaded in " + stdPath);
				sa.assertTrue(false, "File is not uploaded in " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();
}

@Test
	public void M7tc058_2_UploadFileImpactAtStandardFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String dependsOnTc = "M7tc058_1_UploadFileActionAtStandardFolderFundPageCorrectly";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.StandardPath);
	String filesName  = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
				excelLabel.UploadedFileStandard);


	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	
	// Institution
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				

				if (filesName != null) {

					date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	// Limited 
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
			appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
		

			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				

				if (filesName != null) {

				

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified LP : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified LP : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
	// Committment Tab
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.CommitmentsTab)) {
				if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
					appLog.info("Opened Commitment  : " + M7Commitment1ID);
					switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
				
					if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);


						if (filesName != null) {

						

							saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + stdPath);
					}

				} else {
					appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
				}
			} else {
				appLog.error("Not able to Click Commitment tab ");
				sa.assertTrue(false, "Not able to Click Commitment tab ");
			}
			
			// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					

					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);

						

						if (filesName != null) {


							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	//
			
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.combineAssertions(saa);
	sa.assertAll();
}
	
@Test
	public void M7tc058_3_UploadFileImpactAtStandardFolderInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String dependsOnTc = "M7tc058_1_UploadFileActionAtStandardFolderFundPageCorrectly";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.StandardPath);
	
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.UploadedFileStandard);
	


	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
	
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			 
		
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc059_MultipleInstitutionsStandardUploadNegative() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String parentID = null;
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String uploaded_file = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileStandard);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {

		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);

					if (click(driver, fp.getMultipleInstituionRadioButton(60), "multiple institutions checkbox", action.SCROLLANDBOOLEAN)) {

						if (!fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1).isSelected()) {
							if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1), "upload window standard inst 1 checkbox", action.SCROLLANDBOOLEAN)) {
								appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
							}
						}
						else {
							appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
						}
						if (!fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2).isSelected()) {
							if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2), "upload window standard inst 2 checkbox", action.SCROLLANDBOOLEAN)) {
								appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
							}
						}
						else {
							appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
						}
						
						
						if (click(driver, fp.getUploadNextButton(Workspace.InvestorWorkspace, 30), "upload next button", action.BOOLEAN)) {
							//checking if institutions is present in selected institutions tab in upload window
							WebElement institution1=fp.uploadWindowLimitedTextElementInvestorSide(M7LimitedPartner1);
							if (institution1!=null) {
								appLog.info(M7LimitedPartner1+" is  displayed on upload window");
								}
							else {
								appLog.error(M7LimitedPartner1+" is not displayed on upload window");
								sa.assertTrue(false,M7LimitedPartner1+" is not displayed on upload window");
							}
							
							WebElement institution2=fp.uploadWindowLimitedTextElementInvestorSide(M7LimitedPartner2);
							if (institution2!=null) {
								appLog.info(M7LimitedPartner2+" is  displayed on upload window");
								
							}
							else {
								appLog.error(M7LimitedPartner2+" is not displayed on upload window");
								sa.assertTrue(false, M7LimitedPartner2+" is not displayed on upload window");
							}
							if (fp.dragDropFiles("UploadFiles\\Module8\\MultipleInstUploadNegative", "DropLoc.jpg")) {

								appLog.info("files are successfully dropped into upload section");
								try {
									click(driver, fp.getUploadWindowCancelBtn(60), "cancel button on upload window", action.BOOLEAN);
								} catch (Exception e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								driver.switchTo().window(parentID);
								switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								//after clicking cancel button verify that file should not be uploaded

								List<String> el = compareMultipleList(driver,uploaded_file,fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage));
								if (!el.isEmpty()) {
									for (int i = 0;i<el.size();i++) {
										appLog.info("file is not available in content grid after clicking cancel in upload window: "+el.get(i));
										sa.assertTrue(true, el.get(i));
									}
								}else {
									appLog.info("no file is present on workspace, "+uploaded_file+" is not present");
									sa.assertTrue(false,uploaded_file+" is visible in "+Workspace.InvestorWorkspace.toString() +" content grid");
								}
							}
							else {
								appLog.error("files could not be dragged and dropped");
								sa.assertTrue(false, "files could not be dragged and dropped");
							}
						}
						else {
							appLog.error("next button on upload window is not clickable");
							sa.assertTrue(false, "next button on upload window is not clickable");
						}
					}
					else {
						appLog.error("multiple institutions radio button on upload window is not clickable");
						sa.assertTrue(false,"multiple institutions radio button on upload window is not clickable");
					}
				}
				else {
					appLog.error("upload icon is not clickable on "+Workspace.InvestorWorkspace.toString());
					sa.assertTrue(false, "upload icon is not clickable on "+Workspace.InvestorWorkspace.toString());
				}
			}

			else {
				appLog.error("folder path "+stdPath+" could not be found");
				sa.assertTrue(false, "folder path "+stdPath+" could not be found");

			}

			if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
				parentID = switchOnWindow(driver);
				if (click(driver, fp.getMultipleInstitutionsRbt(30), "multiple institutions radio button", action.SCROLLANDBOOLEAN)) {

					if (fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1).isSelected()) {
						if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1), "upload window standard inst 1 checkbox", action.SCROLLANDBOOLEAN)) {
							appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
						}
					}
					else {
						appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
					}
					if (fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2).isSelected()) {
						if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2), "upload window standard inst 2 checkbox", action.SCROLLANDBOOLEAN)) {
							appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
						}
					}
					else {
						appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
					}
					if (click(driver, fp.getUploadNextButton(Workspace.InvestorWorkspace, 30), "next button on upload window", action.SCROLLANDBOOLEAN)) {
						ThreadSleep(5000);
						if (isAlertPresent(driver)) {

							String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
							switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
							if (msg.trim().equals(FundsPageErrorMessage.pleaseSelectOneLP)) {
								appLog.info("Error Msg Verified : "+FundsPageErrorMessage.pleaseSelectOneLP);
							}
							else {
								appLog.error("Error Msg Not Verified : "+FundsPageErrorMessage.pleaseSelectOneLP);
								sa.assertTrue(false, "Error Msg Not Verified : "+FundsPageErrorMessage.pleaseSelectOneLP);
							}
						}
						else {
							appLog.error("alert is not present when no institution is selected and next is clicked");
							sa.assertTrue(false, "alert is not present when no institution is selected and next is clicked");
						}
					}
					else {
						appLog.error("next button on upload window is not clickable");
						sa.assertTrue(false, "next button on upload window is not clickable");
					}
					if (!fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1).isSelected()) {
						if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1), "upload window standard inst 1 checkbox", action.SCROLLANDBOOLEAN)) {
							appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
						}
					}
					else {
						appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
					}
					
					if (click(driver, fp.getUploadNextButton(Workspace.InvestorWorkspace, 30), "next button on upload window", action.SCROLLANDBOOLEAN)) {
						
					
						if (fp.dragDropFiles("UploadFiles\\Module8\\MultipleInstUploadNegative", "DropLoc.jpg")) {
							appLog.info("files are successfully dropped into upload section");
							if (click(driver, fp.getCrossIcon(uploaded_file,30), "cross icon in front of "+uploaded_file+" file", action.BOOLEAN)) {
								appLog.info("cross icon in front of "+uploaded_file+" has been successfully clicked");
							}
							else {
								appLog.error("cross icon in front of "+uploaded_file+" could not be found");
								sa.assertTrue(false, "cross icon in front of "+uploaded_file+" could not be found");
							}
							if (fp.getCrossIcon(uploaded_file,10)==null) {
								appLog.info("uploaded file has been removed from upload document window after clicking on cross icon");
							}
							//verify uploaded file is not present in workspace

							List<String> el = compareMultipleList(driver,uploaded_file,fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage));
							if (!el.isEmpty()) {
								for (int i = 0;i<el.size();i++) {
									appLog.info("file is not available in content grid after clicking cancel button in upload: "+el.get(i));
									sa.assertTrue(true, el.get(i));
								}
							}else {
								appLog.info("no file is present on workspace, "+uploaded_file+" is not present");
								sa.assertTrue(false,uploaded_file+" is visible in "+Workspace.InvestorWorkspace.toString() +" content grid");
							}
						}

						else {
							appLog.error("files could not be dragged and dropped before checking cross icon functionality");
							sa.assertTrue(false, "files could not be dragged and dropped before checking cross icon functionality");
						}
					}
					else {
						appLog.error("next button on upload window is not clickable");
						sa.assertTrue(false, "next button on upload window is not clickable");
					}
				}
				else {
					appLog.error("multiple institutions radio button is not clickable");
					sa.assertTrue(false, "multiple institutions radio button is not clickable");
				}
			}
			else {
				appLog.error("upload icon is not clickable on "+Workspace.InvestorWorkspace.toString());
				sa.assertTrue(false, "upload icon is not clickable on "+Workspace.InvestorWorkspace.toString());
			}
		}


		else {
			appLog.error("fund "+M7FundName1+ " is not found");
			sa.assertTrue(false, "fund "+M7FundName1+ " is not found");
		}
	}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}

	@Test
	public void M7tc060_1_UploadFileActionAtStandardFolderMultipleInstitutionFundPageCorrectly() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);

	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	String recordCountValue=null;
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	String filesName =null;
	String ins1Lp1Path=M7Institution1+"/"+M7LimitedPartner1;
	String ins2Lp2Path=M7Institution2+"/"+M7LimitedPartner2;

	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			
			String docpath = "UploadFiles\\Module8\\INV_Multiple";

			if (fp.uploadFile(stdPath, ins1Lp1Path+"<break>"+ins2Lp2Path, docpath, null, UploadFileActions.Upload,
					Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
				appLog.info("File is upload successfullly");
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					
					recordCountValue = fp.getRecordCountvalue(Workspace.InvestorWorkspace, 20);
					if(recordCountValue.contains(""+fp.getNoOfDocumentsOnGrid(Workspace.InvestorWorkspace, PageName.FundsPage))){
						appLog.error("Record Count Verified on "+PageName.FundsPage.toString()+" "+Workspace.InvestorWorkspace.toString());
							
					}else{
						appLog.error("Record Count not Verified on "+PageName.FundsPage.toString()+" "+Workspace.InvestorWorkspace.toString());
						sa.assertTrue(false, "Record Count not Verified on "+PageName.FundsPage.toString()+" "+Workspace.InvestorWorkspace.toString());	
					}
					
					 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileStandard);

					if (filesName != null) {
						
					
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}
					
					
					// M2I2 institution and then M2LP2
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					
					if (fp.verifyFolderPathdummy(stdPath, M7Institution2, M7LimitedPartner2, M7FundName1, PageName.FundsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + M7Institution2 + "/"+ M7LimitedPartner2 + "/" + stdPath);
						
						recordCountValue = fp.getRecordCountvalue(Workspace.InvestorWorkspace, 20);
						if(recordCountValue.contains(""+fp.getNoOfDocumentsOnGrid(Workspace.InvestorWorkspace, PageName.FundsPage))){
							appLog.info("Record Count Verified on "+PageName.FundsPage.toString()+" "+Workspace.InvestorWorkspace.toString());
								
						}else{
							appLog.error("Record Count not Verified on "+PageName.FundsPage.toString()+" "+Workspace.InvestorWorkspace.toString());
							sa.assertTrue(false, "Record Count not Verified on "+PageName.FundsPage.toString()+" "+Workspace.InvestorWorkspace.toString());	
						}

						
						}else{
							appLog.error(" Folder Structure Not Verified: " + M7Institution2 + "/"  + M7LimitedPartner2 + "/"+ stdPath);
							sa.assertTrue(false, " Folder Structure Not  Verified: " + M7Institution2 + "/" + M7LimitedPartner2+ "/"  + stdPath);	
						}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("File is not uploaded in " + stdPath);
				sa.assertTrue(false, "File is not uploaded in " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc060_2_UploadFileImpactAtStandardFolderMultipleInstitutionAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	String recordCountValue = null;
	

	String dependsOnTc = "M7tc060_1_UploadFileActionAtStandardFolderMultipleInstitutionFundPageCorrectly";
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.StandardPath);
	
	String  filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.UploadedFileStandard);

	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	
	
	// Institution1
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				
				 
				recordCountValue = fp.getRecordCountvalue(Workspace.InvestorWorkspace, 20);
				if(recordCountValue.contains(""+fp.getNoOfDocumentsOnGrid(Workspace.InvestorWorkspace, PageName.InstitutionsPage))){
					appLog.error("Record Count Verified on "+PageName.InstitutionsPage.toString()+" "+Workspace.InvestorWorkspace.toString());
							
					}else{
						appLog.error("Record Count not Verified on "+PageName.InstitutionsPage.toString()+" "+Workspace.InvestorWorkspace.toString());
						sa.assertTrue(false, "Record Count not Verified on "+PageName.InstitutionsPage.toString()+" "+Workspace.InvestorWorkspace.toString());	
					}

				if (filesName != null) {

		

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	
	switchToDefaultContent(driver);
	
	// Institution2
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution2)) {
			appLog.info("Opened Institution : " + M7Institution2);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner2, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				 
				recordCountValue = fp.getRecordCountvalue(Workspace.InvestorWorkspace, 20);
				if(recordCountValue.contains(""+fp.getNoOfDocumentsOnGrid(Workspace.InvestorWorkspace, PageName.InstitutionsPage))){
					appLog.error("Record Count Verified: Value is  "+recordCountValue+" -on- "+PageName.InstitutionsPage.toString()+" "+Workspace.InvestorWorkspace.toString());
							
					}else{
						appLog.error("Record Count not Verified on "+PageName.InstitutionsPage.toString()+" "+Workspace.InvestorWorkspace.toString());
						appLog.error("Actual : 2"+"         "+"Expected : "+recordCountValue);
						sa.assertTrue(false, "Record Count not Verified on "+PageName.InstitutionsPage.toString()+" "+Workspace.InvestorWorkspace.toString());	
					}

				if (filesName != null) {

					date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution2);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution2);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
			
			// Contact Tab
			//contact 1 to check inst1
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					

					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);
						
						recordCountValue = fp.getRecordCountvalue(Workspace.InvestorWorkspace, 20);
						if(recordCountValue.contains(""+fp.getNoOfDocumentsOnGrid(Workspace.InvestorWorkspace, PageName.ContactsPage))){
						appLog.error("Record Count Verified: Value is  "+recordCountValue+" -on- "+PageName.ContactsPage.toString()+" "+Workspace.InvestorWorkspace.toString());
									
						}else{
							appLog.error("Record Count not Verified on "+PageName.ContactsPage.toString()+" "+Workspace.InvestorWorkspace.toString());
							sa.assertTrue(false, "Record Count not Verified on "+PageName.ContactsPage.toString()+" "+Workspace.InvestorWorkspace.toString());	
						}


						if (filesName != null) {

							date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
					}
					switchToDefaultContent(driver);
				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
			
			//contact2 to check on inst 2
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact2FirstName, M7Contact2LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact2FirstName+" "+M7Contact2LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					
					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);
						
						if (filesName != null) {

							date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
					}
				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc060_3_UploadFileImpactAtStandardFolderMultipleInstitutionInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	String recordCountValue = null;
	

	String dependsOnTc = "M7tc060_1_UploadFileActionAtStandardFolderMultipleInstitutionFundPageCorrectly";
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.StandardPath);
	
	String  filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.UploadedFileStandard);

	
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
	
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			
			recordCountValue=ifp.getRecordCountvalue(investorSideWorkSpace.CurrentInvestment, 20);
			if(recordCountValue.contains(""+ifp.getNoOfDocumentsGrid(Workspace.InvestorWorkspace, PageName.CurrentInvestmentPgae))){
			appLog.error("Record Count Verified: Value is  "+recordCountValue+" -on- "+investorSideWorkSpace.CurrentInvestment.toString());
						
			}else{
				appLog.error("Record Count not Verified on "+investorSideWorkSpace.CurrentInvestment.toString());
				appLog.error("Expected : 9"+"         "+"Actual : "+recordCountValue);
				sa.assertTrue(false, "Record Count not Verified on "+investorSideWorkSpace.CurrentInvestment.toString());	
			}
	
		
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	
	driver.close();
	
	//Investor Side Contact2
	
	config(browserToLaunch);
	lp = new LoginPageBusinessLayer(driver);
	fp = new FundsPageBusinessLayer(driver);
	ifp = new InvestorFirmPageBusinesslayer(driver);
	lp.investorLogin(M7Contact2EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
	
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			
			recordCountValue = ifp.getRecordCountvalue(investorSideWorkSpace.CurrentInvestment,20);
			if(recordCountValue.contains(""+ifp.getNoOfDocumentsGrid(Workspace.InvestorWorkspace, PageName.CurrentInvestmentPgae))){
			appLog.error("Record Count Verified: Value is  "+recordCountValue+" -on- "+investorSideWorkSpace.CurrentInvestment.toString());
						
			}else{
				appLog.error("Record Count not Verified on "+investorSideWorkSpace.CurrentInvestment.toString());
				appLog.error("Expected : 2"+"         "+"Actual : "+recordCountValue);
				sa.assertTrue(false, "Record Count not Verified on "+investorSideWorkSpace.CurrentInvestment.toString());	
			}
		
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();

}

@Test
	public void M7tc061_UploadFileonStandardFolderNegativeCaseThroughInvestorPortal() {
	
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	FundsPageBusinessLayer fpb = new FundsPageBusinessLayer(driver);
	SoftAssert saa = new SoftAssert();
	WebElement ele = null;
	String msg = null;

	String docpath = "UploadFiles\\Module8\\InvSide_Files";
	String path = System.getProperty("user.dir") + "\\" + docpath + "\\";
	String[] filesName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.KeyWord_For_Search).split(",");
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	String parentWinID=null;

	lp.investorLogin(M7Contact1EmailId, adminPassword);
	
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {

		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae, null, 60)) {
			
			appLog.info(" Folder Structure Verified On Investor Side for " + " "
					+ investorSideWorkSpace.CurrentInvestment.toString() + " " + stdPath);

			if (click(driver, ifp.getUploadIcon(30), "Upload icon", action.SCROLLANDBOOLEAN)) {
				
				appLog.info(" Clicked on Upload Icon " + " " + investorSideWorkSpace.CurrentInvestment.toString()
						+ " " + stdPath);
				ThreadSleep(10000);
				 parentWinID = switchOnWindow(driver);
				 
				if (parentWinID != null) {
					
					appLog.info("Update window is successfully opened.");

					ele = fpb.getChooseFileButton(20);
					if (ele != null) {
						appLog.info(" Choose File Button is Present ");
					} else {
						appLog.error(" Choose File Button is Not Present ");
						saa.assertTrue(false, " Choose File Button is Not Present ");

					}

					ele = ifp.getcancelBtn(20);
					if (ele != null) {
						appLog.info(" Cancel Button is Present ");
					} else {
						appLog.error(" Cancel Button is Not Present ");
						saa.assertTrue(false, " Cancel Button is Not Present ");

					}

					ele = ifp.getAddButton(20);
					if (ele != null) {
						appLog.info(" Add Button is Present ");
						if (click(driver, ele, "Add Button", action.BOOLEAN)) {
							ele = ifp.getPleaseSelectDocToUpload(20);
							if (ele != null) {
								msg = ele.getText().trim();
								if (msg.equalsIgnoreCase(
										InvestorFirmPageErrorMessage.pleaseSelectAdocumentToUploadMsg)) {
									appLog.info(" Message Verified : " + msg);
								} else {
									appLog.error(" Message Not Verified  Actual : " + msg + "    " + "Expected : "
											+ InvestorFirmPageErrorMessage.pleaseSelectAdocumentToUploadMsg);
									saa.assertTrue(false, " Message Not Verified  Actual : " + msg + "    "
											+ "Expected : "
											+ InvestorFirmPageErrorMessage.pleaseSelectAdocumentToUploadMsg);
								}
							} else {
								appLog.error(" Msg element not Present ");
								saa.assertTrue(false, " Msg element not Present ");
							}

						} else {
							appLog.error(" Not Able to Click Add Button");
							saa.assertTrue(false, " Not Able to Click Add Button ");
						}

						if (sendKeys(driver, fpb.getChooseFileButton(60), path + filesName[0], "Choose Button",
								action.BOOLEAN)) {
							appLog.info(" Entered  Document path");

								click(driver, ifp.getcancelBtn(20), "Cancel ", action.BOOLEAN) ;
									appLog.info(" Click on Cancel Button");
									
								

						} else {
							appLog.error("Not Able to Send Document Path.");
							sa.assertTrue(false, "Not Able to Send Document Path.");
						}

					} else {
						appLog.error(" Add Button is Not Present ");
						saa.assertTrue(false, " Add Button is Not Present ");

					}
					driver.switchTo().window(parentWinID);
				} else {
					appLog.error("Upload Window is not Open");
					sa.assertTrue(false, "Upload Window is not Open");
				}
				
			} else {
				appLog.error(" Not Able to Click Upload Icon " + " "
						+ investorSideWorkSpace.CurrentInvestment.toString() + " " + stdPath);
				saa.assertTrue(false, " Not Able to Click Upload Icon " + " "
						+ investorSideWorkSpace.CurrentInvestment.toString() + " " + stdPath);

			}

			switchToDefaultContent(driver);
			ThreadSleep(5000);
			List<WebElement> docList = ifp.getDocListonInvestmentTab();
			List<String> docName = new ArrayList<String>();
			for (WebElement ele1 : docList) {
				docName.add(ele1.getText().trim());
			}
			appLog.info("Document List :  "+docName);
			if(!docName.contains(filesName[0])){
				appLog.info("Document Not Present In the Grid : "+filesName[0]);
				
			}else{
				appLog.error("Document  Present In the Grid : "+filesName[0]);
				sa.assertTrue(false, "Document  Present In the Grid : "+filesName[0]);
			}
			
		
			path = System.getProperty("user.dir") + "\\" + docpath + "\\";
			System.err.println("<<<<<<<Files Path>>>>>>>>> : "+path+filesName[1]);
			
			if (click(driver, ifp.getUploadIcon(30), "Uopload icon", action.SCROLLANDBOOLEAN)) {

				appLog.info(" Clicked on Upload Icon " + " " + investorSideWorkSpace.CurrentInvestment.toString()
						+ " " + stdPath);
				ThreadSleep(10000);
				parentWinID = switchOnWindow(driver);

				if (parentWinID != null) {

					appLog.info("Update window is successfully opened.");
					ThreadSleep(10000);
					
					if (sendKeys(driver, fpb.getChooseFileButton(60), path+filesName[1], "Choose Button", action.BOOLEAN)) {
						ThreadSleep(5000);
						if (click(driver, ifp.getAddButton(60), "Add button", action.BOOLEAN)) {
							
							ele = ifp.getDocAlreadyMsg(20);
							if (ele != null) {
								msg = ele.getText().trim();
								if (msg.equalsIgnoreCase(InvestorFirmPageErrorMessage.docAlreadyUploadedByOtherMsg)) {
									appLog.info("Already Uploaded BY Others Msg Verified ");
								} else {
									appLog.error("Already Uploaded BY Others Msg Verified  Expected: "
											+ InvestorFirmPageErrorMessage.docAlreadyUploadedByOtherMsg + " /tActual: " + msg);
									BaseLib.sa.assertTrue(false, "Update message is not verified. Expected: "
											+ InvestorFirmPageErrorMessage.docAlreadyUploadedByOtherMsg + " /t Actual: " + msg);
								}

							}else{
								appLog.error("Already uploaded By Other Element not Found");
								sa.assertTrue(false, "Already uploaded By Other Element not Found");	
							}
							
							if(click(driver, ifp.getDocAlreadyMsgCloseBtn(20), "Doc Already Msg Close Button", action.BOOLEAN));
							
							
							
						}else{
							appLog.error("Not Able to Click Add Button");
							sa.assertTrue(false, "Not Able to Add  Button");
						}
					} else {
						appLog.error("Not Able to Send Document Path.");
						sa.assertTrue(false, "Not Able to Send Document Path.");
					}

					driver.switchTo().window(parentWinID);
				} else {
					appLog.error("Upload Window is not Open");
					sa.assertTrue(false, "Upload Window is not Open");
				}

			} else {
				appLog.error(" Not Able to Click Upload Icon " + " "
						+ investorSideWorkSpace.CurrentInvestment.toString() + " " + stdPath);
				sa.assertTrue(false, " Not Able to Click Upload Icon " + " "
						+ investorSideWorkSpace.CurrentInvestment.toString() + " " + stdPath);

			}
			

		} else {
			appLog.error(" Folder Structure Not Verified On Investor Side for " + " "
					+ investorSideWorkSpace.CurrentInvestment.toString() + " " + stdPath);
			sa.assertTrue(false, " Folder Structure Not Verified On Investor Side for " + " "
					+ investorSideWorkSpace.CurrentInvestment.toString() + " " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	switchToDefaultContent(driver);
	lp.investorLogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc062_1_UploadFileActionaAtStandardFolder() {
	
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	SoftAssert saa = new SoftAssert();
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String docpath = "UploadFiles\\Module8\\InvSide_Files";
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.UploadedFileStandard);;
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
	
		if (ifp.uploadUpdateFileInvestorSide(stdPath, filesName, null, null, FolderType.Standard, docpath, "yes", 30,
				PageName.CurrentInvestmentPgae, null, null, WorkSpaceAction.UPLOAD)) {
			
			appLog.info("Upload Successful");
			
			if(click(driver, ifp.getRefreshIcon(20), "Refresh Icon", action.SCROLLANDBOOLEAN)){
				
			
				saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, M7Contact1FirstName + " " + M7Contact1LastName, date);
				sa.combineAssertions(saa);
				
			}else{
				appLog.error("Not Able to Click Refresh Icon so Cannot check Upoaded File");
				sa.assertTrue(false, "Not Able to Click Refresh Icon so Cannot check Upoaded File");	
			}
			
			
		}else{
			appLog.error("Upload Unsuccessful");
			sa.assertTrue(false, "Upload Unsuccessful");	
		}

			
	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	sa.combineAssertions(saa);
	sa.assertAll();
	
}

@Test
	public void M7tc062_2_UploadFileImpactAtStandardFolderCRMSide() {
	
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	BasePageBusinessLayer bp =new BasePageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	SoftAssert saa = new SoftAssert();
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	String dependsOnTc = "M7tc062_1_UploadFileActionaAtStandardFolder";
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.UploadedFileStandard);;
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.StandardPath);
	
	

	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			
		
			if(fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FirmName, PageName.FundsPage, Workspace.InvestorWorkspace, 60))
			{
			
				appLog.info("Folder Verified : "+stdPath);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
				

					if (filesName != null) {
						
					
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", M7Contact1FirstName + " " + M7Contact1LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("Folder Structure not Verified " + stdPath);
				sa.assertTrue(false, "Folder Structure not Verified " + stdPath);
			}
				
			}else{
				appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
				sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);	
			}
		
				

		} else {
			appLog.info("Not Able to Click Fund Tab");
			sa.assertTrue(false, "Not Able to Click Fund Tab");
		}
	
	
	// Institution1
	
		switchToDefaultContent(driver);
		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedInstitution(M7Institution1)) {
				appLog.info("Opened Institution : " + M7Institution1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
				
				if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
						Workspace.InvestorWorkspace, 60)) {
					
					appLog.info(" Folder Structure Verified: " + stdPath);
					
					if (filesName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", M7Contact1FirstName + " " + M7Contact1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
		
		
		// Limited 
		switchToDefaultContent(driver);
		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
				appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
			

				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);

					if (filesName != null) {

						
						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", M7Contact1FirstName + " " + M7Contact1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified LP : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified LP : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
				sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
		

		// Contact Tab
		
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
				appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
				

				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);
					
				

					if (filesName != null) {

					

						saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", M7Contact1FirstName + " " + M7Contact1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			}
		} else {
			appLog.error("Not able to Click Contact tab ");
			sa.assertTrue(false, "Not able to Click Contact tab ");
		}

		
		// Committment Tab
		
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.CommitmentsTab)) {
			if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
				appLog.info("Opened Commitment  : " + M7Commitment1ID);
				switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
			
				if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, null, PageName.CommitmentsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);


					if (filesName != null) {

				

						saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", M7Contact1FirstName + " " + M7Contact1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified  for Commitment : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
				sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
			}
		} else {
			appLog.error("Not able to Click Commitment tab ");
			sa.assertTrue(false, "Not able to Click Commitment tab ");
		}

	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	
}

@Test
	public void M7tc063_1_UploadAlreadyExistingFileCommon() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String parentID=null;
	
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String duplicateFile = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileCommon);
	
	
	String dragFromFolder = "UploadFiles\\Module8\\ExistingUpload";
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
			if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
				parentID = switchOnWindow(driver);
				if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
					if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
						//check heading of duplicate documents
						if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
							appLog.info("duplicate documents heading is successfully verified");
						}
						else {
							appLog.error("duplicate documents heading is not present");
							sa.assertTrue(false, "duplicate documents heading is not present");
						}
						if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
							appLog.info("duplicate documents sub heading is successfully verified");
						}
						else {
							appLog.error("duplicate documents sub heading is not present");
							sa.assertTrue(false, "duplicate documents sub heading is not present");
						}
						if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
							appLog.info("folder location sub heading is successfully verified");
						}
						else {
							appLog.error("folder location sub heading is not visible");
							sa.assertTrue(false, "folder location sub heading is not visible");
						}
						if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
							appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
						}
						else {
							appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
						}
						if (fp.getUpdateAllButton(60)!=null) {
							appLog.info("update all button is present");
						}
						else {
							appLog.error("update all button is not present on duplicate document window");
							sa.assertTrue(false, "update all button is not present on duplicate document window");
						}
						if (fp.getIgnoreAllButton(60)!=null) {
							appLog.info("ignore all button is successfully present");
						}
						else {
							appLog.error("ignore all button is not present on duplicate docuemnts heading");
							sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
						}
						if (fp.getDuplicateDocumentValue(60).getText().trim().equals(duplicateFile)) {
							appLog.info(duplicateFile + " is duplicate according to alert window");
						}
						else {
							appLog.error("duplicate file name name is wrong on duplicate document window");
							sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
						}
						if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > "+cmnPath)) {
							appLog.info("folder name" + M7FundName1 + " > "+cmnPath+" for duplicate files is correct");
						}
						else {
							appLog.error("folder path for duplicate files is wrong");
							sa.assertTrue(false, "folder path for duplicate files is wrong");
						}
						try {
							click(driver, fp.getIgnoreAllButton(60), "ignore all button in duplicate document window", action.SCROLLANDBOOLEAN);
							appLog.info("Clicked Ignore All Button");
						} catch (Exception e) {
							appLog.error("Not Able to Click Ignore All Button");
						}ThreadSleep(5000);	
						driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),"refresh button", action.SCROLLANDBOOLEAN)) {
									//verify upload1.pdf is present
									
									List<WebElement> docList = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
									List<String> docName = new ArrayList<String>();
									for (WebElement ele1 : docList) {
										docName.add(ele1.getText().trim());
									}
									appLog.info("Document List :  "+docName);
									if(!docName.contains(duplicateFile)){
										appLog.error("Document Not Present In the Grid : "+duplicateFile);
										sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
										
									}else{
										appLog.info("Document  Present In the Grid : "+duplicateFile);
										
									}
									
								}
								if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
								parentID = switchOnWindow(driver);
								if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
									if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
										if (click(driver, fp.getUpdateAllButton(60), "update all button on duplicate documents window", action.SCROLLANDBOOLEAN)) {
											ThreadSleep(5000);
											if (isAlertPresent(driver)) {
											
											String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
											switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
											if (msg.trim().equals(FundsPageErrorMessage.documentUpldSuccessfully)) {
												appLog.info("correct alert for document upload is found successfully");
											}
											else {
												appLog.error("correct document upload alert is not found");
												sa.assertTrue(false, "correct document upload alert is not found");
											}
											
											
											driver.switchTo().window(parentID);
											switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
											if (click(driver,fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid funds page", action.SCROLLANDBOOLEAN)) {
												//verify upload1.pdf is present
												
												List<WebElement> docList = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
												List<String> docName = new ArrayList<String>();
												for (WebElement ele1 : docList) {
													docName.add(ele1.getText().trim());
												}
												appLog.info("Document List :  "+docName);
												if(!docName.contains(duplicateFile)){
													appLog.error("Document Not Present In the Grid : "+duplicateFile);
													sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
												}else{
													appLog.info("Document  Present In the Grid : "+duplicateFile);
													
												}
												
												}
											
											else {
												appLog.error("content grid refresh button is not clickable");
												sa.assertTrue(false, "content grid refresh button is not clickable");
											}
											}
											else {
												appLog.error("alert is not present for successfully upload of documents");
												sa.assertTrue(false, "alert is not present for successfully upload of documents");
											}
										}
										else {
											appLog.error("update all button is not clickable on duplicate documents window");
											sa.assertTrue(false, "update all button is not clickable on duplicate documents window");
										}
									}
									else {
										appLog.error("save button is not clickable on upload window");
										sa.assertTrue(false, "save button is not clickable on upload window");
									}
								}
								else {
									appLog.error("drag and drop of files is not successful");
									sa.assertTrue(false, "drag and drop of files is not successful");
								}
								}
								else {
									appLog.error("upload icon on "+Workspace.InvestorWorkspace.toString() +" is not clickable");
									sa.assertTrue(false, "upload icon on "+Workspace.InvestorWorkspace.toString() +" is not clickable");
								}
							
							}
					else {
						appLog.error("save button on upload documents window is not clickable");
						sa.assertTrue(false, "save button on upload documents window is not clickable");
					}
						}
				else {
					appLog.error("drag and drop of files is not successful");
					sa.assertTrue(false, "drag and drop of files is not successful");
				}
					}
			else {
				appLog.error("upload icon is not clickable on "+Workspace.InvestorWorkspace.toString());
				sa.assertTrue(false, "upload icon is not clickable on "+Workspace.InvestorWorkspace.toString());
				
			}
				}
			else {
				appLog.error("folder "+ cmnPath+ " is not found on workspace");
				sa.assertTrue(false, "folder "+ cmnPath+ " is not found on workspace");
			}
			}
		else {
			appLog.error("funds "+ M7FundName1 + " is not found on funds page");
			sa.assertTrue(false, "funds "+ M7FundName1 + " is not found on funds page");
		}
			}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
		}

@Test
	public void M7tc063_2_UploadAlreadyExistingFileInternal() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String parentID=null;
	
	
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	String duplicateFile = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileInternal);
	
	String dragFromFolder = "UploadFiles\\Module8\\ExistingUpload";
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
			if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
				parentID = switchOnWindow(driver);
				if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
					if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
						//check heading of duplicate documents
						if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
							appLog.info("duplicate documents heading is successfully verified");
						}
						else {
							appLog.error("duplicate documents heading is not present");
							sa.assertTrue(false, "duplicate documents heading is not present");
						}
						if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
							appLog.info("duplicate documents sub heading is successfully verified");
						}
						else {
							appLog.error("duplicate documents sub heading is not present");
							sa.assertTrue(false, "duplicate documents sub heading is not present");
						}
						if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
							appLog.info("folder location sub heading is successfully verified");
						}
						else {
							appLog.error("folder location sub heading is not visible");
							sa.assertTrue(false, "folder location sub heading is not visible");
						}
						if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
							appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
						}
						else {
							appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
						}
						if (fp.getUpdateAllButton(60)!=null) {
							appLog.info("update all button is present");
						}
						else {
							appLog.error("update all button is not present on duplicate document window");
							sa.assertTrue(false, "update all button is not present on duplicate document window");
						}
						if (fp.getIgnoreAllButton(60)!=null) {
							appLog.info("ignore all button is successfully present");
						}
						else {
							appLog.error("ignore all button is not present on duplicate docuemnts heading");
							sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
						}
						if (fp.getDuplicateDocumentValue(60).getText().trim().equals(duplicateFile)) {
							appLog.info(duplicateFile + " is duplicate according to alert window");
						}
						else {
							appLog.error("duplicate file name name is wrong on duplicate document window");
							sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
						}
						if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1+" > " + intPath)) {
							appLog.info("folder name"+M7FundName1+" > " + intPath+" for duplicate files is correct");
						}
						else {
							appLog.error("folder path for duplicate files is wrong");
							sa.assertTrue(false, "folder path for duplicate files is wrong");
						}
						try {
							click(driver, fp.getIgnoreAllButton(60), "ignore all button in duplicate document window", action.SCROLLANDBOOLEAN);
							appLog.info("Clicked Ignore All Button");
						} catch (Exception e) {
							appLog.error("Not Able to Click Ignore All Button");
						}ThreadSleep(5000);	
						driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),"refresh button", action.SCROLLANDBOOLEAN)) {
									//verify upload1.pdf is present
									
									List<WebElement> docList = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
									List<String> docName = new ArrayList<String>();
									for (WebElement ele1 : docList) {
										docName.add(ele1.getText().trim());
									}
									appLog.info("Document List :  "+docName);
									if(!docName.contains(duplicateFile)){
										appLog.error("Document Not Present In the Grid : "+duplicateFile);
										sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
										
									}else{
										appLog.info("Document  Present In the Grid : "+duplicateFile);
										
									}
									
								}
								if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
								parentID = switchOnWindow(driver);
								if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
									if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
										if (click(driver, fp.getUpdateAllButton(60), "update all button on duplicate documents window", action.SCROLLANDBOOLEAN)) {
											ThreadSleep(5000);
											if (isAlertPresent(driver)) {
											
											String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
											switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
											if (msg.trim().equals(FundsPageErrorMessage.documentUpldSuccessfully)) {
												appLog.info("correct alert for document upload is found successfully");
											}
											else {
												appLog.error("correct document upload alert is not found");
												sa.assertTrue(false, "correct document upload alert is not found");
											}
											
											
											driver.switchTo().window(parentID);
											switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
											if (click(driver,fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid funds page", action.SCROLLANDBOOLEAN)) {
												//verify upload1.pdf is present
												
												List<WebElement> docList = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
												List<String> docName = new ArrayList<String>();
												for (WebElement ele1 : docList) {
													docName.add(ele1.getText().trim());
												}
												appLog.info("Document List :  "+docName);
												if(!docName.contains(duplicateFile)){
													appLog.error("Document Not Present In the Grid : "+duplicateFile);
													sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
												}else{
													appLog.info("Document  Present In the Grid : "+duplicateFile);
													
												}
												
												}
											
											else {
												appLog.error("content grid refresh button is not clickable");
												sa.assertTrue(false, "content grid refresh button is not clickable");
											}
											}
											else {
												appLog.error("alert is not present for successfully upload of documents");
												sa.assertTrue(false, "alert is not present for successfully upload of documents");
											}
										}
										else {
											appLog.error("update all button is not clickable on duplicate documents window");
											sa.assertTrue(false, "update all button is not clickable on duplicate documents window");
										}
									}
									else {
										appLog.error("save button is not clickable on upload window");
										sa.assertTrue(false, "save button is not clickable on upload window");
									}
								}
								else {
									appLog.error("drag and drop of files is not successful");
									sa.assertTrue(false, "drag and drop of files is not successful");
								}
								}
								else {
									appLog.error("upload icon on "+Workspace.InvestorWorkspace.toString() +" is not clickable");
									sa.assertTrue(false, "upload icon on "+Workspace.InvestorWorkspace.toString() +" is not clickable");
								}
							}
					else {
						appLog.error("save button on upload documents window is not clickable");
						sa.assertTrue(false, "save button on upload documents window is not clickable");
					}
						}
				else {
					appLog.error("drag and drop of files is not successful");
					sa.assertTrue(false, "drag and drop of files is not successful");
				}
					}
			else {
				appLog.error("upload icon is not clickable on "+Workspace.InvestorWorkspace.toString());
				sa.assertTrue(false, "upload icon is not clickable on "+Workspace.InvestorWorkspace.toString());
				
			}
				}
			else {
				appLog.error("folder "+ intPath+ " is not found on workspace");
				sa.assertTrue(false, "folder "+ intPath+ " is not found on workspace");
			}
			}
		else {
			appLog.error("funds "+ M7FundName1 + " is not found on funds page");
			sa.assertTrue(false, "funds "+ M7FundName1 + " is not found on funds page");
		}
			}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}

@Test
	public void M7tc063_3_UploadAlreadyExistingFileShared() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String parentID=null;

	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String duplicateFile = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileShared);
	
	 
	String dragFromFolder = "UploadFiles\\Module8\\ExistingUpload";
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
			if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
				parentID = switchOnWindow(driver);
				if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
					if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
						//check heading of duplicate documents
						if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
							appLog.info("duplicate documents heading is successfully verified");
						}
						else {
							appLog.error("duplicate documents heading is not present");
							sa.assertTrue(false, "duplicate documents heading is not present");
						}
						if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
							appLog.info("duplicate documents sub heading is successfully verified");
						}
						else {
							appLog.error("duplicate documents sub heading is not present");
							sa.assertTrue(false, "duplicate documents sub heading is not present");
						}
						if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
							appLog.info("folder location sub heading is successfully verified");
						}
						else {
							appLog.error("folder location sub heading is not visible");
							sa.assertTrue(false, "folder location sub heading is not visible");
						}
						if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
							appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
						}
						else {
							appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
						}
						if (fp.getUpdateAllButton(60)!=null) {
							appLog.info("update all button is present");
						}
						else {
							appLog.error("update all button is not present on duplicate document window");
							sa.assertTrue(false, "update all button is not present on duplicate document window");
						}
						if (fp.getIgnoreAllButton(60)!=null) {
							appLog.info("ignore all button is successfully present");
						}
						else {
							appLog.error("ignore all button is not present on duplicate docuemnts heading");
							sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
						}
						if (fp.getDuplicateDocumentValue(60).getText().trim().equals(duplicateFile)) {
							appLog.info(duplicateFile + " is duplicate according to alert window");
						}
						else {
							appLog.error("duplicate file name name is wrong on duplicate document window");
							sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
						}
						if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > " +shdPath)) {
							appLog.info("folder name "+M7FundName1 + " > " +shdPath+"for duplicate files is correct");
						}
						else {
							appLog.error("folder path for duplicate files is wrong");
							sa.assertTrue(false, "folder path for duplicate files is wrong");
						}
						try {
							click(driver, fp.getIgnoreAllButton(60), "ignore all button in duplicate document window", action.SCROLLANDBOOLEAN);
							appLog.info("Clicked Ignore All Button");
						} catch (Exception e) {
							appLog.error("Not Able to Click Ignore All Button");
						}ThreadSleep(5000);
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),"refresh button", action.SCROLLANDBOOLEAN)) {
									//verify upload1.pdf is present
									
									List<WebElement> docList = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
									List<String> docName = new ArrayList<String>();
									for (WebElement ele1 : docList) {
										docName.add(ele1.getText().trim());
									}
									appLog.info("Document List :  "+docName);
									if(!docName.contains(duplicateFile)){
										appLog.error("Document Not Present In the Grid : "+duplicateFile);
										sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
										
									}else{
										appLog.info("Document  Present In the Grid : "+duplicateFile);
										
									}
									
								}
								if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
								parentID = switchOnWindow(driver);
								if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
									if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
										if (click(driver, fp.getUpdateAllButton(60), "update all button on duplicate documents window", action.SCROLLANDBOOLEAN)) {
											ThreadSleep(5000);
											if (isAlertPresent(driver)) {
											
											String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
											switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
											if (msg.trim().equals(FundsPageErrorMessage.documentUpldSuccessfully)) {
												appLog.info("correct alert for document upload is found successfully");
											}
											else {
												appLog.error("correct document upload alert is not found");
												sa.assertTrue(false, "correct document upload alert is not found");
											}
											
											
											driver.switchTo().window(parentID);
											switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
											if (click(driver,fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid funds page", action.SCROLLANDBOOLEAN)) {
												//verify upload1.pdf is present
												
												List<WebElement> docList = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
												List<String> docName = new ArrayList<String>();
												for (WebElement ele1 : docList) {
													docName.add(ele1.getText().trim());
												}
												appLog.info("Document List :  "+docName);
												if(!docName.contains(duplicateFile)){
													appLog.error("Document Not Present In the Grid : "+duplicateFile);
													sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
												}else{
													appLog.info("Document  Present In the Grid : "+duplicateFile);
													
												}
												
												}
											
											else {
												appLog.error("content grid refresh button is not clickable");
												sa.assertTrue(false, "content grid refresh button is not clickable");
											}
											}
											else {
												appLog.error("alert is not present for successfully upload of documents");
												sa.assertTrue(false, "alert is not present for successfully upload of documents");
											}
										}
										else {
											appLog.error("update all button is not clickable on duplicate documents window");
											sa.assertTrue(false, "update all button is not clickable on duplicate documents window");
										}
									}
									else {
										appLog.error("save button is not clickable on upload window");
										sa.assertTrue(false, "save button is not clickable on upload window");
									}
								}
								else {
									appLog.error("drag and drop of files is not successful");
									sa.assertTrue(false, "drag and drop of files is not successful");
								}
								}
								else {
									appLog.error("upload icon on "+Workspace.InvestorWorkspace.toString() +" is not clickable");
									sa.assertTrue(false, "upload icon on "+Workspace.InvestorWorkspace.toString() +" is not clickable");
								}
							
						
							}
					else {
						appLog.error("save button on upload documents window is not clickable");
						sa.assertTrue(false, "save button on upload documents window is not clickable");
					}
						}
				else {
					appLog.error("drag and drop of files is not successful");
					sa.assertTrue(false, "drag and drop of files is not successful");
				}
					}
			else {
				appLog.error("upload icon is not clickable on "+Workspace.InvestorWorkspace.toString());
				sa.assertTrue(false, "upload icon is not clickable on "+Workspace.InvestorWorkspace.toString());
				
			}
				}
			else {
				appLog.error("folder "+ shdPath+ " is not found on workspace");
				sa.assertTrue(false, "folder "+ shdPath+ " is not found on workspace");
			}
			}
		else {
			appLog.error("funds "+ M7FundName1 + " is not found on funds page");
			sa.assertTrue(false, "funds "+ M7FundName1 + " is not found on funds page");
		}
			}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}

@Test
	public void M7tc063_4_UploadAlreadyExistingFileStandardSingleInstitution() {
	
LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
String parentID=null;
SoftAssert sa = new SoftAssert();
String standardPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
String duplicateFile = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);

 
String dragFromFolder = "UploadFiles\\Module8\\ExistingUpload";
lp.CRMLogin(CRMUser1EmailID, adminPassword);
if (bp.clickOnTab(TabName.FundsTab)) {
	if (fp.clickOnCreatedFund(M7FundName1)) {
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
		if (fp.verifyFolderPathdummy(standardPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
		if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
			parentID = switchOnWindow(driver);
			if (click(driver, fp.getUploadNextButton(Workspace.InvestorWorkspace, 30),"next button on upload window standard folder", action.SCROLLANDBOOLEAN)) {
				
			
			if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
				if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
					//check heading of duplicate documents
					if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
						appLog.info("duplicate documents heading is successfully verified");
					}
					else {
						appLog.error("duplicate documents heading is not present");
						sa.assertTrue(false, "duplicate documents heading is not present");
					}
					if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
						appLog.info("duplicate documents sub heading is successfully verified");
					}
					else {
						appLog.error("duplicate documents sub heading is not present");
						sa.assertTrue(false, "duplicate documents sub heading is not present");
					}
					if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
						appLog.info("folder location sub heading is successfully verified");
					}
					else {
						appLog.error("folder location sub heading is not visible");
						sa.assertTrue(false, "folder location sub heading is not visible");
					}
					if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
						appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
					}
					else {
						appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
					}
					if (fp.getUpdateAllButton(60)!=null) {
						appLog.info("update all button is present");
					}
					else {
						appLog.error("update all button is not present on duplicate document window");
						sa.assertTrue(false, "update all button is not present on duplicate document window");
					}
					if (fp.getIgnoreAllButton(60)!=null) {
						appLog.info("ignore all button is successfully present");
					}
					else {
						appLog.error("ignore all button is not present on duplicate docuemnts heading");
						sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
					}
					if (fp.getDuplicateDocumentValue(60).getText().trim().equals(duplicateFile)) {
						appLog.info(duplicateFile + " is duplicate according to alert window");
					}
					else {
						appLog.error("duplicate file name name is wrong on duplicate document window");
						sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
					}
					if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > " + M7Institution1+" > "+ M7LimitedPartner1+" > "  + standardPath)) {
						appLog.info("folder name for duplicate files is correct");
					}
					else {
						appLog.error("folder path for duplicate files is wrong");
						sa.assertTrue(false, "folder path for duplicate files is wrong");
					}
					try {
						click(driver, fp.getIgnoreAllButton(60), "ignore all button in duplicate document window", action.SCROLLANDBOOLEAN);
						appLog.info("Clicked Ignore All Button");
					} catch (Exception e) {
						appLog.error("Not Able to Click Ignore All Button");
					}ThreadSleep(5000);	
					driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),"refresh button", action.SCROLLANDBOOLEAN)) {
								//verify upload1.pdf is present
								
								List<WebElement> docList = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
								List<String> docName = new ArrayList<String>();
								for (WebElement ele1 : docList) {
									docName.add(ele1.getText().trim());
								}
								appLog.info("Document List :  "+docName);
								if(!docName.contains(duplicateFile)){
									appLog.error("Document Not Present In the Grid : "+duplicateFile);
									sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
									
								}else{
									appLog.info("Document  Present In the Grid : "+duplicateFile);
									
								}
								
							}
							if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
							parentID = switchOnWindow(driver);
							if (click(driver, fp.getUploadNextButton(Workspace.InvestorWorkspace, 30),"next button on upload window standard folder", action.SCROLLANDBOOLEAN)) {
							if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
								if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
									if (click(driver, fp.getUpdateAllButton(60), "update all button on duplicate documents window", action.SCROLLANDBOOLEAN)) {
										ThreadSleep(5000);
										if (isAlertPresent(driver)) {
										
										String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
										switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
										if (msg.trim().equals(FundsPageErrorMessage.documentUpldSuccessfully)) {
											appLog.info("correct alert for document upload is found successfully");
										}
										else {
											appLog.error("correct document upload alert is not found");
											sa.assertTrue(false, "correct document upload alert is not found");
										}
										
										
										driver.switchTo().window(parentID);
										switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
										if (click(driver,fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid funds page", action.SCROLLANDBOOLEAN)) {
											//verify upload1.pdf is present
											
											List<WebElement> docList = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
											List<String> docName = new ArrayList<String>();
											for (WebElement ele1 : docList) {
												docName.add(ele1.getText().trim());
											}
											appLog.info("Document List :  "+docName);
											if(!docName.contains(duplicateFile)){
												appLog.error("Document Not Present In the Grid : "+duplicateFile);
												sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
											}else{
												appLog.info("Document  Present In the Grid : "+duplicateFile);
												
											}
											
											}
										
										else {
											appLog.error("content grid refresh button is not clickable");
											sa.assertTrue(false, "content grid refresh button is not clickable");
										}
										}
										else {
											appLog.error("alert is not present for successfully upload of documents");
											sa.assertTrue(false, "alert is not present for successfully upload of documents");
										}
									}
									else {
										appLog.error("update all button is not clickable on duplicate documents window");
										sa.assertTrue(false, "update all button is not clickable on duplicate documents window");
									}
								}
								else {
									appLog.error("save button is not clickable on upload window");
									sa.assertTrue(false, "save button is not clickable on upload window");
								}
							}
							else {
								appLog.error("drag and drop of files is not successful");
								sa.assertTrue(false, "drag and drop of files is not successful");
							}
							}
							else {
								appLog.error("next button on upload window is not clickable");
								sa.assertTrue(false, "next button on upload window is not clickable");
							}
							}
							else {
								appLog.error("upload icon on "+Workspace.InvestorWorkspace.toString() +" is not clickable");
								sa.assertTrue(false, "upload icon on "+Workspace.InvestorWorkspace.toString() +" is not clickable");
							}
						
					
						}
				else {
					appLog.error("save button on upload documents window is not clickable");
					sa.assertTrue(false, "save button on upload documents window is not clickable");
				}
					}
			else {
				appLog.error("drag and drop of files is not successful");
				sa.assertTrue(false, "drag and drop of files is not successful");
			}
				}
			else {
				appLog.error("next button on upload window is not clickable");
				sa.assertTrue(false, "next button on upload window is not clickable");
			}
		}
		else {
			appLog.error("upload icon is not clickable on "+Workspace.InvestorWorkspace.toString());
			sa.assertTrue(false, "upload icon is not clickable on "+Workspace.InvestorWorkspace.toString());
			
		}
			}
		else {
			appLog.error("folder "+ standardPath+ " is not found on workspace");
			sa.assertTrue(false, "folder "+ standardPath+ " is not found on workspace");
		}
		}
	else {
		appLog.error("funds "+ M7FundName1 + " is not found on funds page");
		sa.assertTrue(false, "funds "+ M7FundName1 + " is not found on funds page");
	}
		}
else {
	appLog.error("funds tab is not clickable");
	sa.assertTrue(false, "funds tab is not clickable");
}
switchToDefaultContent(driver);
lp.CRMlogout();
sa.assertAll();
}

@Test
	public void M7tc063_5_UploadAlreadyExistingFileStandardMultipleInstitution () {
	
LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
String parentID=null;
String standardPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
String duplicateFile = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);

String dragFromFolder = "UploadFiles\\Module8\\ExistingUpload";
lp.CRMLogin(CRMUser1EmailID, adminPassword);
if (bp.clickOnTab(TabName.FundsTab)) {
	if (fp.clickOnCreatedFund(M7FundName1)) {
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
		if (fp.verifyFolderPathdummy(standardPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
		if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
			parentID = switchOnWindow(driver);
			
				if (click(driver, fp.getMultipleInstituionRadioButton(60), "multiple institutions radio button", action.SCROLLANDBOOLEAN)) {
					if (!fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1).isSelected()) {
						if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1), "upload window standard inst 1 checkbox", action.SCROLLANDBOOLEAN)) {
							appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
						}
					}
					else {
						appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
					}
					if (!fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2).isSelected()) {
						if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2), "upload window standard inst 2 checkbox", action.SCROLLANDBOOLEAN)) {
							appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
						}
					}
					else {
						appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
					}
					
					
					if (click(driver, fp.getUploadNextButton(Workspace.InvestorWorkspace, 30),"next button on upload window standard folder", action.SCROLLANDBOOLEAN)) {
			if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
				if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
					//check heading of duplicate documents
					if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
						appLog.info("duplicate documents heading is successfully verified");
					}
					else {
						appLog.error("duplicate documents heading is not present");
						sa.assertTrue(false, "duplicate documents heading is not present");
					}
					if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
						appLog.info("duplicate documents sub heading is successfully verified");
					}
					else {
						appLog.error("duplicate documents sub heading is not present");
						sa.assertTrue(false, "duplicate documents sub heading is not present");
					}
					if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
						appLog.info("folder location sub heading is successfully verified");
					}
					else {
						appLog.error("folder location sub heading is not visible");
						sa.assertTrue(false, "folder location sub heading is not visible");
					}
					if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
						appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
					}
					else {
						appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
					}
					if (fp.getUpdateAllButton(60)!=null) {
						appLog.info("update all button is present");
					}
					else {
						appLog.error("update all button is not present on duplicate document window");
						sa.assertTrue(false, "update all button is not present on duplicate document window");
					}
					if (fp.getIgnoreAllButton(60)!=null) {
						appLog.info("ignore all button is successfully present");
					}
					else {
						appLog.error("ignore all button is not present on duplicate docuemnts heading");
						sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
					}
					if (fp.getDuplicateDocumentValue(60).getText().trim().equals(duplicateFile)) {
						appLog.info(duplicateFile + " is duplicate according to alert window");
					}
					else {
						appLog.error("duplicate file name name is wrong on duplicate document window");
						sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
					}
					if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > " + M7Institution1+" > "+ M7LimitedPartner1+" > "  + standardPath)) {
						appLog.info("folder name for duplicate files is correct");
					}
					else {
						appLog.error("folder path for duplicate files is wrong");
						sa.assertTrue(false, "folder path for duplicate files is wrong");
					}
					try {
						click(driver, fp.getIgnoreAllButton(60), "ignore all button in duplicate document window", action.SCROLLANDBOOLEAN);
						appLog.info("Clicked Ignore All Button");
					} catch (Exception e) {
						appLog.error("Not Able to Click Ignore All Button");
					}ThreadSleep(5000);	
					driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),"refresh button", action.SCROLLANDBOOLEAN)) {
								//verify upload1.pdf is present
								
								List<WebElement> docList = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
								List<String> docName = new ArrayList<String>();
								for (WebElement ele1 : docList) {
									docName.add(ele1.getText().trim());
								}
								appLog.info("Document List :  "+docName);
								if(!docName.contains(duplicateFile)){
									appLog.error("Document Not Present In the Grid : "+duplicateFile);
									sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
									
								}else{
									appLog.info("Document  Present In the Grid : "+duplicateFile);
									
								}
								
							}
							if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 30), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
							parentID = switchOnWindow(driver);

							if (click(driver, fp.getMultipleInstituionRadioButton(60), "multiple institutions radio button", action.SCROLLANDBOOLEAN)) {
								if (!fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1).isSelected()) {
									if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1), "upload window standard inst 1 checkbox", action.SCROLLANDBOOLEAN)) {
										appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
									}
								}
								else {
									appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
								}
								if (!fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2).isSelected()) {
									if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2), "upload window standard inst 2 checkbox", action.SCROLLANDBOOLEAN)) {
										appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
									}
								}
								else {
									appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
								}
								
							
							
							
							if (click(driver, fp.getUploadNextButton(Workspace.InvestorWorkspace, 30),"next button on upload window standard folder", action.SCROLLANDBOOLEAN)) {
							if (fp.dragDropFiles(dragFromFolder, "DropLoc.jpg")) {
								if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
									if (click(driver, fp.getUpdateAllButton(60), "update all button on duplicate documents window", action.SCROLLANDBOOLEAN)) {
										ThreadSleep(5000);
										if (isAlertPresent(driver)) {
										
										String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
										switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
										if (msg.trim().equals(FundsPageErrorMessage.documentUpldSuccessfully)) {
											appLog.info("correct alert for document upload is found successfully");
										}
										else {
											appLog.error("correct document upload alert is not found");
											sa.assertTrue(false, "correct document upload alert is not found");
										}
										
										
										driver.switchTo().window(parentID);
										switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
										if (click(driver,fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid funds page", action.SCROLLANDBOOLEAN)) {
											//verify upload1.pdf is present
											
											List<WebElement> docList = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
											List<String> docName = new ArrayList<String>();
											for (WebElement ele1 : docList) {
												docName.add(ele1.getText().trim());
											}
											appLog.info("Document List :  "+docName);
											if(!docName.contains(duplicateFile)){
												appLog.error("Document Not Present In the Grid : "+duplicateFile);
												sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
											}else{
												appLog.info("Document  Present In the Grid : "+duplicateFile);
												
											}
											
											}
										//verifying upload1.pdf in standard folder of institution 2
										if (fp.verifyFolderPathdummy(standardPath, M7Institution2, M7LimitedPartner2, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 30)) {
											
											if (click(driver,fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid funds page", action.SCROLLANDBOOLEAN)) {
												//verify upload1.pdf is present
												
												List<WebElement> docList = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
												List<String> docName = new ArrayList<String>();
												for (WebElement ele1 : docList) {
													docName.add(ele1.getText().trim());
												}
												appLog.info("Document List :  "+docName);
												if(!docName.contains(duplicateFile)){
													appLog.error("Document Not Present In the Grid : "+duplicateFile);
													sa.assertTrue(false, "Document Not Present In the Grid : "+duplicateFile);
												}else{
													appLog.info("Document  Present In the Grid : "+duplicateFile);
													
												}
												
												}
											
										}
										
										else {
											appLog.error("content grid refresh button is not clickable");
											sa.assertTrue(false, "content grid refresh button is not clickable");
										}
										}
										else {
											appLog.error("alert is not present for successfully upload of documents");
											sa.assertTrue(false, "alert is not present for successfully upload of documents");
										}
									}
									else {
										appLog.error("update all button is not clickable on duplicate documents window");
										sa.assertTrue(false, "update all button is not clickable on duplicate documents window");
									}
								}
								else {
									appLog.error("save button is not clickable on upload window");
									sa.assertTrue(false, "save button is not clickable on upload window");
								}
							}
							else {
								appLog.error("drag and drop of files is not successful");
								sa.assertTrue(false, "drag and drop of files is not successful");
							}
							}
							else {
								appLog.error("next button on upload window is not clickable");
								sa.assertTrue(false, "next button on upload window is not clickable");
							}
							}
							else {
								appLog.error("multiple institutions radio button is not clickable");
								sa.assertTrue(false, "multiple institutions radio button is not clickable");
							}
							}
							else {
								appLog.error("upload icon on "+Workspace.InvestorWorkspace.toString() +" is not clickable");
								sa.assertTrue(false, "upload icon on "+Workspace.InvestorWorkspace.toString() +" is not clickable");
							}
					
						}
				else {
					appLog.error("save button on upload documents window is not clickable");
					sa.assertTrue(false, "save button on upload documents window is not clickable");
				}
					}
			else {
				appLog.error("drag and drop of files is not successful");
				sa.assertTrue(false, "drag and drop of files is not successful");
			}
				}
			else {
				appLog.error("next button on upload window is not clickable");
				sa.assertTrue(false, "next button on upload window is not clickable");
			}
		}
				else {
					appLog.error("multiptle institutions radio button is not clickable");
					sa.assertTrue(false, "multiptle institutions radio button is not clickable");
				}
		}
		else {
			appLog.error("upload icon is not clickable on "+Workspace.InvestorWorkspace.toString() +"");
			sa.assertTrue(false, "upload icon is not clickable on "+Workspace.InvestorWorkspace.toString() +"");
			
		}
			}
		else {
			appLog.error("folder "+ standardPath+ " is not found on workspace");
			sa.assertTrue(false, "folder "+ standardPath+ " is not found on workspace");
		}
		}
	else {
		appLog.error("funds "+ M7FundName1 + " is not found on funds page");
		sa.assertTrue(false, "funds "+ M7FundName1 + " is not found on funds page");
	}
		}
else {
	appLog.error("funds tab is not clickable");
	sa.assertTrue(false, "funds tab is not clickable");
}
switchToDefaultContent(driver);
lp.CRMlogout();
sa.assertAll();
}
	
@Test
	public void M7tc064_OnlineImportCommonInternalSharedNegative() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String parentID=null;
	SoftAssert sa = new SoftAssert();
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String[] oipath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.OnlineImportPath).split(",");
	//String fileName = "upload_oi.pdf";
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileCommon);
	lp.CRMLogin(CRMUser2EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				WebElement ele;

				ele=fp.getOnlineImportLink(Workspace.InvestorWorkspace, 30);

				if (click(driver, ele, "Online Import Icon", action.BOOLEAN)) {
					parentID = switchOnWindow(driver);
					sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"),"Box username Text Box", action.THROWEXCEPTION);
					sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"),"Box Password Text Box", action.THROWEXCEPTION);
					click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
					click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
					if (CommonLib.traverseImport(driver, oipath[0], fileName)) {
						click(driver, fp.getOnlineImportCancelButton(60), "Online Import Button", action.BOOLEAN);
						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

					}
					else {
						appLog.error("the path and file could not be found so import document fails");
					}

				}if (click(driver, ele, "online import button on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					if (sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"), "box username text box", action.THROWEXCEPTION)) {
						if (sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"), "box password text box", action.THROWEXCEPTION)) {
							click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
							click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
							click(driver, fp.getImportButton(60), "import button on online import window", action.SCROLLANDBOOLEAN);
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {
									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if(msg.trim().toLowerCase().equalsIgnoreCase(FundsPageErrorMessage.UploadSelectTargetMessage)) {
										appLog.info("Online import failure alert message is matched successfully.");
									}
									else {
										appLog.error("online import message is different than expected "+msg);
									}
									driver.switchTo().window(parentID);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

								}
								else {
									appLog.error("no alert is present");
									driver.close();
									driver.switchTo().window(parentID);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								}
								
						}
						
						else {
							appLog.error("box password textbox is not visible on online import window");
							driver.close();
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
						}
					}
					else {
						appLog.error("Box username textbox is not visible on online import window");
					}
				}
				else {
					appLog.error("online import button is not clickable on "+Workspace.InvestorWorkspace.toString() +" funds page");
				}

			}
			else {
				appLog.error("path for folder "+cmnPath+" is not found in folder structure");
			}
			
			//for internal folder
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				WebElement ele;

				ele=fp.getOnlineImportLink(Workspace.InvestorWorkspace, 30);

				if (click(driver, ele, "Online Import Icon", action.BOOLEAN)) {
					parentID = switchOnWindow(driver);
					sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"),"Box username Text Box", action.THROWEXCEPTION);
					sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"),"Box Password Text Box", action.THROWEXCEPTION);
					click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
					click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
					if (CommonLib.traverseImport(driver, oipath[1], fileName)) {
						click(driver, fp.getOnlineImportCancelButton(60), "Online Import Button", action.BOOLEAN);
						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

					}
					else {
						appLog.error("the path and file could not be found so import document fails");
					}

				}if (click(driver, ele, "online import button on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					if (sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"), "box username text box", action.THROWEXCEPTION)) {
						if (sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"), "box password text box", action.THROWEXCEPTION)) {
							click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
							click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
							click(driver, fp.getImportButton(60), "import button on online import window", action.SCROLLANDBOOLEAN);
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {
									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if(msg.trim().toLowerCase().equalsIgnoreCase(FundsPageErrorMessage.UploadSelectTargetMessage)) {
										appLog.info("Online import failure alert message is matched successfully.");
									}
									else {
										appLog.error("online import message is different than expected "+msg);
									}
									driver.switchTo().window(parentID);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

								}
								else {
									appLog.error("no alert is present");
									driver.close();
									driver.switchTo().window(parentID);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								}
								
						}
						
						else {
							appLog.error("box password textbox is not visible on online import window");
							driver.close();
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
						}
					}
					else {
						appLog.error("Box username textbox is not visible on online import window");
					}
				}
				else {
					appLog.error("online import button is not clickable on "+Workspace.InvestorWorkspace.toString() +" funds page");
				}

			}
			else {
				appLog.error("path for folder "+intPath+" is not found in folder structure");
			}
			
			
			//for shared folder
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				WebElement ele;

				ele=fp.getOnlineImportLink(Workspace.InvestorWorkspace, 30);

				if (click(driver, ele, "Online Import Icon", action.BOOLEAN)) {
					parentID = switchOnWindow(driver);
					sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"),"Box username Text Box", action.THROWEXCEPTION);
					sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"),"Box Password Text Box", action.THROWEXCEPTION);
					click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
					click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
					if (CommonLib.traverseImport(driver, oipath[2], fileName)) {
						click(driver, fp.getOnlineImportCancelButton(60), "Online Import Button", action.BOOLEAN);
						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

					}
					else {
						appLog.error("the path and file could not be found so import document fails");
					}

				}if (click(driver, ele, "online import button on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					if (sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"), "box username text box", action.THROWEXCEPTION)) {
						if (sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"), "box password text box", action.THROWEXCEPTION)) {
							click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
							click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
							click(driver, fp.getImportButton(60), "import button on online import window", action.SCROLLANDBOOLEAN);
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {
									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if(msg.trim().toLowerCase().equalsIgnoreCase(FundsPageErrorMessage.UploadSelectTargetMessage)) {
										appLog.info("Online import failure alert message is matched successfully.");
									}
									else {
										appLog.error("online import message is different than expected "+msg);
									}
									driver.switchTo().window(parentID);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

								}
								else {
									appLog.error("no alert is present");
									driver.close();
									driver.switchTo().window(parentID);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								}
								
						}
						
						else {
							appLog.error("box password textbox is not visible on online import window");
							driver.close();
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
						}
					}
					else {
						appLog.error("Box username textbox is not visible on online import window");
					}
				}
				else {
					appLog.error("online import button is not clickable on "+Workspace.InvestorWorkspace.toString() +" funds page");
				}

			}
			else {
				appLog.error("path for folder "+shdPath+" is not found in folder structure");
			}
			
			
			
			
			
		}
		else {
			appLog.error("fund "+M7FundName1+" is not found");
		}
	}
	else {
		appLog.error("funds tab is not clickable");
	}
	sa.assertAll();
}

@Test
	public void M7tc065_OnlineImportStandardNegative() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String parentID=null;
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String[] standardUploadText = {"Add to Single Institution", "Add to Multiple Institutions", "Use Bulk Uploader or File Splitter"};
	String oipath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.OnlineImportPath);
	//String fileName = "upload_oi.pdf";
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileStandard);
	lp.CRMLogin(CRMUser2EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				WebElement ele;

				ele=fp.getOnlineImportLink(Workspace.InvestorWorkspace, 30);
				if (click(driver, ele, "online import icon "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"),"Box username Text Box", action.THROWEXCEPTION);
					sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"),"Box Password Text Box", action.THROWEXCEPTION);
					click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
					click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);


					if (fp.getUploadDocumentToFolderTextLabel(60).getText().trim().contains("Upload Document to Folder")) {
						appLog.info("Upload document to folder text is successfully found");
						WebElement standard_text = isDisplayed(driver, FindElement(driver, "//span[contains(text(),'"+stdPath+"')]", "standard folder name", action.SCROLLANDBOOLEAN,30), "visibility", 30, "standard folder name");
						if (standard_text!=null) {
							appLog.info("correct folder name is succesfully displayed");
						}
						else {
							appLog.error("folder name displayed is not correct");
							sa.assertTrue(false, "folder name displayed is not correct");
						}
						for (int i = 0;i<fp.standardFolderUploadWindowLabels().size();i++) {
							WebElement el = fp.standardFolderUploadWindowLabels().get(i);
							if (el.getText().trim().equals(standardUploadText[i])) {
								appLog.info(standardUploadText[i]+" Text in standard folder import window is present");
							}
							else {
								appLog.error(standardUploadText[i]+"is not present");
								sa.assertTrue(false, standardUploadText[i]+"is not present");
							}
						}
						//verifying institutions names are present and checkbox of instituion 1 is selcted by default
						WebElement institution1=fp.uploadWindowInstitutionTextElementInvestorSide(M7Institution1,M7LimitedPartner1);
						if (institution1!=null) {
							appLog.info(M7Institution1+"/"+M7LimitedPartner1+" is present on institutions list");
							
							if (fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1,M7LimitedPartner1).isSelected()
									&& !fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1,M7LimitedPartner1).isEnabled()) {
								appLog.info(M7Institution1+"/"+M7LimitedPartner1+" checkbox is selected and Disabled by default");
							}
							else {
								appLog.error(M7Institution1+"/"+M7LimitedPartner1+" checkbox may not be selected and Disabled by default");
								sa.assertTrue(false, M7Institution1+"/"+M7LimitedPartner1+" checkbox may not be selected and Disabled by default");
							}
							
						}
						else {
							appLog.error(M7Institution1+"/"+M7LimitedPartner1+" is not displayed on upload window");
							sa.assertTrue(false, M7Institution1+"/"+M7LimitedPartner1+" is not displayed on upload window");
						}
						
						WebElement institution2=fp.uploadWindowInstitutionTextElementInvestorSide(M7Institution2,M7LimitedPartner2);
						if (institution2!=null) {
							appLog.info(M7Institution2+"/"+M7LimitedPartner2+" is present on institutions list");
							if (!fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2,M7LimitedPartner2).isSelected()
									&& !fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2,M7LimitedPartner2).isEnabled()) {
								appLog.info(M7Institution2+"/"+M7LimitedPartner2+" checkbox is not selected and Disabled by default");
							}
							else {
								appLog.error(M7Institution2+"/"+M7LimitedPartner2+" checkbox may not be selected and Disabled by default");
								sa.assertTrue(false, M7Institution2+"/"+M7LimitedPartner2+" checkbox may not be selected and Disabled by default");
							}
							
						}
						else {
							appLog.error(M7Institution2+"/"+M7LimitedPartner2+" is not displayed on upload window");
							sa.assertTrue(false, M7Institution2+"/"+M7LimitedPartner2+" is not displayed on upload window");
						}
					}
					else {
						appLog.error("text on online import window is not correct");
						sa.assertTrue(false, "text on online import window is not correct");
					}
					if (click(driver, fp.getUploadNextButton(Workspace.InvestorWorkspace, 60), "next button on online import window", action.SCROLLANDBOOLEAN)) {
						if (CommonLib.traverseImport(driver, oipath, fileName)) {
							click(driver, fp.getOnlineImportCancelButton(60), "Online Import Button", action.BOOLEAN);
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));

						}
					}
				}
				else {
					appLog.error("online import button on "+Workspace.InvestorWorkspace.toString() +" is not clickable");
					sa.assertTrue(false, "online import button on "+Workspace.InvestorWorkspace.toString() +" is not clickable");
				}
				//for multiple institutions
				//selected no institution and checking error message
				if (click(driver, ele, "online import icon on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"),"Box username Text Box", action.THROWEXCEPTION);
					sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"),"Box Password Text Box", action.THROWEXCEPTION);
					click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
					click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
					if (click(driver, fp.getMultipleInstituionRadioButton(60), "multiple institutions radio button", action.SCROLLANDBOOLEAN)) {
						if (fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1).isSelected()) {
							if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1), "upload window standard inst 1 checkbox", action.SCROLLANDBOOLEAN)) {
								appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
							}
						}
						else {
							appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
						}
						if (fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2).isSelected()) {
							if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2), "upload window standard inst 2 checkbox", action.SCROLLANDBOOLEAN)) {
								appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
							}
						}
						else {
							appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
						}
						if (click(driver, fp.getUploadNextButton(Workspace.InvestorWorkspace, 60), "next button online import window", action.SCROLLANDBOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {

								String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
								switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
								if (msg.trim().equals(FundsPageErrorMessage.pleaseSelectOneLP)) {
									appLog.info("Error Msg Verified : "+FundsPageErrorMessage.pleaseSelectOneLP);
								}
								else {
									appLog.error("Error Msg Not Verified : "+FundsPageErrorMessage.pleaseSelectOneLP);
									sa.assertTrue(false, "Error Msg Not Verified : "+FundsPageErrorMessage.pleaseSelectOneLP);
								}



							}
							else {
								appLog.error("alert error message is not present when no institution is selected");
								sa.assertTrue(false, "alert error message is not present when no institution is selected");
							}


						}
						else {
							appLog.error("next button is not clickable on import window");
							sa.assertTrue(false, "next button is not clickable on import window");
						}

					
						
						
						
						//selecting both institutions, selecting file and click cancel
						if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1), "upload window standard inst 1 checkbox", action.SCROLLANDBOOLEAN)) {
							appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
							if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2), "upload window standard inst 2 checkbox", action.SCROLLANDBOOLEAN)) {
								appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
								if (click(driver, fp.getUploadNextButton(Workspace.InvestorWorkspace, 60), "next button on import window", action.SCROLLANDBOOLEAN)) {
									if (traverseImport(driver, oipath, fileName)) {
										click(driver, fp.getOnlineImportCancelButton(30), "cancel button on import window", action.SCROLLANDBOOLEAN);
										ThreadSleep(5000);	
										driver.switchTo().window(parentID);
											switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
									
									}
									else {
										appLog.error("document could not be found traversing through file path");
										sa.assertTrue(false, "document could not be found traversing through file path");
									}
								}
								else {
									appLog.error("next button on import window is not clickable");
									sa.assertTrue(false, "next button on import window is not clickable");
								}
							}
							else {
								appLog.error("institution 2 checkbox is not clickable");
								sa.assertTrue(false, "institution 2 checkbox is not clickable");
							}
						}
						else {
							appLog.error("institutin 1 checkbox is not clickable");
							sa.assertTrue(false, "institutin 1 checkbox is not clickable");
						}
					}
				}
				else {
					appLog.error("online import icon is not clickable on fundraising worksapce");
					sa.assertTrue(false, "online import icon is not clickable on fundraising worksapce");
				}


				//selecting both institution and not selected any document and click import
				if (click(driver, ele, "online import button on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
					parentID = switchOnWindow(driver);
					sendKeys(driver, fp.getBoxUserName(60), ExcelUtils.readDataFromPropertyFile("BoxUsername"),"Box username Text Box", action.THROWEXCEPTION);
					sendKeys(driver, fp.getBoxPasswordTextBox(60), ExcelUtils.readDataFromPropertyFile("BoxPassword"),"Box Password Text Box", action.THROWEXCEPTION);
					click(driver, fp.getBoxAuthorizeButton(60), "Authorize button", action.THROWEXCEPTION);
					click(driver, fp.getGrantAccessToBoxButton(60), "Grant Access To Box Button", action.THROWEXCEPTION);
					if (click(driver, fp.getMultipleInstituionRadioButton(60), "multiple institutions radio button", action.SCROLLANDBOOLEAN)) {
						if (!fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1).isSelected()) {
							if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution1, M7LimitedPartner1), "upload window standard inst 1 checkbox", action.SCROLLANDBOOLEAN)) {
								appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
							}
						}
						else {
							appLog.info(M7Institution1+"/"+ M7LimitedPartner1 +" is now selected");
						}
						if (!fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2).isSelected()) {
							if (click(driver, fp.uploadWindowInstitutionInputElementInvestorSide(M7Institution2, M7LimitedPartner2), "upload window standard inst 2 checkbox", action.SCROLLANDBOOLEAN)) {
								appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
							}
						}
						else {
							appLog.info(M7Institution2+"/"+ M7LimitedPartner2 +" is now selected");
						}
					}
					if (click(driver, fp.getUploadNextButton(Workspace.InvestorWorkspace, 60),"next button on import window", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.getImportButton(60), "import button on online import window", action.SCROLLANDBOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {
							
							String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
							switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
							if (msg.trim().equals(FundsPageErrorMessage.UploadSelectTargetMessage)) {
								appLog.info("correct error message to plese select at least one document is found successfully");
							}
							else {
								appLog.error("error message to plese select at least one document is not found");
								sa.assertTrue(false, "error message to  plese select at least one document is not found");
							}
							}
							else {
								appLog.error("no alert is present on selecting no document");
								sa.assertTrue(false, "no alert is present on selecting no document");
							}
							
						}
						else {
							appLog.error("import button is not clickable on import window");
							sa.assertTrue(false, "import button is not clickable on import window");
						}
					}
					else {
						appLog.error("next button on import window is not clickable");
						sa.assertTrue(false, "next button on import window is not clickable");
					}
				}
				else {
					appLog.error("online import icon is not clickable on "+Workspace.InvestorWorkspace.toString());
					sa.assertTrue(false, "online import icon is not clickable on "+Workspace.InvestorWorkspace.toString());
				}

			}

			else {
				appLog.error("file path "+stdPath + " is not found");
				sa.assertTrue(false, "file path "+stdPath + " is not found");
			}
		}
		else {
			appLog.error("fund "+M7FundName1 + " was not found on funds page");
			sa.assertTrue(false, "fund "+M7FundName1 + " was not found on funds page");
		}
	}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	sa.assertAll();
}

@Test
	public void M7tc066_1_OnlineImportActionAtCommonFolderFundPageSuccessfully() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	String folderpath=ExcelUtils.readData("FilePath",0,1,currentlyExecutingTC);
	String fileName=ExcelUtils.readData("FilePath",0,5,currentlyExecutingTC);
	String docPath=ExcelUtils.readData("FilePath",0,13,currentlyExecutingTC);
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
			currentlyExecutingTC, excelLabel.UploadedFileCommon);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	

	SoftAssert saa = new SoftAssert();
	lp.CRMLogin(CRMUser2EmailID,adminPassword);
	if(fp.clickOnTab(TabName.FundsTab)) {
		if(fp.clickOnCreatedFund(M7FundName1)) {
			if(fp.onlineImport(null, null, null,folderpath,docPath,fileName, BoxUserName, BoxPassword, OnlineImportFileAddTo.SingleInstitute, WorkSpaceAction.UPLOAD, FolderType.Common, PageName.FundsPage, Workspace.InvestorWorkspace,20)) {
				appLog.info("file is imported successfully: "+fileName+" in :"+folderpath);
					switchToFrame(driver, 30,fp.getFrame(PageName.FundsPage, 20));
					if(click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),"Fundraising workspace refresh button", action.SCROLLANDBOOLEAN)) {
					
					

						if (filesName != null) {
							
							
							
							saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser2FirstName + " " + CRMUser2LastName,date);
							
							sa.combineAssertions(saa);
							
						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}
						
					}else {

						appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
						sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
					}

				
			}else {
				appLog.error("file is not imported: "+fileName+" in :"+folderpath);
				sa.assertTrue(false, "file is not imported: "+fileName+" in :"+folderpath);
			}
			
		}else {
			appLog.error("Not able to click on created Fund: "+M7FundName1+" so cannot online import files in investor workspace");
			sa.assertTrue(false, "Not able to click on created Fund: "+M7FundName1+" so cannot online import files in investor workspace");
		}
		
	}else {
		appLog.error("Not able to click on fund tab so cannot online import files in investor workspace");
		sa.assertTrue(false, "Not able to click on fund tab so cannot online import files in investor workspace");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.combineAssertions(saa);
	sa.assertAll();
}	

@Test
	public void M7tc066_2_OnlineImportImpactAtCommonFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);

	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	String dependsOnTc = "M7tc066_1_OnlineImportActionAtCommonFolderFundPageSuccessfully";
	
	
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.CommonPath);
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.UploadedFileCommon);
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	

	SoftAssert saa = new SoftAssert();
	lp.CRMLogin(CRMUser2EmailID,adminPassword);
	
	
	// Institution
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

	

			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);

				

				if (filesName != null) {

					

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + cmnPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	// Limited Tab
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
			appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);

				
				if (filesName != null) {


					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified LP : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified LP : " + cmnPath);
			}

		} else {
			appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
	// Committment Tab
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.CommitmentsTab)) {
				if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
					appLog.info("Opened Commitment  : " + M7Commitment1ID);
					switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");

					if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + cmnPath);

						

						if (filesName != null) {

							saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + cmnPath);
					}

				} else {
					appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
				}
			} else {
				appLog.error("Not able to Click Commitment tab ");
				sa.assertTrue(false, "Not able to Click Commitment tab ");
			}
			
			// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");

					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + cmnPath);

					

						if (filesName != null) {

							

							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + cmnPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	//
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.combineAssertions(saa);
	sa.assertAll();
}	

@Test
	public void M7tc066_3_OnlineImportImpactAtCommonFolderInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	

	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc066_1_OnlineImportActionAtCommonFolderFundPageSuccessfully";
	
	
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.CommonPath);
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.UploadedFileCommon);

	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
		
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, CRMUser2FirstName + " " + CRMUser2LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
}	

	@Test
	public void M7tc067_1_OnlineImportActionAtInternalFolderFundPageSuccessfully() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);

	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String intFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.InternalPath);
	
	String filesName =null;

	lp.CRMLogin(CRMUser2EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			String folderpath=ExcelUtils.readData("FilePath",0,2,currentlyExecutingTC);
			String fileName=ExcelUtils.readData("FilePath",0,6,currentlyExecutingTC);
			String docPath=ExcelUtils.readData("FilePath",0,13,currentlyExecutingTC);

			if(fp.onlineImport(null, null, null,folderpath,docPath,fileName, BoxUserName, BoxPassword, OnlineImportFileAddTo.SingleInstitute, WorkSpaceAction.UPLOAD, FolderType.Internal, PageName.FundsPage, Workspace.InvestorWorkspace,20)) {
				appLog.info("file is imported successfully: "+fileName+" in :"+folderpath);
					switchToFrame(driver, 30,fp.getFrame(PageName.FundsPage, 20));
				

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileInternal);

					if (filesName != null) {
						
					
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("File is not uploaded in " + intFolder);
				sa.assertTrue(false, "File is not uploaded in " + intFolder);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

		
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc067_2_OnlineImportImpactAtInternalFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String dependsOnTc = "M7tc067_1_OnlineImportActionAtInternalFolderFundPageSuccessfully";
	String intFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.InternalPath);
	
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.UploadedFileInternal);

	lp.CRMLogin(CRMUser2EmailID, adminPassword);

	
	// Institution
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(intFolder, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + intFolder);

				

				if (filesName != null) {

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + intFolder);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + intFolder);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	// Limited 
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
			appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
		

			if (fp.verifyFolderPathdummy(intFolder, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + intFolder);

					if (filesName != null) {
					
					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified LP : " + intFolder);
				sa.assertTrue(false, " Folder Structure Not Verified LP : " + intFolder);
			}

		} else {
			appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
	// Committment Tab
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.CommitmentsTab)) {
				if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
					appLog.info("Opened Commitment  : " + M7Commitment1ID);
					switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
				
					if (fp.verifyFolderPathdummy(intFolder, null, null, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + intFolder);

					

						if (filesName != null) {

						
							saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + intFolder);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + intFolder);
					}

				} else {
					appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
				}
			} else {
				appLog.error("Not able to Click Commitment tab ");
				sa.assertTrue(false, "Not able to Click Commitment tab ");
			}
			
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc068_1_OnlineImportActionAtSharedFolderFundPageSuccessfully() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String shdFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.SharedPath);
	
	String filesName =null;

	lp.CRMLogin(CRMUser2EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			String folderpath=ExcelUtils.readData("FilePath",0,3,currentlyExecutingTC);
			String fileName=ExcelUtils.readData("FilePath",0,7,currentlyExecutingTC);
			String docPath=ExcelUtils.readData("FilePath",0,13,currentlyExecutingTC);
			
			if (fp.onlineImport(null, null, null, folderpath, docPath, fileName, BoxUserName, BoxPassword,
					OnlineImportFileAddTo.SingleInstitute, WorkSpaceAction.UPDATE, FolderType.Shared,
					PageName.FundsPage, Workspace.InvestorWorkspace, 20)) {

				appLog.info("File is upload successfullly");
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileShared);

					if (filesName != null) {
						
						
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("File is not uploaded in " + shdFolder);
				sa.assertTrue(false, "File is not uploaded in " + shdFolder);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc068_2_OnlineImportImpactAtSharedFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String dependsOnTc = "M7tc068_1_OnlineImportActionAtSharedFolderFundPageSuccessfully";
	
	String shdFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.SharedPath);
	
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
			dependsOnTc, excelLabel.UploadedFileShared);
	
	

	lp.CRMLogin(CRMUser2EmailID, adminPassword);

	
	// Institution
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(shdFolder, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + shdFolder);

				

				if (filesName != null) {

				

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + shdFolder);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + shdFolder);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	// Limited 
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
			appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
		

			if (fp.verifyFolderPathdummy(shdFolder, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + shdFolder);


				if (filesName != null) {

		

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified LP : " + shdFolder);
				sa.assertTrue(false, " Folder Structure Not Verified LP : " + shdFolder);
			}

		} else {
			appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
	// Committment Tab
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.CommitmentsTab)) {
				if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
					appLog.info("Opened Commitment  : " + M7Commitment1ID);
					switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
				
					if (fp.verifyFolderPathdummy(shdFolder, null, null, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + shdFolder);

				

						if (filesName != null) {

						

							saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + shdFolder);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + shdFolder);
					}

				} else {
					appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
				}
			} else {
				appLog.error("Not able to Click Commitment tab ");
				sa.assertTrue(false, "Not able to Click Commitment tab ");
			}
			
			// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					

					if (fp.verifyFolderPathdummy(shdFolder, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + shdFolder);

					

						if (filesName != null) {

						

							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + shdFolder);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + shdFolder);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	//
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc068_3_OnlineImportImpactAtSharedFolderInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc068_1_OnlineImportActionAtSharedFolderFundPageSuccessfully";
	
	String shdFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.SharedPath);
	
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
			dependsOnTc, excelLabel.UploadedFileShared);

	
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
	
		if (fp.verifyFolderPathdummy(shdFolder, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdFolder);
	
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, CRMUser2FirstName + " " + CRMUser2LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdFolder);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdFolder);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc069_1_OnlineImportActionAtStandardFolderFundPageSuccessfully() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);

	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	String filesName =null;

	lp.CRMLogin(CRMUser2EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {


			
			String folderpath=ExcelUtils.readData("FilePath",0,4,currentlyExecutingTC);
			String fileName=ExcelUtils.readData("FilePath",0,8,currentlyExecutingTC);
			String docPath=ExcelUtils.readData("FilePath",0,13,currentlyExecutingTC);

			if (fp.onlineImport(M7Institution1, M7LimitedPartner1, null, folderpath, docPath, fileName, BoxUserName,
					BoxPassword, OnlineImportFileAddTo.SingleInstitute, WorkSpaceAction.UPLOAD, FolderType.Standard,
					PageName.FundsPage, Workspace.InvestorWorkspace, 20)) {
				appLog.info("File is upload successfullly");
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");

				if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					 filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
							currentlyExecutingTC, excelLabel.UploadedFileStandard);

					if (filesName != null) {
						
						
						
						saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName,date);
						
						sa.combineAssertions(saa);
						
					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}

			} else {
				appLog.error("File is not uploaded in " + stdPath);
				sa.assertTrue(false, "File is not uploaded in " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	
}

@Test
	public void M7tc069_2_OnlineImportImpactAtStandardFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc069_1_OnlineImportActionAtStandardFolderFundPageSuccessfully";
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.StandardPath);
	
	String  filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.UploadedFileStandard);

	lp.CRMLogin(CRMUser2EmailID, adminPassword);

	
	// Institution
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			

			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				
				 click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
							"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);
				if (filesName != null) {

			

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	// Limited 
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
			appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
		

			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);
				click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);

			

				if (filesName != null) {

				

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified LP : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified LP : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
	// Committment Tab
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.CommitmentsTab)) {
				if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
					appLog.info("Opened Commitment  : " + M7Commitment1ID);
					switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
				
					if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);
						click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
								"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);

			

						if (filesName != null) {

							HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPage(30, Workspace.InvestorWorkspace), By.xpath("//div[@class='contacts_n_name_div']//span[contains(@id,'myGrid-cell-0-')]//a/u"));
							
							appLog.info("Element of set "+set);
						
						if (set.contains(filesName)) {
							appLog.info(filesName+" was successfully found in "+PageName.ContactsPage.toString());
							
						}else{
							appLog.error(filesName+"  not found in "+PageName.ContactsPage.toString());
							sa.assertTrue(false, filesName+"  not found in "+PageName.ContactsPage.toString());
							
						}

							/*saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

							sa.combineAssertions(saa);*/

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + stdPath);
					}

				} else {
					appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
				}
			} else {
				appLog.error("Not able to Click Commitment tab ");
				sa.assertTrue(false, "Not able to Click Commitment tab ");
			}
			
			// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					

					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);
						click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
								"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);


						if (filesName != null) {

							HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPage(30, Workspace.InvestorWorkspace), By.xpath("//div[@id='Investorgrid_div']//span[contains(@id,'myGrid-cell-0-')]//a/u"));
						
								appLog.info("Element of set "+set);
							
							if (set.contains(filesName)) {
								appLog.info(filesName+" was successfully found in "+PageName.ContactsPage.toString());
								
							}else{
								appLog.error(filesName+"  not found in "+PageName.ContactsPage.toString());
								sa.assertTrue(false, filesName+"  not found in "+PageName.ContactsPage.toString());
								
							}

							/*saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

							sa.combineAssertions(saa);*/

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	
			
	//
	switchToDefaultContent(driver);
	lp.CRMlogout();
	
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	
}

@Test
	public void M7tc069_3_OnlineImportImpactAtStandardFolderInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc069_1_OnlineImportActionAtStandardFolderFundPageSuccessfully";
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.StandardPath);
	
	String  filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.UploadedFileStandard);
	

	
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
	
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			click(driver, ifp.getRefreshIcon(20), "Refresh Icon", action.SCROLLANDBOOLEAN);
			
			HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));
			
			if (set.contains(filesName)) {
				appLog.info(filesName+" was succesfully found in "+PageName.CurrentInvestmentPgae.toString());
			}
			else {
				appLog.error(filesName+" was not found in "+PageName.CurrentInvestmentPgae.toString());
				sa.assertTrue(false, filesName+" was not found in "+PageName.CurrentInvestmentPgae.toString());
			}
			
			/*saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, CRMUser2FirstName + " " + CRMUser2LastName, date);
			sa.combineAssertions(saa);*/
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	
}

@Test
	public void M7tc070_1_OnlineImportActionAtStandardFolderMultipleInsFundPageSuccessfully() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	
	String  filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
			currentlyExecutingTC, excelLabel.UploadedFileStandard);
	
	String[] fileName = filesName.split("<break>");

	lp.CRMLogin(CRMUser2EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			// Institution1+Lp1+Standard
			
			if (fp.inviteContact(M7Institution2, M7Contact1EmailId, null,
					FolderType.Standard, "upload", "Yes", "no", "Standard", Workspace.InvestorWorkspace,
					M7Contact1LastName)) {
				appLog.info("For " + M7Institution2 
						+ " contact has been given access successfully and invite has been sent to mail "
						+ M7Contact1FirstName + " " + M7Contact1LastName);
			} else {
				appLog.error("For " + M7Institution2 
						+ " Access has not been Given Successfully " + M7Contact1FirstName + " "
						+ M7Contact1LastName);
				sa.assertTrue(false,
						"For " + M7Institution2
								+ " Access has not been Given Successfully " + M7Contact1FirstName + " "
								+ M7Contact1LastName);
			}

			switchToDefaultContent(driver);
			String folderpath=ExcelUtils.readData("FilePath",0,4,currentlyExecutingTC);
		
			String docPath=ExcelUtils.readData("FilePath",0,13,currentlyExecutingTC);
			
			
			if (fp.onlineImport(M7Institution1, M7LimitedPartner1, M7Institution2, folderpath, docPath, filesName, BoxUserName,
					BoxPassword, OnlineImportFileAddTo.MultipleInstitute, WorkSpaceAction.UPLOAD, FolderType.Standard,
					PageName.FundsPage, Workspace.InvestorWorkspace, 20)) {
				appLog.info("File is upload successfullly");
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				
				if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
						"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN)) {
					

				
					
						if ((fileName[0] != null)&&(fileName[1]!=null)) {
							HashSet<String> set = 
									CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPage(30, Workspace.InvestorWorkspace), By.xpath("//div[@id='invworkspace']//span[contains(@id,'myGrid-cell-0-')]//a/u"));
									if (set.contains(fileName[0])) {
								appLog.info(fileName[0]+" is successfully found in "+PageName.FundsPage.toString());
							}
							else {
								appLog.error(fileName[0]+" is not found in "+PageName.FundsPage.toString());
								sa.assertTrue(false, fileName[0]+" is not found in "+PageName.FundsPage.toString());
							}
							if (set.contains(fileName[1])) {
								appLog.info(fileName[1]+" is successfully found in "+PageName.FundsPage.toString());
							}
							else {
								appLog.error(fileName[1]+" is not found in "+PageName.FundsPage.toString());
								sa.assertTrue(false, fileName[1]+" is not found in "+PageName.FundsPage.toString());
							}

						}
					 else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}
						
						
						/*saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName,date);
						
						sa.combineAssertions(saa);*/
						
					
				} else {

					appLog.error("Not able to click on refresh icon so cannot verify upload documents.");
					sa.assertTrue(false, "Not able to click on refresh icon so cannot verify upload documents");
				}
				
				// 
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				if (fp.verifyFolderPathdummy(stdPath, M7Institution2, M7LimitedPartner2, M7FundName1,
						PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + M7Institution2 + "/" + M7LimitedPartner2 + "/"
							+ stdPath);
					click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
							"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);

					saa = verifyContentGridCRMSide(driver, PageName.FundsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName,date);
					
					sa.combineAssertions(saa);

				} else {
					appLog.error(" Folder Structure Not Verified  : " + M7Institution2 + "/" + M7LimitedPartner2
							+ "/" + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified  : " + M7Institution2 + "/"
							+ M7LimitedPartner2 + "/" + stdPath);
				}
				

			} else {
				appLog.error("File is not uploaded in " + stdPath);
				sa.assertTrue(false, "File is not uploaded in " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fud Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	
}

@Test
	public void M7tc070_2_OnlineImportImpactAtStandardFolderMultipleInsAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	

	String dependsOnTc = "M7tc070_1_OnlineImportActionAtStandardFolderMultipleInsFundPageSuccessfully";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.StandardPath);
	
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
				excelLabel.UploadedFileStandard);
	String[] fileName = filesName.split("<break>");

	lp.CRMLogin(CRMUser2EmailID, adminPassword);
	
	// Institution
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				 click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
							"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);
				

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
	
	switchToDefaultContent(driver);
	
	// Institution
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution2)) {
			appLog.info("Opened Institution : " + M7Institution2);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner2, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				 click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
							"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);
				

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
							"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

					sa.combineAssertions(saa);

				

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution2);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution2);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

			// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					
					// Ins1Lp1
					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);
						click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
								"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);


						/*if (filesName != null) {
							
							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}*/
						
						if ((fileName[0] != null)&&(fileName[1] != null)) {
							HashSet<String> set =CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPage(30, Workspace.InvestorWorkspace), By.xpath("//div[@id='Investorgrid_div']//span[contains(@id,'myGrid-cell-0-')]//a/u"));
								if (set.contains(fileName[0])) {
								appLog.info(fileName[0]+" is successfully found in "+PageName.ContactsPage.toString());
							}
							else {
								appLog.error(fileName[0]+" is not found in "+PageName.ContactsPage.toString());
								sa.assertTrue(false, fileName[0]+" is not found in "+PageName.ContactsPage.toString());
							}
							if (set.contains(fileName[1])) {
								appLog.info(fileName[1]+" is successfully found in "+PageName.ContactsPage.toString());
							}
							else {
								appLog.error(fileName[1]+" is not found in "+PageName.ContactsPage.toString());
								sa.assertTrue(false, fileName[1]+" is not found in "+PageName.ContactsPage.toString());
							}

						}
						else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
					}
					
					if (fp.verifyFolderPathdummy(stdPath, M7Institution2, M7LimitedPartner2, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);
						click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30),
								"FInvestorWorkspace refresh button", action.SCROLLANDBOOLEAN);

						
							
							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
									"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

							sa.combineAssertions(saa);

						
					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	
			
	//
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	
}

@Test
	public void M7tc070_3_OnlineImportImpactAtStandardFolderMultipleInsInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert saa = new SoftAssert();
	
	String dependsOnTc = "M7tc070_1_OnlineImportActionAtStandardFolderMultipleInsFundPageSuccessfully";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.StandardPath);
	
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
				excelLabel.UploadedFileStandard);
	
	String fileName[] = filesName.split("<break>");
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
	
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			click(driver, ifp.getRefreshIcon(20), "Refresh Icon", action.SCROLLANDBOOLEAN);
		
			HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));
			if (set.contains(fileName[0])) {
				appLog.info(fileName[0]+" is successfully found in "+PageName.CurrentInvestmentPgae.toString());
			}
			else {
				appLog.error(fileName[0]+" is not found in "+PageName.CurrentInvestmentPgae.toString());
				sa.assertTrue(false, fileName[0]+" is not found in "+PageName.CurrentInvestmentPgae.toString());
			}
			if (set.contains(fileName[1])) {
				appLog.info(fileName[1]+" is successfully found in "+PageName.CurrentInvestmentPgae.toString());
			}
			else {
				appLog.error(fileName[1]+" is not found in "+PageName.CurrentInvestmentPgae.toString());
				sa.assertTrue(false, fileName[1]+" is not found in "+PageName.CurrentInvestmentPgae.toString());
			}
			/*saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, CRMUser2FirstName + " " + CRMUser2LastName, date);
			sa.combineAssertions(saa);*/
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}
		
		if (fp.verifyFolderPathdummy(stdPath, M7Institution2, M7LimitedPartner2, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			click(driver, ifp.getRefreshIcon(20), "Refresh Icon", action.SCROLLANDBOOLEAN);
			 
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, CRMUser2FirstName + " " + CRMUser2LastName, date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}


	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	
}

@Test
	public void M7tc071_CheckSortingAllPages() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
		
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.FundsPage)) {
					appLog.info("sorting is correctly present in content grid of "+cmnPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+cmnPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+cmnPath + " folder");
				}
			}
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.FundsPage)) {
					appLog.info("sorting is correctly present in content grid of "+intPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+intPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+intPath + " folder");
				}
			}
			
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.FundsPage)) {
					appLog.info("sorting is correctly present in content grid of "+shdPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+shdPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+shdPath + " folder");
				}
			}
			else {
				appLog.error(stdPath + " is not found on folder structure");
				sa.assertTrue(false, stdPath + " is not found on folder structure");
			}
			
			
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.FundsPage)) {
					appLog.info("sorting is correctly present in content grid of "+stdPath);
				}
				else {
					appLog.error("correct sorting is not present in "+stdPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+stdPath + " folder");
				}
			}
			else {
				appLog.error(stdPath + " is not found on folder structure");
				sa.assertTrue(false, stdPath + " is not found on folder structure");
			}
			switchToDefaultContent(driver);
		}
		else {
			appLog.error("cannot find fund "+M7FundName1+"on funds tab");
			sa.assertTrue(false, "cannot find fund "+M7FundName1+"on funds tab");
		}
		
	}
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.InstitutionsPage)) {
					appLog.info("sorting is correctly present in content grid of "+cmnPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+cmnPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+cmnPath + " folder");
				}
			}
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.InstitutionsPage)) {
					appLog.info("sorting is correctly present in content grid of "+intPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+intPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+intPath + " folder");
				}
			}
			
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.InstitutionsPage)) {
					appLog.info("sorting is correctly present in content grid of "+shdPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+shdPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+shdPath + " folder");
				}
			}
			else {
				appLog.error(stdPath + " is not found on folder structure");
				sa.assertTrue(false, stdPath + " is not found on folder structure");
			}
			
			
			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.InstitutionsPage)) {
					appLog.info("sorting is correctly present in content grid of "+stdPath);
				}
				else {
					appLog.error("correct sorting is not present in "+stdPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+stdPath + " folder");
				}
			}
			else {
				appLog.error(stdPath + " is not found on folder structure");
				sa.assertTrue(false, stdPath + " is not found on folder structure");
			}
			switchToDefaultContent(driver);
		}
	}
	if (ip.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			switchToFrame(driver, 30, cp.getFrame(PageName.ContactsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.ContactsPage)) {
					appLog.info("sorting is correctly present in content grid of "+cmnPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+cmnPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+cmnPath + " folder");
				}
			}
			
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.ContactsPage)) {
					appLog.info("sorting is correctly present in content grid of "+shdPath+" folder ");
				}
				else {
					appLog.error("correct sorting is not present in "+shdPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+shdPath + " folder");
				}
			}
			else {
				appLog.error(stdPath + " is not found on folder structure");
				sa.assertTrue(false, stdPath + " is not found on folder structure");
			}
			
			
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.ContactsPage)) {
					appLog.info("sorting is correctly present in content grid of "+stdPath);
				}
				else {
					appLog.error("correct sorting is not present in "+stdPath + " folder");
					sa.assertTrue(false, "correct sorting is not present in "+stdPath + " folder");
				}
			}
			else {
				appLog.error(stdPath + " is not found on folder structure");
				sa.assertTrue(false, stdPath + " is not found on folder structure");
			}
			switchToDefaultContent(driver);
		}
	}
	
	// InstitutionLP
	
			switchToDefaultContent(driver);
			if (fp.clickOnTab(TabName.InstituitonsTab)) {
				if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
					appLog.info("Opened Institution : " + M7LimitedPartner1);

					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					//Common
					
					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + cmnPath);
						
						if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.InstitutionsPage)) {
							appLog.info("sorting is correctly present in content grid of "+cmnPath+" folder ");
						}
						else {
							appLog.error("correct sorting is not present in "+cmnPath + " folder");
							sa.assertTrue(false, "correct sorting is not present in "+cmnPath + " folder");
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
					}
					
					
					// Internal
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + intPath);
						
						if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.InstitutionsPage)) {
							appLog.info("sorting is correctly present in content grid of "+intPath+" folder ");
						}
						else {
							appLog.error("correct sorting is not present in "+intPath + " folder");
							sa.assertTrue(false, "correct sorting is not present in "+intPath + " folder");
						}
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + intPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
					}
					
					
					// Shared
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + shdPath);
					
						if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.InstitutionsPage)) {
							appLog.info("sorting is correctly present in content grid of "+shdPath+" folder ");
						}
						else {
							appLog.error("correct sorting is not present in "+shdPath + " folder");
							sa.assertTrue(false, "correct sorting is not present in "+shdPath + " folder");
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
					}
					
					
					// Standard
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + stdPath);
						
						if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.InstitutionsPage)) {
							appLog.info("sorting is correctly present in content grid of "+stdPath+" folder ");
						}
						else {
							appLog.error("correct sorting is not present in "+stdPath + " folder");
							sa.assertTrue(false, "correct sorting is not present in "+stdPath + " folder");
						}
					
						
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
					}

				}else {
						appLog.error("Not able to Click Institution OR Institution is not Present: " + M7LimitedPartner1);
						sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7LimitedPartner1);
					}
				} else {
					appLog.error("Not able to Click Institution tab ");
					sa.assertTrue(false, "Not able to Click Institution tab ");
				}
			
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.CommitmentsTab)) {
				if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
					appLog.info("Opened Commitment  : " + M7Commitment1ID);
					switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					
					// Common
					
					if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + cmnPath);
						if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.CommitmentsPage)) {
							appLog.info("sorting is correctly present in content grid of "+cmnPath+" folder ");
						}
						else {
							appLog.error("correct sorting is not present in "+cmnPath + " folder");
							sa.assertTrue(false, "correct sorting is not present in "+cmnPath + " folder");
						}
						

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + cmnPath);
					}
					
					// INTERNAL
					
					if (fp.verifyFolderPathdummy(intPath, null, null, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + intPath);

						if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.CommitmentsPage)) {
							appLog.info("sorting is correctly present in content grid of "+intPath+" folder ");
						}
						else {
							appLog.error("correct sorting is not present in "+intPath + " folder");
							sa.assertTrue(false, "correct sorting is not present in "+intPath + " folder");
						}	

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + intPath);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + intPath);
					}
					
					
					
					// Shared
					
					if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + shdPath);

						if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.CommitmentsPage)) {
							appLog.info("sorting is correctly present in content grid of "+shdPath+" folder ");
						}
						else {
							appLog.error("correct sorting is not present in "+shdPath + " folder");
							sa.assertTrue(false, "correct sorting is not present in "+shdPath + " folder");
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + shdPath);
					}
				
					// Standard
					
					if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);

						if (fp.performSortingCheckOnAllColumns(Workspace.InvestorWorkspace, PageName.CommitmentsPage)) {
							appLog.info("sorting is correctly present in content grid of "+stdPath+" folder ");
						}
						else {
							appLog.error("correct sorting is not present in "+stdPath + " folder");
							sa.assertTrue(false, "correct sorting is not present in "+stdPath + " folder");
						}	


					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + stdPath);
					}

				} else {
					appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
				}
			} else {
				appLog.error("Not able to Click Commitment tab ");
				sa.assertTrue(false, "Not able to Click Commitment tab ");
			}
			switchToDefaultContent(driver);
			
	lp.CRMlogout();
	driver.close();
	config(ExcelUtils.readDataFromPropertyFile("Browser"));
	lp = new LoginPageBusinessLayer(driver);
	bp = new BasePageBusinessLayer(driver);
	fp = new FundsPageBusinessLayer(driver);
	ip = new InstitutionPageBusinessLayer(driver);
	cp = new ContactPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CurrentInvestmentPgae, Workspace.InvestorWorkspace, 60)) {
			if (ifp.performSortingCheckInvestorSideAllColumns(Workspace.InvestorWorkspace, PageName.CurrentInvestmentPgae)) {
				appLog.info("sorting is successful");
			}
			else {
				appLog.error("sorting could not be possible");
				sa.assertTrue(false, "sorting could not be possible");
			}
		}
		
		
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CurrentInvestmentPgae, Workspace.InvestorWorkspace, 60)) {
			if (ifp.performSortingCheckInvestorSideAllColumns(Workspace.InvestorWorkspace, PageName.CurrentInvestmentPgae)) {
				appLog.info("sorting is successful");
			}
			else {
				appLog.error("sorting could not be possible");
				sa.assertTrue(false, "sorting could not be possible");
			}
		}
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae, Workspace.InvestorWorkspace, 60)) {
			if (ifp.performSortingCheckInvestorSideAllColumns(Workspace.InvestorWorkspace, PageName.CurrentInvestmentPgae)) {
				appLog.info("sorting is successful");
			}
			else {
				appLog.error("sorting could not be possible");
				sa.assertTrue(false, "sorting could not be possible");
			}
		}
	}
	
	sa.assertAll();
}	

	@Test
	public void M7tc072_1_UpdateActionAtCommonFolderFundPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String parentID=null;
	SoftAssert saa = new SoftAssert();
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileCommon);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				//verifying view of update window
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Update, fileName, Workspace.InvestorWorkspace, 60, null)) {
					parentID = switchOnWindow(driver);
					if (fp.getUpdateWindowHeading(60).getText().trim().equals("Upload New Version")) {
						appLog.info("update heading is successfully verified");
					}
					else {
						appLog.error("update heading is wrong on update window");
						sa.assertTrue(false, "update heading is wrong on update window");
					}
					if (fp.getUpdatingTextLabel(60).getText().trim().equals("Updating:")) {
						appLog.info("updating text is successfully verified");
					}
					if (fp.getFileNameOnUpdateWindow(60).getText().trim().equals(fileName)) {
						appLog.info("file name "+fileName+ " is successfully verified on update window");
					}
					if (fp.getBrowseButtonUpdateWindow(60)!=null) {
						appLog.info("choose file button is successfully verified on update window");
					}
					if (fp.getUpdateButtonUpdateWindow(60)!=null) {
						appLog.info("update button is successfully verified on update window");
					}
					//selecting no file and clicking on update button
					if (click(driver, fp.getUpdateButtonUpdateWindow(60), "update button on update window", action.BOOLEAN)) {
						if (fp.getSelectDocumentErrorMsg(60).getText().trim().equals(FundsPageErrorMessage.updateDocumentErrorMsg)) {
							appLog.info("update error message is successfully verified when document is passed");
						}
					}
					if (sendKeys(driver, fp.getBrowseButtonUpdateWindow(60), System.getProperty("user.dir")+"//UploadFiles/Module8/ExistingUpdate//upload_upd.pdf", "choose file button on update window", action.SCROLLANDBOOLEAN)) {
						if (click(driver,fp.getUpdateButtonUpdateWindow(60),"update button on update window", action.BOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {
								String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
								switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
								if (msg.trim().equals(FundsPageErrorMessage.updateDocumentSuccessAlertMsg)) {
									appLog.info("correct message that document is updated is found successfully");
								}
								else {
									appLog.error("alert message that document is updated is not found");
									sa.assertTrue(false, "alert message that document is updated is not found");
								}
							}
							else {
								appLog.error("no alert message is present when correct file has been updated");
								sa.assertTrue(false, "no alert message is present when correct file has been updated");
							}
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {
								
								List<String> returnlist = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage));
								if (returnlist.isEmpty()) {
									appLog.info("updated file "+update_fileName+" is successfully found");
								}
								else {
									appLog.error("the updated file's name is not found on content grid");
								}
								//upload file with same name to check duplicate document error
								if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 60), "upload icon on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
									parentID = switchOnWindow(driver);
									if (fp.dragDropFiles("UploadFiles\\Module8\\ExistingUpdate", "DropLoc.jpg")) {
										ThreadSleep(5000);
										if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
											
											if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents heading is not present");
												sa.assertTrue(false, "duplicate documents heading is not present");
											}
											if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents sub heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents sub heading is not present");
												sa.assertTrue(false, "duplicate documents sub heading is not present");
											}
											if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
												appLog.info("folder location sub heading is successfully verified");
											}
											else {
												appLog.error("folder location sub heading is not visible");
												sa.assertTrue(false, "folder location sub heading is not visible");
											}
											if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
												appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
											}
											else {
												appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
											}
											if (fp.getUpdateAllButton(60)!=null) {
												appLog.info("update all button is present");
											}
											else {
												appLog.error("update all button is not present on duplicate document window");
												sa.assertTrue(false, "update all button is not present on duplicate document window");
											}
											if (fp.getIgnoreAllButton(60)!=null) {
												appLog.info("ignore all button is successfully present");
											}
											else {
												appLog.error("ignore all button is not present on duplicate docuemnts heading");
												sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
											}
											if (fp.getDuplicateDocumentValue(60).getText().trim().equals(update_fileName)) {
												appLog.info(update_fileName + " is duplicate according to alert window");
											}
											else {
												appLog.error("duplicate file name name is wrong on duplicate document window");
												sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
											}
											if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > "+cmnPath)) {
												appLog.info("folder name" + M7FundName1 + " > "+cmnPath+" for duplicate files is correct");
											}
											else {
												appLog.error("folder path for duplicate files is wrong");
												sa.assertTrue(false, "folder path for duplicate files is wrong");
											}
											if (click(driver, fp.getUpdateAllButton(60), "update all button on update window", action.SCROLLANDBOOLEAN)) {
												ThreadSleep(5000);
												if (isAlertPresent(driver)) {
													String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
													switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
													if (msg.trim().equals(FundsPageErrorMessage.DocumentUploadSuccessMsg)) {
														appLog.info("correct message that document is uploaded is found successfully");
													}
													else {
														appLog.error("alert message that document is uploaded is not found");
														sa.assertTrue(false, "alert message that document is uploaded is not found");
													}
												}
												else {
													appLog.error("no alert is present when successful document is uploaded");
												}
												driver.switchTo().window(parentID);
												switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
												if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {

													List<String> file_name = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage));
													if (file_name.isEmpty()) {
														appLog.info("updated file "+update_fileName+" is successfully found");
													}
													else {
														appLog.error("the updated file's name is not found on content grid");
													}
												}
												else {
													appLog.error("content grid refresh button is not clickable");
													sa.assertTrue(false, "content grid refresh button is not clickable");
												}
											}
											else {
												appLog.error("update all button on duplicate document window is not clickable");
												sa.assertTrue(false, "update all button on duplicate document window is not clickable");
											}
										}
										else {
											appLog.error("save button on upload window is not clickable");
											sa.assertTrue(false, "save button on upload window is not clickable");
										}
										}
									else {
										appLog.error("drag and drop of files to check duplicates is not successful");
										sa.assertTrue(false, "drag and drop of files to check duplicates is not successful");
									}
								}
								else {
									appLog.error("upload icon is not clickable on fundraising wokrpsace");
									sa.assertTrue(false, "upload icon is not clickable on fundraising wokrpsace");
								}
								
							}
							else {
								appLog.error("refresh button on content grid is not clickable");
								sa.assertTrue(false, "refresh button on content grid is not clickable");
							}
						}
						else {
							appLog.error("update button on update window is not clickable");
							sa.assertTrue(false, "update button on update window is not clickable");
						}
					}
					else {
						appLog.error("updated file path could not passed on browse button on update window");
						sa.assertTrue(false, "updated file path could not passed on browse button on update window");
					}
			}
				else {
					appLog.error("down arrow of document name specified cannot be found");
					sa.assertTrue(false, "down arrow of document name specified cannot be found");
				}
				
		}
			else {
				appLog.error("folder path "+cmnPath+" cannot be found");
				sa.assertTrue(false, "folder path "+cmnPath+" cannot be found");
			}
	}
		else {
			appLog.error("fund "+M7FundName1+" cannot be found");
			sa.assertTrue(false, "fund "+M7FundName1+" cannot be found");
		}
}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	}

@Test
	public void M7tc072_2_UpdateImpactAtCommonFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc072_1_UpdateActionAtCommonFolderFundPage";
	
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.CommonPath);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.KeyWord_For_Search);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	
	// Institution tab verify updated document name
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"fundrasising workspace view");

			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);

				if (update_fileName != null) {

					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, update_fileName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);
					//saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, update_fileName,
					//		"Approved", "PE Admin", date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + cmnPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	
	// Limited Tab
			switchToDefaultContent(driver);
			if (fp.clickOnTab(TabName.InstituitonsTab)) {
				if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
					appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					

					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + cmnPath);


						if (update_fileName != null) {


							saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, update_fileName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified LP : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified LP : " + cmnPath);
					}

				} else {
					appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
					sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
				}
			} else {
				appLog.error("Not able to Click Institution tab ");
				sa.assertTrue(false, "Not able to Click Institution tab ");
			}
			
			// Committment Tab
					switchToDefaultContent(driver);
					if (bp.clickOnTab(TabName.CommitmentsTab)) {
						if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
							appLog.info("Opened Commitment  : " + M7Commitment1ID);
							switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
							scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
									"Investor workspace view");
						

							if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CommitmentsPage,
									Workspace.InvestorWorkspace, 60)) {
								appLog.info(" Folder Structure Verified: " + cmnPath);


								if (update_fileName != null) {

								saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, update_fileName,
											"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

									sa.combineAssertions(saa);

								} else {
									appLog.error("No Files in Excel for Verifying Content Grid");
									sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
								}

							} else {
								appLog.error(" Folder Structure Not Verified  for Commitment : " + cmnPath);
								sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + cmnPath);
							}

						} else {
							appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
							sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
						}
					} else {
						appLog.error("Not able to Click Commitment tab ");
						sa.assertTrue(false, "Not able to Click Commitment tab ");
					}
	
		// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"fundraising workspace view");

					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + cmnPath);


						if (update_fileName != null) {

							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, update_fileName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);
							//saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, update_fileName,
							//		"Approved", "PE Admin", date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + cmnPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.combineAssertions(saa);
	sa.assertAll();
	}

@Test
	public void M7tc072_3_UpdateImpactAtCommonFolderInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	
	String date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc072_1_UpdateActionAtCommonFolderFundPage";
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.CommonPath);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.KeyWord_For_Search);
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, update_fileName, CRMUser1FirstName + " " + CRMUser1LastName, date);
				sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc073_1_UpdateActionAtInternalFolderFundPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String parentID=null;

	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileInternal);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				//verifying view of update window
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Update, fileName, Workspace.InvestorWorkspace, 60, null)) {
					parentID = switchOnWindow(driver);
					if (fp.getUpdateWindowHeading(60).getText().trim().equals("Upload New Version")) {
						appLog.info("update heading is successfully verified");
					}
					else {
						appLog.error("update heading is wrong on update window");
						sa.assertTrue(false, "update heading is wrong on update window");
					}
					if (fp.getUpdatingTextLabel(60).getText().trim().equals("Updating:")) {
						appLog.info("updating text is successfully verified");
					}
					if (fp.getFileNameOnUpdateWindow(60).getText().trim().equals(fileName)) {
						appLog.info("file name "+fileName+ " is successfully verified on update window");
					}
					if (fp.getBrowseButtonUpdateWindow(60)!=null) {
						appLog.info("choose file button is successfully verified on update window");
					}
					if (fp.getUpdateButtonUpdateWindow(60)!=null) {
						appLog.info("update button is successfully verified on update window");
					}
					//selecting no file and clicking on update button
					if (click(driver, fp.getUpdateButtonUpdateWindow(60), "update button on update window", action.BOOLEAN)) {
						if (fp.getSelectDocumentErrorMsg(60).getText().trim().equals(FundsPageErrorMessage.updateDocumentErrorMsg)) {
							appLog.info("update error message is successfully verified when document is passed");
						}
					}
					if (sendKeys(driver, fp.getBrowseButtonUpdateWindow(60), System.getProperty("user.dir")+"//UploadFiles/Module8/ExistingUpdate//"+update_fileName, "choose file button on update window", action.SCROLLANDBOOLEAN)) {
						if (click(driver,fp.getUpdateButtonUpdateWindow(60),"update button on update window", action.BOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {
								String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
								switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
								if (msg.trim().equals(FundsPageErrorMessage.updateDocumentSuccessAlertMsg)) {
									appLog.info("correct message that document is updated is found successfully");
								}
								else {
									appLog.error("alert message that document is updated is not found");
									sa.assertTrue(false, "alert message that document is updated is not found");
								}
							}
							else {
								appLog.error("no alert message is present when correct file has been updated");
								sa.assertTrue(false, "no alert message is present when correct file has been updated");
							}
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {
								
								List<String> returnlist = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage));
								if (returnlist.isEmpty()) {
									appLog.info("updated file "+update_fileName+" is successfully found");
								}
								else {
									appLog.error("the updated file's name is not found on content grid");
								}
								//upload file with same name to check duplicate document error
								if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 60), "upload icon on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
									parentID = switchOnWindow(driver);
									if (fp.dragDropFiles("UploadFiles\\Module8\\ExistingUpdate", "DropLoc.jpg")) {
										ThreadSleep(5000);
										if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
											
											if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents heading is not present");
												sa.assertTrue(false, "duplicate documents heading is not present");
											}
											if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents sub heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents sub heading is not present");
												sa.assertTrue(false, "duplicate documents sub heading is not present");
											}
											if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
												appLog.info("folder location sub heading is successfully verified");
											}
											else {
												appLog.error("folder location sub heading is not visible");
												sa.assertTrue(false, "folder location sub heading is not visible");
											}
											if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
												appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
											}
											else {
												appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
											}
											if (fp.getUpdateAllButton(60)!=null) {
												appLog.info("update all button is present");
											}
											else {
												appLog.error("update all button is not present on duplicate document window");
												sa.assertTrue(false, "update all button is not present on duplicate document window");
											}
											if (fp.getIgnoreAllButton(60)!=null) {
												appLog.info("ignore all button is successfully present");
											}
											else {
												appLog.error("ignore all button is not present on duplicate docuemnts heading");
												sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
											}
											if (fp.getDuplicateDocumentValue(60).getText().trim().equals(update_fileName)) {
												appLog.info(update_fileName + " is duplicate according to alert window");
											}
											else {
												appLog.error("duplicate file name name is wrong on duplicate document window");
												sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
											}
											if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > "+intPath)) {
												appLog.info("folder name" + M7FundName1 + " > "+intPath+" for duplicate files is correct");
											}
											else {
												appLog.error("folder path for duplicate files is wrong");
												sa.assertTrue(false, "folder path for duplicate files is wrong");
											}
											if (click(driver, fp.getUpdateAllButton(60), "update all button on update window", action.SCROLLANDBOOLEAN)) {
												ThreadSleep(5000);
												if (isAlertPresent(driver)) {
													String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
													switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
													if (msg.trim().equals(FundsPageErrorMessage.DocumentUploadSuccessMsg)) {
														appLog.info("correct message that document is uploaded is found successfully");
													}
													else {
														appLog.error("alert message that document is uploaded is not found");
														sa.assertTrue(false, "alert message that document is uploaded is not found");
													}
												}
												else {
													appLog.error("no alert is present when successful document is uploaded");
												}
												driver.switchTo().window(parentID);
												switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
												if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {

													List<String> file_name = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage));
													if (file_name.isEmpty()) {
														appLog.info("updated file "+update_fileName+" is successfully found");
													}
													else {
														appLog.error("the updated file's name is not found on content grid");
													}
												}
												else {
													appLog.error("content grid refresh button is not clickable");
													sa.assertTrue(false, "content grid refresh button is not clickable");
												}
											}
											else {
												appLog.error("update all button on duplicate document window is not clickable");
												sa.assertTrue(false, "update all button on duplicate document window is not clickable");
											}
										}
										else {
											appLog.error("save button on upload window is not clickable");
											sa.assertTrue(false, "save button on upload window is not clickable");
										}
									}
									else {
										appLog.error("drag and drop of files to check duplicates is not successful");
										sa.assertTrue(false, "drag and drop of files to check duplicates is not successful");
									}
								}
								else {
									appLog.error("upload icon is not clickable on fundraising wokrpsace");
									sa.assertTrue(false, "upload icon is not clickable on fundraising wokrpsace");
								}
								
							}
							else {
								appLog.error("refresh button on content grid is not clickable");
								sa.assertTrue(false, "refresh button on content grid is not clickable");
							}
						}
						else {
							appLog.error("update button on update window is not clickable");
							sa.assertTrue(false, "update button on update window is not clickable");
						}
					}
					else {
						appLog.error("updated file path could not passed on browse button on update window");
						sa.assertTrue(false, "updated file path could not passed on browse button on update window");
					}
			}
				else {
					appLog.error("down arrow of document name specified cannot be found");
					sa.assertTrue(false, "down arrow of document name specified cannot be found");
				}
				
		}
			else {
				appLog.error("folder path "+intPath+" cannot be found");
				sa.assertTrue(false, "folder path "+intPath+" cannot be found");
			}
	}
		else {
			appLog.error("fund "+M7FundName1+" cannot be found");
			sa.assertTrue(false, "fund "+M7FundName1+" cannot be found");
		}
}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	}

@Test
	public void M7tc073_2_UpdateImpactAtInternalFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc073_1_UpdateActionAtInternalFolderFundPage";
	
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.InternalPath);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.KeyWord_For_Search);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	
	// Institution tab verify updated document name
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"fundrasising workspace view");

			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + intPath);

				if (update_fileName != null) {

				
					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, update_fileName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);
					//saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, update_fileName,
					//		"Approved", "PE Admin", date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + intPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
	// Limited Tab
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
			appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			

			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + intPath);


				if (update_fileName != null) {


					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, update_fileName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified LP : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified LP : " + intPath);
			}

		} else {
			appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
	// Committment Tab
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.CommitmentsTab)) {
				if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
					appLog.info("Opened Commitment  : " + M7Commitment1ID);
					switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
				

					if (fp.verifyFolderPathdummy(intPath, null, null, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + intPath);


						if (update_fileName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, update_fileName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + intPath);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + intPath);
					}

				} else {
					appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
				}
			} else {
				appLog.error("Not able to Click Commitment tab ");
				sa.assertTrue(false, "Not able to Click Commitment tab ");
			}


	
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	}

@Test
	public void M7tc074_1_UpdateActionAtSharedFolderFundPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	String parentID=null;
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileShared);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				//verifying view of update window
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Update, fileName, Workspace.InvestorWorkspace, 60, null)) {
					parentID = switchOnWindow(driver);
					if (fp.getUpdateWindowHeading(60).getText().trim().equals("Upload New Version")) {
						appLog.info("update heading is successfully verified");
					}
					else {
						appLog.error("update heading is wrong on update window");
						sa.assertTrue(false, "update heading is wrong on update window");
					}
					if (fp.getUpdatingTextLabel(60).getText().trim().equals("Updating:")) {
						appLog.info("updating text is successfully verified");
					}
					if (fp.getFileNameOnUpdateWindow(60).getText().trim().equals(fileName)) {
						appLog.info("file name "+fileName+ " is successfully verified on update window");
					}
					if (fp.getBrowseButtonUpdateWindow(60)!=null) {
						appLog.info("choose file button is successfully verified on update window");
					}
					if (fp.getUpdateButtonUpdateWindow(60)!=null) {
						appLog.info("update button is successfully verified on update window");
					}
					//selecting no file and clicking on update button
					if (click(driver, fp.getUpdateButtonUpdateWindow(60), "update button on update window", action.BOOLEAN)) {
						if (fp.getSelectDocumentErrorMsg(60).getText().trim().equals(FundsPageErrorMessage.updateDocumentErrorMsg)) {
							appLog.info("update error message is successfully verified when document is passed");
						}
					}
					if (sendKeys(driver, fp.getBrowseButtonUpdateWindow(60), System.getProperty("user.dir")+"//UploadFiles/Module8/ExistingUpdate//"+update_fileName, "choose file button on update window", action.SCROLLANDBOOLEAN)) {
						if (click(driver,fp.getUpdateButtonUpdateWindow(60),"update button on update window", action.BOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {
								String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
								switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
								if (msg.trim().equals(FundsPageErrorMessage.updateDocumentSuccessAlertMsg)) {
									appLog.info("correct message that document is updated is found successfully");
								}
								else {
									appLog.error("alert message that document is updated is not found");
									sa.assertTrue(false, "alert message that document is updated is not found");
								}
							}
							else {
								appLog.error("no alert message is present when correct file has been updated");
								sa.assertTrue(false, "no alert message is present when correct file has been updated");
							}
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {
								
								List<String> returnlist = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage));
								if (returnlist.isEmpty()) {
									appLog.info("updated file "+update_fileName+" is successfully found");
								}
								else {
									appLog.error("the updated file's name is not found on content grid");
								}
								//upload file with same name to check duplicate document error
								if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 60), "upload icon on "+Workspace.InvestorWorkspace.toString(), action.SCROLLANDBOOLEAN)) {
									parentID = switchOnWindow(driver);
									if (fp.dragDropFiles("UploadFiles\\Module8\\ExistingUpdate", "DropLoc.jpg")) {
										ThreadSleep(5000);
										if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
											
											if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents heading is not present");
												sa.assertTrue(false, "duplicate documents heading is not present");
											}
											if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents sub heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents sub heading is not present");
												sa.assertTrue(false, "duplicate documents sub heading is not present");
											}
											if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
												appLog.info("folder location sub heading is successfully verified");
											}
											else {
												appLog.error("folder location sub heading is not visible");
												sa.assertTrue(false, "folder location sub heading is not visible");
											}
											if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
												appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
											}
											else {
												appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
											}
											if (fp.getUpdateAllButton(60)!=null) {
												appLog.info("update all button is present");
											}
											else {
												appLog.error("update all button is not present on duplicate document window");
												sa.assertTrue(false, "update all button is not present on duplicate document window");
											}
											if (fp.getIgnoreAllButton(60)!=null) {
												appLog.info("ignore all button is successfully present");
											}
											else {
												appLog.error("ignore all button is not present on duplicate docuemnts heading");
												sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
											}
											if (fp.getDuplicateDocumentValue(60).getText().trim().equals(update_fileName)) {
												appLog.info(update_fileName + " is duplicate according to alert window");
											}
											else {
												appLog.error("duplicate file name name is wrong on duplicate document window");
												sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
											}
											if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > "+shdPath)) {
												appLog.info("folder name" + M7FundName1 + " > "+shdPath+" for duplicate files is correct");
											}
											else {
												appLog.error("folder path for duplicate files is wrong");
												sa.assertTrue(false, "folder path for duplicate files is wrong");
											}
											if (click(driver, fp.getUpdateAllButton(60), "update all button on update window", action.SCROLLANDBOOLEAN)) {
												ThreadSleep(5000);
												if (isAlertPresent(driver)) {
													String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
													switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
													if (msg.trim().equals(FundsPageErrorMessage.DocumentUploadSuccessMsg)) {
														appLog.info("correct message that document is uploaded is found successfully");
													}
													else {
														appLog.error("alert message that document is uploaded is not found");
														sa.assertTrue(false, "alert message that document is uploaded is not found");
													}
												}
												else {
													appLog.error("no alert is present when successful document is uploaded");
												}
												driver.switchTo().window(parentID);
												switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
												if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {

													List<String> file_name = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage));
													if (file_name.isEmpty()) {
														appLog.info("updated file "+update_fileName+" is successfully found");
													}
													else {
														appLog.error("the updated file's name is not found on content grid");
													}
												}
												else {
													appLog.error("content grid refresh button is not clickable");
													sa.assertTrue(false, "content grid refresh button is not clickable");
												}
											}
											else {
												appLog.error("update all button on duplicate document window is not clickable");
												sa.assertTrue(false, "update all button on duplicate document window is not clickable");
											}
										}
										else {
											appLog.error("save button on upload window is not clickable");
											sa.assertTrue(false, "save button on upload window is not clickable");
										}
										}
									else {
										appLog.error("drag and drop of files to check duplicates is not successful");
										sa.assertTrue(false, "drag and drop of files to check duplicates is not successful");
									}
								}
								else {
									appLog.error("upload icon is not clickable on fundraising wokrpsace");
									sa.assertTrue(false, "upload icon is not clickable on fundraising wokrpsace");
								}
								
							}
							else {
								appLog.error("refresh button on content grid is not clickable");
								sa.assertTrue(false, "refresh button on content grid is not clickable");
							}
						}
						else {
							appLog.error("update button on update window is not clickable");
							sa.assertTrue(false, "update button on update window is not clickable");
						}
					}
					else {
						appLog.error("updated file path could not passed on browse button on update window");
						sa.assertTrue(false, "updated file path could not passed on browse button on update window");
					}
			}
				else {
					appLog.error("down arrow of document name specified cannot be found");
					sa.assertTrue(false, "down arrow of document name specified cannot be found");
				}
				
		}
			else {
				appLog.error("folder path "+shdPath+" cannot be found");
				sa.assertTrue(false, "folder path "+shdPath+" cannot be found");
			}
	}
		else {
			appLog.error("fund "+M7FundName1+" cannot be found");
			sa.assertTrue(false, "fund "+M7FundName1+" cannot be found");
		}
}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	}

@Test
	public void M7tc074_2_UpdateImpactAtSharedFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc074_1_UpdateActionAtSharedFolderFundPage";
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.SharedPath);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.KeyWord_For_Search);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	
	
	// Institution tab verify updated document name
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"fundrasising workspace view");

			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + shdPath);

				if (update_fileName != null) {

					date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, update_fileName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);
					//saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, update_fileName,
					//		"Approved", "PE Admin", date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + shdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	
	// Limited Tab
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
			appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			

			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + shdPath);


				if (update_fileName != null) {


					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, update_fileName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified LP : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified LP : " + shdPath);
			}

		} else {
			appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	
	// Committment Tab
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.CommitmentsTab)) {
				if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
					appLog.info("Opened Commitment  : " + M7Commitment1ID);
					switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
				

					if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + shdPath);


						if (update_fileName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, update_fileName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + shdPath);
					}

				} else {
					appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
				}
			} else {
				appLog.error("Not able to Click Commitment tab ");
				sa.assertTrue(false, "Not able to Click Commitment tab ");
			}
		// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"fundraising workspace view");

					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + shdPath);


						if (update_fileName != null) {

							saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, update_fileName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);
							//saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, update_fileName,
							//		"Approved", "PE Admin", date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + shdPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	}

	@Test
	public void M7tc074_3_UpdateImpactAtSharedFolderInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc074_1_UpdateActionAtSharedFolderFundPage";
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.SharedPath);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.KeyWord_For_Search);

	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdPath);
			saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, update_fileName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			//saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, update_fileName, "PE Admin", date);
			sa.combineAssertions(saa);
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
	}

@Test
	public void M7tc075_1_UpdateActionAtStandardFolderSingleInstitutionFundPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String parentID=null;
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				//verifying view of update window
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Update, fileName, Workspace.InvestorWorkspace, 60, null)) {
					parentID = switchOnWindow(driver);
					if (fp.getUpdateWindowHeading(60).getText().trim().equals("Upload New Version")) {
						appLog.info("update heading is successfully verified");
					}
					else {
						appLog.error("update heading is wrong on update window");
						sa.assertTrue(false, "update heading is wrong on update window");
					}
					if (fp.getUpdatingTextLabel(60).getText().trim().equals("Updating:")) {
						appLog.info("updating text is successfully verified");
					}
					else {
						appLog.error("updating text is not present");
						sa.assertTrue(false, "updating text is not present");
					}
					if (fp.getFileNameOnUpdateWindow(60).getText().trim().equals(fileName)) {
						appLog.info("file name "+fileName+ " is successfully verified on update window");
					}
					else {
						appLog.error("file name "+fileName+ " is not present on update window");
						sa.assertTrue(false, "file name "+fileName+ " is not present on update window");
					}
					if (fp.getBrowseButtonUpdateWindow(60)!=null) {
						appLog.info("choose file button is successfully verified on update window");
					}
					else {
						appLog.error("choose file button is not present on update window");
						sa.assertTrue(false, "choose file button is not present on update window");
					}
					if (fp.getUpdateButtonUpdateWindow(60)!=null) {
						appLog.info("update button is successfully verified on update window");
					}
					else {
						appLog.error("update button is not present on update window");
						sa.assertTrue(false, "update button is not present on update window");
					}
					//selecting no file and clicking on update button
					if (click(driver, fp.getUpdateButtonUpdateWindow(60), "update button on update window", action.BOOLEAN)) {
						if (fp.getSelectDocumentErrorMsg(60).getText().trim().equals(FundsPageErrorMessage.updateDocumentErrorMsg)) {
							appLog.info("update error message is successfully verified when document is passed");
						}
						else {
							appLog.error("update error message is wrong present on update window");
							sa.assertTrue(false, "update error message is wrong present on update window");
						}
					}
					if (sendKeys(driver, fp.getBrowseButtonUpdateWindow(60), System.getProperty("user.dir")+"//UploadFiles/Module8/ExistingUpdate//"+update_fileName, "choose file button on update window", action.SCROLLANDBOOLEAN)) {
						if (click(driver,fp.getUpdateButtonUpdateWindow(60),"update button on update window", action.BOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {
								String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
								switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
								if (msg.trim().equals(FundsPageErrorMessage.updateDocumentSuccessAlertMsg)) {
									appLog.info("correct message that document is updated is found successfully");
								}
								else {
									appLog.error("alert message that document is updated is not found");
									sa.assertTrue(false, "alert message that document is updated is not found");
								}
							}
							else {
								appLog.error("no alert message is present when correct file has been updated");
								sa.assertTrue(false, "no alert message is present when correct file has been updated");
							}
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {
								
								List<String> returnlist = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage));
								if (returnlist.isEmpty()) {
									appLog.info("updated file "+update_fileName+" is successfully found");
								}
								else {
									appLog.error("the updated file's name is not found on content grid");
									sa.assertTrue(false, "the updated file's name is not found on content grid");
								}
								//upload file with same name to check duplicate document error
								if (click(driver, fp.getUploadIcon(Workspace.InvestorWorkspace, 60), "upload icon on fundraising workspace", action.SCROLLANDBOOLEAN)) {
									parentID = switchOnWindow(driver);
									//select single institution
									click(driver, fp.getUploadNextButton(Workspace.InvestorWorkspace, 60), "next button on uplaod window standard folder", action.SCROLLANDBOOLEAN);
									if (fp.dragDropFiles("UploadFiles\\Module8\\ExistingUpdate", "DropLoc.jpg")) {
										ThreadSleep(5000);
										if (click(driver, fp.getUploadSaveButton(60), "save button on upload window", action.SCROLLANDBOOLEAN)) {
											
											if (fp.getDuplicateDocumentsHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents heading is not present");
												sa.assertTrue(false, "duplicate documents heading is not present");
											}
											if (fp.getDuplicateDocumentsSubHeadText(60).getText().trim().equals("Duplicate Documents")) {
												appLog.info("duplicate documents sub heading is successfully verified");
											}
											else {
												appLog.error("duplicate documents sub heading is not present");
												sa.assertTrue(false, "duplicate documents sub heading is not present");
											}
											if (fp.getFolderLocationSubHead(60).getText().trim().equals("Folder Location")) {
												appLog.info("folder location sub heading is successfully verified");
											}
											else {
												appLog.error("folder location sub heading is not visible");
												sa.assertTrue(false, "folder location sub heading is not visible");
											}
											if (fp.getDuplicateDocumentsTextUnderHeading(60).getText().trim().equals(FundsPageErrorMessage.duplicateDocumentsTextUnderHeading)) {
												appLog.info("text present to ask how to handle duplicate documents is displayed successfully");
											}
											else {
												appLog.error("text present to ask how to handle duplicate documents is displayed successfully");
											}
											if (fp.getUpdateAllButton(60)!=null) {
												appLog.info("update all button is present");
											}
											else {
												appLog.error("update all button is not present on duplicate document window");
												sa.assertTrue(false, "update all button is not present on duplicate document window");
											}
											if (fp.getIgnoreAllButton(60)!=null) {
												appLog.info("ignore all button is successfully present");
											}
											else {
												appLog.error("ignore all button is not present on duplicate docuemnts heading");
												sa.assertTrue(false, "ignore all button is not present on duplicate docuemnts heading");
											}
											if (fp.getDuplicateDocumentValue(60).getText().trim().equals(update_fileName)) {
												appLog.info(update_fileName + " is duplicate according to alert window");
											}
											else {
												appLog.error("duplicate file name name is wrong on duplicate document window");
												sa.assertTrue(false, "duplicate file name name is wrong on duplicate document window");
											}
											if (fp.getDuplicateFileInFolder(60).getText().trim().contains(M7FundName1 + " > "+M7Institution1 + " > "+M7LimitedPartner1+" > " + stdPath)) {
												appLog.info("folder name" + M7FundName1 + " > "+M7Institution1 + " > "+M7LimitedPartner1+" > " + stdPath+" for duplicate files is correct");
											}
											else {
												appLog.error("folder path for duplicate files is wrong");
												sa.assertTrue(false, "folder path for duplicate files is wrong");
											}
											if (click(driver, fp.getUpdateAllButton(60), "update all button on update window", action.SCROLLANDBOOLEAN)) {
												ThreadSleep(5000);
												if (isAlertPresent(driver)) {
													String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
													switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
													if (msg.trim().equals(FundsPageErrorMessage.DocumentUploadSuccessMsg)) {
														appLog.info("correct message that document is uploaded is found successfully");
													}
													else {
														appLog.error("alert message that document is uploaded is not found");
														sa.assertTrue(false, "alert message that document is uploaded is not found");
													}
												}
												else {
													appLog.error("no alert is present when successful document is uploaded");
												}
												driver.switchTo().window(parentID);
												switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
												if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {

													List<String> file_name = compareMultipleList(driver, update_fileName, fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage));
													if (file_name.isEmpty()) {
														appLog.info("updated file "+update_fileName+" is successfully found");
													}
													else {
														appLog.error("the updated file's name is not found on content grid");
													}
												}
												else {
													appLog.error("content grid refresh button is not clickable");
													sa.assertTrue(false, "content grid refresh button is not clickable");
												}
											}
											else {
												appLog.error("update all button on duplicate document window is not clickable");
												sa.assertTrue(false, "update all button on duplicate document window is not clickable");
											}
										}
										else {
											appLog.error("save button on upload window is not clickable");
											sa.assertTrue(false, "save button on upload window is not clickable");
										}
									}
									else {
										appLog.error("drag and drop of files to check duplicates is not successful");
										sa.assertTrue(false, "drag and drop of files to check duplicates is not successful");
									}
								}
								else {
									appLog.error("upload icon is not clickable on fundraising wokrpsace");
									sa.assertTrue(false, "upload icon is not clickable on fundraising wokrpsace");
								}
								
							}
							else {
								appLog.error("refresh button on content grid is not clickable");
								sa.assertTrue(false, "refresh button on content grid is not clickable");
							}
						}
						else {
							appLog.error("update button on update window is not clickable");
							sa.assertTrue(false, "update button on update window is not clickable");
						}
					}
					else {
						appLog.error("updated file path could not passed on browse button on update window");
						sa.assertTrue(false, "updated file path could not passed on browse button on update window");
					}
			}
				else {
					appLog.error("down arrow of document name specified cannot be found");
					sa.assertTrue(false, "down arrow of document name specified cannot be found");
				}
				
		}
			else {
				appLog.error("folder path "+stdPath+" cannot be found");
				sa.assertTrue(false, "folder path "+stdPath+" cannot be found");
			}
	}
		else {
			appLog.error("fund "+M7FundName1+" cannot be found");
			sa.assertTrue(false, "fund "+M7FundName1+" cannot be found");
		}
}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	switchToDefaultContent(driver);
	
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc075_2_UpdateImpactStandardFolderSingleInstitutionAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

	
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc075_1_UpdateActionAtStandardFolderSingleInstitutionFundPage";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.StandardPath);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.KeyWord_For_Search);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	
	
	// Institution tab verify updated document name
	

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"fundrasising workspace view");

			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				if (update_fileName != null) {
					saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, update_fileName,
							"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);
					sa.combineAssertions(saa);

				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}

	// Limited Tab
			switchToDefaultContent(driver);
			if (fp.clickOnTab(TabName.InstituitonsTab)) {
				if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
					appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					

					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);


						if (update_fileName != null) {


							saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, update_fileName,
									"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified LP : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified LP : " + stdPath);
					}

				} else {
					appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
					sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
				}
			} else {
				appLog.error("Not able to Click Institution tab ");
				sa.assertTrue(false, "Not able to Click Institution tab ");
			}
			
			// Committment Tab
					switchToDefaultContent(driver);
					if (bp.clickOnTab(TabName.CommitmentsTab)) {
						if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
							appLog.info("Opened Commitment  : " + M7Commitment1ID);
							switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
							scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
									"Investor workspace view");
						

							if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, null, PageName.CommitmentsPage,
									Workspace.InvestorWorkspace, 60)) {
								appLog.info(" Folder Structure Verified: " + stdPath);


								if (update_fileName != null) {

									HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPage(30, Workspace.InvestorWorkspace), By.xpath("//div[@class='contacts_n_name_div']//span[contains(@id,'myGrid-cell-0-')]//a/u"));
									
									appLog.info("Element of set "+set);
								
								if (set.contains(update_fileName)) {
									appLog.info(update_fileName+" was successfully found in "+PageName.ContactsPage.toString());
									
								}else{
									appLog.error(update_fileName+"  not found in "+PageName.ContactsPage.toString());
									sa.assertTrue(false, update_fileName+"  not found in "+PageName.ContactsPage.toString());
									
								}
								
									
							/*	saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, update_fileName,
											"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

									sa.combineAssertions(saa);*/

								} else {
									appLog.error("No Files in Excel for Verifying Content Grid");
									sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
								}

							} else {
								appLog.error(" Folder Structure Not Verified  for Commitment : " + stdPath);
								sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + stdPath);
							}

						} else {
							appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
							sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
						}
					} else {
						appLog.error("Not able to Click Commitment tab ");
						sa.assertTrue(false, "Not able to Click Commitment tab ");
					}
	
		// Contact Tab
			
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"fundraising workspace view");

					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);


						if (update_fileName != null) {
							HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPageInvestorSpace(30), By.xpath("//div[@id='divInvWorkspace']//span[contains(@id,'myGrid-cell-0-')]//a/u"));
							if (set.contains(update_fileName)) {
								appLog.info(update_fileName+" is successfully found in "+PageName.ContactsPage.toString());
							}
							else {
								appLog.error(update_fileName+" is not found in "+PageName.ContactsPage.toString());
								sa.assertTrue(false, update_fileName+" is not found in "+PageName.ContactsPage.toString());
							}
							sa.combineAssertions(saa);

						} else {
							appLog.error("No Files in Excel for Verifying Content Grid");
							sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
						}

					} else {
						appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc075_3_UpdateImpactStandardFolderSingleInstitutionInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);

	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

	
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc075_1_UpdateActionAtStandardFolderSingleInstitutionFundPage";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.StandardPath);
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.KeyWord_For_Search);
	

	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
		if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			
			HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));

			if (set.contains(update_fileName)) {
				appLog.info(
						update_fileName + " was succesfully found in " + PageName.CurrentInvestmentPgae.toString());
			} else {
				appLog.error(update_fileName + " was not found in " + PageName.CurrentInvestmentPgae.toString());
				sa.assertTrue(false,
						update_fileName + " was not found in " + PageName.CurrentInvestmentPgae.toString());
			}
			/*saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, update_fileName, CRMUser1FirstName + " " + CRMUser1LastName, date);
			sa.combineAssertions(saa);*/
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}
	lp.investorLogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test	
	public void M7tc076_1_UpdateActionAtStandardFolderMultipleInstitutionFundPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	String parentID=null;
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	//upload_mult1.pdf, upload_mult2.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	String fileArray[] = fileName.split(",");
	
	//update_mult1.pdf, update_mult2.pdf
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String update_fileArray[] = update_fileName.split(",");
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 30)) {
				
			}
			else {
				appLog.error("folder "+stdPath+" was not found on "+PageName.FundsPage.toString());
				sa.assertTrue(false, "folder "+stdPath+" was not found on "+PageName.FundsPage.toString());
			}
				//upload_mult1.pdf in filearray[0]
			int i =0;
			boolean flag=false;
			while(true) {
				List<WebElement> ele=fp.getColumnHeadsInvestor();
				List<WebElement>listOfVisibleElements = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
				for (int j = 0;j<listOfVisibleElements.size();j++) {
					String a = listOfVisibleElements.get(j).getText().trim();
					if (a.equalsIgnoreCase(fileArray[0])) {
						appLog.info(fileArray[0]+" is available in the content grid");
						fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Update, fileArray[0], Workspace.InvestorWorkspace, 60, null);
						flag=true;
						break;
					}
					if(j==listOfVisibleElements.size()-1){
						appLog.error(fileArray[0]+"file is not present in the  content grid");
					}
				}
				if(flag){
					break;					
				}else {
					i++;
					if(i==2){
						appLog.error(fileArray[0]+" is not available in the content grid ");
						sa.assertTrue(false,fileArray[0]+" is not available in the content grid");
						break;
					}
				}
				click(driver, ele.get(0),"document name column head", action.SCROLLANDBOOLEAN);
			}
					click(driver, fp.getColumnHeadsInvestor().get(0), "document name column name", action.SCROLLANDBOOLEAN);
					click(driver,fp.getSortingArrowInvestor().get(0), "sorting arrow for document name", action.BOOLEAN);
					//upload_mult1.pdf in filearray[0]
				
				parentID = switchOnWindow(driver);
				if (fp.getMultipleInstancesHead(60).getText().trim().equals("Multiple Instances Found")) {
					appLog.info("multiple instances heading is successfully displayed");
				}
				else {
					appLog.error("multiple instance heading is not present");
					sa.assertTrue(false, "multiple instance heading is not present");
				}
				if (fp.getThisOrAllInvestorText(60).getText().trim().equals(FundsPageErrorMessage.thisOrAllInvestor)) {
					appLog.info("text for this or all investor is successfully displayed on update window");
				}
				else {
					appLog.error("text for this or all investor is not present on update window");
					sa.assertTrue(false, "text for this or all investor is not present on update window");
				}
				if (fp.getThisInvestorOnlyButton(60)!=null) {
					appLog.info("button to select this investor only is successfully displayed on update window");
				}
				else {
					appLog.error("button to select this investor only is not present on update window");
					sa.assertTrue(false, "button to select this investor only is not present on update window");
				}
				if (fp.getAllInvestorButton(60)!=null) {
					appLog.info("button to select all investors is successfully displayed on update window");
				}
				else {
					appLog.error("button to select all investors is not present on update window");
					sa.assertTrue(false, "button to select all investors is not present on update window");
				}
				if (click(driver, fp.getThisInvestorOnlyButton(60), "this investor only button update window", action.SCROLLANDBOOLEAN)) {
					if (sendKeys(driver, fp.getChooseFileButton(60), System.getProperty("user.dir")+"//UploadFiles/Module8/update_mult1.pdf", "choose file button", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.getUpdateButtonUpdateWindow(60), "update button on update window", action.SCROLLANDBOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {
								String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
								switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
								if (msg.trim().equals(FundsPageErrorMessage.updateDocumentSuccessAlertMsg)) {
									appLog.info("correct message that document is updated is found successfully");
								}
								else {
									appLog.error("alert message that document is updated is not found");
									sa.assertTrue(false, "alert message that document is updated is not found");
								}
							}
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							//verifying update_mult1.pdf will be present in institution 1
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 60), "content grid refresh button", action.SCROLLANDBOOLEAN)) {
								List<WebElement> docList = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
								List<String> docName = new ArrayList<String>();
								for (WebElement ele1 : docList) {
									docName.add(ele1.getText().trim());
								}
								appLog.info("Document List :  "+docName);
								if(!docName.contains(update_fileArray[0])){
									appLog.error("Document Not Present In the Grid : "+update_fileArray[0]);
									sa.assertTrue(false, "Document Not Present In the Grid : "+update_fileArray[0]);
								}else{
									appLog.info("Document  Present In the Grid : "+update_fileArray[0]);
									
								}
								if (fp.verifyFolderPathdummy(stdPath, M7Institution2, M7LimitedPartner2, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 30)) {
									//verifying update_mult1.pdf will not be present in institution2
									if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 60), "content grid refresh button", action.SCROLLANDBOOLEAN)) {
										List<WebElement> docInst2List = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
										List<String> docInst2Name = new ArrayList<String>();
										for (WebElement ele1 : docInst2List) {
											docInst2Name.add(ele1.getText().trim());
										}
										appLog.info("Document List :  "+docInst2Name);
										if(docInst2Name.contains(update_fileArray[0])){
											appLog.error("Document Present In the Grid : "+update_fileArray[0]);
											sa.assertTrue(false, "Document Present In the Grid : "+update_fileArray[0]);
										}else{
											appLog.info("Document not Present In the Grid : "+update_fileArray[0]);
											
										}
								}
									else {
										appLog.error("content grid refresh button is not clickable");
										sa.assertTrue(false, "content grid refresh button is not clickable");
									}
							}
								else {
									appLog.error(stdPath + " is not present in folder structure");
									sa.assertTrue(false, stdPath + " is not present in folder structure");
								}
						}
							else {
								appLog.error("content grid refresh button is not clickable");
								sa.assertTrue(false, "content grid refresh button is not clickable");
							}
					}
						else {
							appLog.error("update button on update window is not clickable");
							sa.assertTrue(false, "update button on update window is not clickable");
						}
				}
					else {
						appLog.error("choose file/browse button is not visible on update window");
						sa.assertTrue(false, "choose file/browse button is not visible on update window");
					}
				}
				else {
					appLog.error("this investor only button is not clickable on duplicate files update window");
					sa.assertTrue(false, "this investor only button is not clickable on duplicate files update window");
				}
			
		}
			else {
				appLog.error(stdPath + " is not present in folder structure");
				sa.assertTrue(false, stdPath + " is not present in folder structure");
			}
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				//selecting 2nd file upload_mult2.pdf in fileArray[1]
				try {
					fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Update,fileArray[1] , Workspace.InvestorWorkspace, 60, null);
				}
				catch(Exception e) {
							click(driver, fp.getColumnHeadsInvestor().get(0), "document name column name", action.SCROLLANDBOOLEAN);
							click(driver,fp.getSortingArrowInvestor().get(0), "sorting arrow for document name", action.BOOLEAN);
							fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Update,fileArray[1] , Workspace.InvestorWorkspace, 60, null);
				}
					parentID = switchOnWindow(driver);
					
					if (click(driver, fp.getAllInvestorButton(60), "this investor only button update window", action.SCROLLANDBOOLEAN)) {
						if (sendKeys(driver, fp.getChooseFileButton(60), System.getProperty("user.dir")+"//UploadFiles//Module8//"+update_fileArray[1], "choose file button", action.SCROLLANDBOOLEAN)) {
							if (click(driver, fp.getUpdateButtonUpdateWindow(60), "update button on update window", action.SCROLLANDBOOLEAN)) {
								ThreadSleep(5000);
								if (isAlertPresent(driver)) {
									String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
									switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
									if (msg.trim().equals(FundsPageErrorMessage.updateDocumentSuccessAlertMsg)) {
										appLog.info("correct message that document is updated is found successfully");
									}
									else {
										appLog.error("alert message that document is updated is not found");
										sa.assertTrue(false, "alert message that document is updated is not found");
									}
								}
								driver.switchTo().window(parentID);
								switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
								//verifying update_mult2.pdf will be present in institution 1
								if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 60), "content grid refresh button", action.SCROLLANDBOOLEAN)) {
									List<WebElement> docList = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
									List<String> docName = new ArrayList<String>();
									for (WebElement ele1 : docList) {
										docName.add(ele1.getText().trim());
									}
									appLog.info("Document List :  "+docName);
									if(!docName.contains(update_fileArray[1])){
										appLog.error("Document Not Present In the Grid : "+update_fileArray[1]);
										sa.assertTrue(false, "Document Not Present In the Grid : "+update_fileArray[1]);
									}else{
										appLog.info("Document  Present In the Grid : "+update_fileArray[1]);
										
									}
									if (fp.verifyFolderPathdummy(stdPath, M7Institution2, M7LimitedPartner2, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 30)) {
										//verifying update_mult2.pdf will present in institution2
										if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 60), "content grid refresh button", action.SCROLLANDBOOLEAN)) {
											List<WebElement> docInst2List = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.FundsPage);
											List<String> docInst2Name = new ArrayList<String>();
											for (WebElement ele1 : docInst2List) {
												docInst2Name.add(ele1.getText().trim());
											}
											appLog.info("Document List :  "+docInst2Name);
											if(!docInst2Name.contains(update_fileArray[1])){
												appLog.error("Document Not Present In the Grid : "+update_fileArray[1]);
												sa.assertTrue(false, "Document Not Present In the Grid : "+update_fileArray[1]);
											}else{
												appLog.info("Document  Present In the Grid : "+update_fileArray[1]);
												
											}
									}
										else {
											appLog.error("content grid refresh button is not clickable");
											sa.assertTrue(false, "content grid refresh button is not clickable");
										}
								}
									else {
										appLog.error(stdPath + " is not found in folder path");
										sa.assertTrue(false, stdPath + " is not found in folder path");
									}
					
								}
								else {
									appLog.error("content grid refresh button is not clickable");
									sa.assertTrue(false, "content grid refresh button is not clickable");
								}
							}
							else {
								appLog.error("update button on update window is not clickable");
								sa.assertTrue(false, "update button on update window is not clickable");
							}
						}
						else {
							appLog.error("choose file button is not visible on update window");
							sa.assertTrue(false, "choose file button is not visible on update window");
						}
					}
					else {
						appLog.error("all investor button is not clickable on clash of duplicate file to update");
						sa.assertTrue(false, "all investor button is not clickable on clash of duplicate file to update");
					}
			
			}
			else {
				appLog.error(stdPath + " is not present in folder structure");
				sa.assertTrue(false,stdPath + " is not present in folder structure" );
			}
		
	}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.combineAssertions(saa);
	sa.assertAll();
}

@Test
	public void M7tc076_2_UpdateImpactAtStandardFolderMultipleInstitutionAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);

	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc076_1_UpdateActionAtStandardFolderMultipleInstitutionFundPage";
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.StandardPath);
	//upload_mult1.pdf, upload_mult2.pdf
	
	
	//update_mult1.pdf, update_mult2.pdf
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.KeyWord_For_Search);
	String update_fileArray[] = update_fileName.split(",");
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	
	//Institution 1
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"fundrasising workspace view");

			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);
				//update_mult1.pdf and update_mult2.pdf will be present in institution 1
				List<WebElement> docInst1List = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.InstitutionsPage);
				if (docInst1List != null) {
					List<String> docInst1Name = new ArrayList<String>();
					for (WebElement ele1 : docInst1List) {
						docInst1Name.add(ele1.getText().trim());
					}
					appLog.info("Document List :  "+docInst1Name);
					
					if(!docInst1Name.contains(update_fileArray[0])){
						appLog.error("Document Not Present In the Grid : "+update_fileArray[0]);
						sa.assertTrue(false, "Document Not Present In the Grid : "+update_fileArray[0]);
					}else{
						appLog.info("Document  Present In the Grid : "+update_fileArray[0]);
						
					}
					if(!docInst1Name.contains(update_fileArray[1])){
						appLog.error("Document Not Present In the Grid : "+update_fileArray[1]);
						sa.assertTrue(false, "Document Not Present In the Grid : "+update_fileArray[1]);
					}else{
						appLog.info("Document  Present In the Grid : "+update_fileArray[1]);
						
					}
				} else {
					appLog.error("No elements for Verifying Content Grid");
					sa.assertTrue(false, "No elements for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}
	switchToDefaultContent(driver);
	//Institution 2
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution2)) {
			appLog.info("Opened Institution : " + M7Institution2);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"fundrasising workspace view");

			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner2, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);
				//update_mult2.pdf will be present in institutions2
				
					List<WebElement> docInst2List = fp.getContentGridDocNameList(Workspace.InvestorWorkspace, PageName.InstitutionsPage);
				if (docInst2List != null) {
					List<String> docInst2Name = new ArrayList<String>();
					for (WebElement ele1 : docInst2List) {
						docInst2Name.add(ele1.getText().trim());
					}
					appLog.info("Document List :  "+docInst2Name);
					if(!docInst2Name.contains(update_fileArray[1])){
						appLog.error("Document Not Present In the Grid : "+update_fileArray[1]);
						sa.assertTrue(false, "Document Not Present In the Grid : "+update_fileArray[1]);
					}else{
						appLog.info("Document  Present In the Grid : "+update_fileArray[1]);
						
					}
					
				} else {
					appLog.error("No Files in Excel for Verifying Content Grid");
					sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
				}

			} else {
				appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
		}
	} else {
		appLog.error("Not able to Click Institution tab ");
		sa.assertTrue(false, "Not able to Click Institution tab ");
	}


	// Contact Tab
		//contact 1 will have access to institution 1
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
				appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"fundraising workspace view");

				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);
					//update_mult1.pdf and update_mult2.pdf will be present in institution 1

						HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPageInvestorSpace(30), By.xpath("//div[@id='divInvWorkspace']//span[contains(@id,'myGrid-cell-0-')]//a/u"));
						if (set.contains(update_fileArray[0])) {
							appLog.info(update_fileArray[0]+" is successfully found in "+PageName.ContactsPage.toString());
						}
						else {
							appLog.error(update_fileArray[0]+" is not found in "+PageName.ContactsPage.toString());
							sa.assertTrue(false, update_fileArray[1]+" is not found in "+PageName.ContactsPage.toString());
						}
						
						if (set.contains(update_fileArray[1])) {
							appLog.info(update_fileArray[1]+" is successfully found in "+PageName.ContactsPage.toString());
						}
						else {
							appLog.error(update_fileArray[1]+" is not found in "+PageName.ContactsPage.toString());
							sa.assertTrue(false, update_fileArray[1]+" is not found in "+PageName.ContactsPage.toString());
						}
						sa.combineAssertions(saa);


				} else {
					appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			}
		} else {
			appLog.error("Not able to Click Contact tab ");
			sa.assertTrue(false, "Not able to Click Contact tab ");
		}
		//contact 2 will have access to isntitution 2

		
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M7Contact2FirstName, M7Contact2LastName, null)) {
				appLog.info("Opened Contact  : " + M7Contact2FirstName+" "+M7Contact2LastName);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"fundraising workspace view");

				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);
						//update_mult2.pdf will be present in institution 2

						HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPageInvestorSpace(30), By.xpath("//div[@id='divInvWorkspace']//span[contains(@id,'myGrid-cell-0-')]//a/u"));
						if (set.contains(update_fileArray[1])) {
							appLog.info(update_fileArray[1]+" is successfully found in "+PageName.ContactsPage.toString());
						}
						else {
							appLog.error(update_fileArray[1]+" is not found in "+PageName.ContactsPage.toString());
							sa.assertTrue(false, update_fileArray[1]+" is not found in "+PageName.ContactsPage.toString());
						}
						sa.combineAssertions(saa);


				} else {
					appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			}
		} else {
			appLog.error("Not able to Click Contact tab ");
			sa.assertTrue(false, "Not able to Click Contact tab ");
		}

		switchToDefaultContent(driver);
		lp.CRMlogout();
		ThreadSleep(3000);
		sa.combineAssertions(saa);
		sa.assertAll();
}

@Test
	public void M7tc076_3_UpdateImpactAtStandardFolderMultipleInstitutionInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc076_1_UpdateActionAtStandardFolderMultipleInstitutionFundPage";
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.StandardPath);
	//upload_mult1.pdf, upload_mult2.pdf
	
	
	//update_mult1.pdf, update_mult2.pdf
	String update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.KeyWord_For_Search);
	String update_fileArray[] = update_fileName.split(",");
	
	
		lp.investorLogin(M7Contact1EmailId, adminPassword);
		if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.CurrentInvestmentPgae,
					null, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);
				HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));
					appLog.info("Files are "+set);
				if (set.contains(update_fileArray[0])) {
					appLog.info(update_fileArray[0]+" is successfully found in "+PageName.CurrentInvestmentPgae.toString());
				}
				else {
					appLog.error(update_fileArray[0]+" is not found in "+PageName.CurrentInvestmentPgae.toString());
					sa.assertTrue(false, update_fileArray[0]+" is not found in "+PageName.CurrentInvestmentPgae.toString());
				}
				if (set.contains(update_fileArray[1])) {
					appLog.info(update_fileArray[1]+" is successfully found in "+PageName.CurrentInvestmentPgae.toString());
				}
				else {
					appLog.error(update_fileArray[1]+" is not found in "+PageName.CurrentInvestmentPgae.toString());
					sa.assertTrue(false, update_fileArray[1]+" is not found in "+PageName.CurrentInvestmentPgae.toString());
				}
				sa.combineAssertions(saa);
			}

		
		}
		lp.investorLogout();
		ThreadSleep(3000);
		sa.combineAssertions(saa);
		sa.assertAll();
}

@Test
	public void M7tc077_UpdateFileInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String parentID= null;
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.StandardPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
			excelLabel.UpdatedFileStandard);
	String filePath = "//UploadFiles/Module8//"+fileName;
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			if (click(driver, ifp.getUploadIcon(60), "upload icon on investor side potential investment", action.SCROLLANDBOOLEAN)) {
			parentID = switchOnWindow(driver);
			if (sendKeys(driver, ifp.getChooseFileButton(60), System.getProperty("user.dir")+filePath, "browse/choose file button on upload window on investor page", action.SCROLLANDBOOLEAN)) {
					if (click(driver, ifp.getAddButton(60), "add button on upload window", action.SCROLLANDBOOLEAN)) {
						if (ifp.getDuplicateDocText(60).getText().trim().equals(InvestorFirmPageErrorMessage.DocumentUploadUpdateSuccessMsg)) {
							appLog.info("duplicate document uploaded previously by same investor text is successfully found");
						}
						else {
							appLog.error("duplicate document text is not found");
							sa.assertTrue(false, "duplicate document text is not found");
						}
						click(driver,ifp.getIgnoreBtn(60), "ignore button on upload window investor login", action.SCROLLANDBOOLEAN);
						
						}
						
					}
			
			driver.switchTo().window(parentID);
			}
			else {
				appLog.error("upload icon is not clickable on potential investments content grid");
				sa.assertTrue(false, "upload icon is not clickable on potential investments content grid");
			}
			if (click(driver, ifp.getUploadIcon(60),"upload icon on investor side potential investment", action.SCROLLANDBOOLEAN)) {
				parentID = switchOnWindow(driver);
				if (sendKeys(driver, ifp.getChooseFileButton(60), System.getProperty("user.dir")+"//UploadFiles/Module8//"+fileName, "browse/choose file button", action.SCROLLANDBOOLEAN)) {
					if (click(driver, ifp.getAddButton(60), "add button on upload window", action.SCROLLANDBOOLEAN)) {
						
						if (click(driver, ifp.getUpdateButton(60), "update button on upload window investor portal", action.BOOLEAN)) {
							ThreadSleep(5000);
							if (isAlertPresent(driver)) {
							
							String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
							switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
							if (msg.trim().equals(FundsPageErrorMessage.DocumentUploadRepeatSuccessMsg)) {
								appLog.info("correct alert message for document upload is found successfully");
							}
							else {
								appLog.error("alert message for document upload is not found");
								sa.assertTrue(false, "alert message for document upload is not found");
							}
						}
							else {
								appLog.error("no alert is present when document is updated");
								sa.assertTrue(false, "no alert is present when document is updated");
							}
					}
						else {
							appLog.error("update button on upload window is not clickable");
							sa.assertTrue(false, "update button on upload window is not clickable");
						}
				}
					else {
						appLog.error("add button on upload window is not clickable");
						sa.assertTrue(false, "add button on upload window is not clickable");
					}
			}
				else {
					appLog.error("choose file/browse button is not visible on upload window");
					sa.assertTrue(false, "choose file/browse button is not visible on upload window");
				}
				
			
				driver.switchTo().window(parentID);
			}
			else {
				appLog.error("upload icon on potential workspace content grid is not clickable");
				sa.assertTrue(false, "upload icon on potential workspace content grid is not clickable");
			}
		}
		else {
			appLog.error("the path specified "+stdPath+ " is not found in folder structure");
			sa.assertTrue(false, "the path specified "+stdPath+ " is not found in folder structure");
		}
		
	}
	else {
		appLog.error("investor tab potential workspace link is not clickable");
		sa.assertTrue(false, "investor tab potential workspace link is not clickable");
	}
	switchToDefaultContent(driver);
	lp.investorLogout();
	sa.assertAll();
}

@Test
	public void M7tc078_1_ManageVersionActionAtCommonFolderFundPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileCommon);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileCommon);
	
	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//"+updatedFileName;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, fileName, Workspace.InvestorWorkspace, 30, "Yes")) {
					//verify manage version ui
					//v3 version
					if (fp.verifyManageVersionUI(updatedFileName, System.getProperty("user.dir")+path, fileName,"V3", true,false,true,null)) {
						appLog.info("manage version ui 1st time is successfully verified");
					}
					else {
						appLog.error("manage version ui 1st time could not be verified");
						sa.assertTrue(false, "manage version ui 1st time could not be verified");
					}
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version pop up close button", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "fundraising workspace refresh button", action.SCROLLANDBOOLEAN)) {
							
						}
					}
					else {
						appLog.error("manage version popup close button is not clickable");
						sa.assertTrue(false, "manage version popup close button is not clickable");
					}
				}
				
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.InvestorWorkspace, 30, "Yes")) {
					if (fp.verifyManageVersion2ndTime(updatedFileName, fileName, oldestFileName, "V4")) {
						appLog.info("manage version window is successfully verified 2nd time");
					}
					else {
						appLog.error("manage version window cannot be verified");
						sa.assertTrue(false, "manage version window cannot be verified");
					}
					//after verifying UI, clicking on refresh button
					if (click(driver, fp.getManageVersionRefresh(60), "manage version refresh button", action.SCROLLANDBOOLEAN)) {
						appLog.info("clicking on refresh button on manage version window");
					}
					
					//check make current functionality
					if (fp.verifyMakeCurrentFunctionalityManageVersion(updatedFileName, fileName,oldestFileName, "V5")) {
					appLog.info("make current functionality is successfully verified");
					}
					else {
					appLog.error("make current functionality cannot be verified");
					sa.assertTrue(false, "make current funcionality cannot be verified");
					}
					//closing manage version popup
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version close button", action.SCROLLANDBOOLEAN)) {
						appLog.info("close button on manage version close button");
					}
					else {
						appLog.error("manage version close button is not clickable");
						sa.assertTrue(false, "manage version close button is not clickable");
					}
					
					//verifying open file functionality on manage version popup
					if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.InvestorWorkspace, 30, "Yes")) {
							if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.InvestorWorkspace, fileName, true, true, false)) {
								appLog.info("download button and close button are successfully verified on manage version window");
							}
							else {
								appLog.error("download and close button could not be verified on manage version window");
								sa.assertTrue(false, "download and close button could not be verified on manage version window");
							}
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							scrollDownThroughWebelement(driver, fp.getManageVersionsPopUpCrossIcon(60) , "cross icon on manage version window");
							if (click(driver, fp.getManageVersionsPopUpCrossIcon(60), "manage version cross icon", action.SCROLLANDBOOLEAN)) {
								if (fp.getUploadIcon(Workspace.InvestorWorkspace, 30)!=null) {
									appLog.info("manage version window is successfully closed");
									
								}
							}
							
					}
					else {
						appLog.error("manage version could not be found in down arrow dropdown list");
						sa.assertTrue(false, "manage version could not be found in down arrow dropdown list");
					}
				}
				else {
					appLog.error("down arrow dropdown menu manage version is not clickable");
					sa.assertTrue(false, "down arrow dropdown menu manage version is not clickable");
				}
			}
			else {
				appLog.error("folder path "+cmnPath + " was not found in folder structure");
				sa.assertTrue(false, cmnPath + " was not found in folder structure");
			}
		}
		else {
			appLog.error("fund name "+M7FundName1+" was not found in funds page");
			sa.assertTrue(false, M7FundName1 + " was not found in funds page");
		}
		
	}
	switchToDefaultContent(driver);
	ThreadSleep(3000);
	lp.CRMlogout();
	sa.combineAssertions(saa);
	sa.assertAll();
	
}

@Test
	public void M7tc078_2_ManageVersionImpactAtCommonFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc078_1_ManageVersionActionAtCommonFolderFundPage";
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.CommonPath);
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.UploadedFileCommon);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	
		// Institution
		

		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedInstitution(M7Institution1)) {
				appLog.info("Opened Institution : " + M7Institution1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"fundrasising workspace view");
				
				if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + cmnPath);

					

					if (filesName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified Institution : " + cmnPath);
					sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + cmnPath);
				}

			} else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}

		// Institution Tab
		switchToDefaultContent(driver);
		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
				appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
				

				if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + cmnPath);

					

					if (filesName != null) {

						date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified LP : " + cmnPath);
					sa.assertTrue(false, " Folder Structure Not Verified LP : " + cmnPath);
				}

			} else {
				appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
				sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
		
		// Committment Tab
				switchToDefaultContent(driver);
				if (bp.clickOnTab(TabName.CommitmentsTab)) {
					if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
						appLog.info("Opened Commitment  : " + M7Commitment1ID);
						switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"Investor workspace view");
				

						if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CommitmentsPage,
								Workspace.InvestorWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + cmnPath);

						

							if (filesName != null) {

								date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

								saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName,
										"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

								sa.combineAssertions(saa);

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified  for Commitment : " + cmnPath);
							sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + cmnPath);
						}

					} else {
						appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
						sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					}
				} else {
					appLog.error("Not able to Click Commitment tab ");
					sa.assertTrue(false, "Not able to Click Commitment tab ");
				}
		
			// Contact Tab
				
				switchToDefaultContent(driver);
				if (bp.clickOnTab(TabName.ContactTab)) {
					if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
						appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
						switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"fundraising workspace view");

						if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
								Workspace.InvestorWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + cmnPath);


							if (filesName != null) {

								saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
										"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

								sa.combineAssertions(saa);

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified for Contact : " + cmnPath);
							sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + cmnPath);
						}

					} else {
						appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
						sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					}
				} else {
					appLog.error("Not able to Click Contact tab ");
					sa.assertTrue(false, "Not able to Click Contact tab ");
				}
				
		
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
	
	sa.assertAll();
}

@Test
	public void M7tc078_3_ManageVersionImpactAtCommonFolderInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc078_1_ManageVersionActionAtCommonFolderFundPage";
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.CommonPath);
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,
			excelLabel.UploadedFileCommon);
	
		
		lp.investorLogin(M7Contact1EmailId, adminPassword);
		if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
			if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CurrentInvestmentPgae,
					null, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);
			
				saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
				sa.combineAssertions(saa);
			} else {
				appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
				saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
			}

		} else {
			appLog.info("Not able to click on CurrentInvestment tab");
			saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
		}
		lp.investorLogout();
		ThreadSleep(3000);
		sa.combineAssertions(saa);
		sa.assertAll();
	
	sa.assertAll();
}
	
@Test
	public void M7tc079_1_ManageVersionActionAtInternalFolderFundPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();

	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileInternal);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileInternal);
	
	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//"+updatedFileName;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, fileName, Workspace.InvestorWorkspace, 30, "Yes")) {
					//verify manage version ui
					//v3 version
					if (fp.verifyManageVersionUI(updatedFileName, System.getProperty("user.dir")+path, fileName,"V3", true,false,true,null)) {
						appLog.info("manage version ui 1st time is successfully verified");
					}
					else {
						appLog.error("manage version ui 1st time could not be verified");
						sa.assertTrue(false, "manage version ui 1st time could not be verified");
					}
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version pop up close button", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "fundraising workspace refresh button", action.SCROLLANDBOOLEAN)) {
							
						}
					}
					else {
						appLog.error("manage version popup close button is not clickable");
						sa.assertTrue(false, "manage version popup close button is not clickable");
					}
				}
				
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.InvestorWorkspace, 30, "Yes")) {
					if (fp.verifyManageVersion2ndTime(updatedFileName, fileName, oldestFileName, "V4")) {
						appLog.info("manage version window is successfully verified 2nd time");
					}
					else {
						appLog.error("manage version window cannot be verified");
						sa.assertTrue(false, "manage version window cannot be verified");
					}
					//after verifying UI, clicking on refresh button
					if (click(driver, fp.getManageVersionRefresh(60), "manage version refresh button", action.SCROLLANDBOOLEAN)) {
						appLog.info("clicking on refresh button on manage version window");
					}
					
					//check make current functionality
					if (fp.verifyMakeCurrentFunctionalityManageVersion(updatedFileName, fileName,oldestFileName, "V5")) {
					appLog.info("make current functionality is successfully verified");
					}
					else {
					appLog.error("make current functionality cannot be verified");
					sa.assertTrue(false, "make current funcionality cannot be verified");
					}
					//closing manage version popup
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version close button", action.SCROLLANDBOOLEAN)) {
						appLog.info("close button on manage version close button");
					}
					else {
						appLog.error("manage version close button is not clickable");
						sa.assertTrue(false, "manage version close button is not clickable");
					}
					
					//verifying open file functionality on manage version popup
					if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.InvestorWorkspace, 30, "Yes")) {
							if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.InvestorWorkspace, fileName, true, true, false)) {
								appLog.info("download button and close button are successfully verified on manage version window");
							}
							else {
								appLog.error("download and close button could not be verified on manage version window");
								sa.assertTrue(false, "download and close button could not be verified on manage version window");
							}
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							scrollDownThroughWebelement(driver, fp.getManageVersionsPopUpCrossIcon(60) , "cross icon on manage version window");
							if (click(driver, fp.getManageVersionsPopUpCrossIcon(60), "manage version cross icon", action.SCROLLANDBOOLEAN)) {
								if (fp.getUploadIcon(Workspace.InvestorWorkspace, 30)!=null) {
									appLog.info("manage version window is successfully closed");
									
								}
							}
							
					}
					else {
						appLog.error("manage version could not be found in down arrow dropdown list");
						sa.assertTrue(false, "manage version could not be found in down arrow dropdown list");
					}
				}
				else {
					appLog.error("down arrow dropdown menu manage version is not clickable");
					sa.assertTrue(false, "down arrow dropdown menu manage version is not clickable");
				}
			}
			else {
				appLog.error("folder path "+intPath + " was not found in folder structure");
				sa.assertTrue(false, intPath + " was not found in folder structure");
			}
		}
		else {
			appLog.error("fund name "+M7FundName1+" was not found in funds page");
			sa.assertTrue(false, M7FundName1 + " was not found in funds page");
		}

	}
	
		
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
}

@Test
	public void M7tc079_2_ManageVersionImpactAtInternalFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc079_1_ManageVersionActionAtInternalFolderFundPage";
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,excelLabel.UploadedFileInternal);
	String intFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTc, excelLabel.InternalPath);
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	
		// Institution
		

		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedInstitution(M7Institution1)) {
				appLog.info("Opened Institution : " + M7Institution1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"fundrasising workspace view");
				
				if (fp.verifyFolderPathdummy(intFolder, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + intFolder);

				

					if (filesName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified Institution : " + intFolder);
					sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + intFolder);
				}

			} else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
	
		
		switchToDefaultContent(driver);
		
		// Limited 
		switchToDefaultContent(driver);
		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
				appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
			

				if (fp.verifyFolderPathdummy(intFolder, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + intFolder);

					

					if (filesName != null) {


						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified LP : " + intFolder);
					sa.assertTrue(false, " Folder Structure Not Verified LP : " + intFolder);
				}

			} else {
				appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
				sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
		
		// Committment Tab
				switchToDefaultContent(driver);
				if (bp.clickOnTab(TabName.CommitmentsTab)) {
					if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
						appLog.info("Opened Commitment  : " + M7Commitment1ID);
						switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"Investor workspace view");
					
						if (fp.verifyFolderPathdummy(intFolder, null, null, null, PageName.CommitmentsPage,
								Workspace.InvestorWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + intFolder);

							

							if (filesName != null) {

						

								saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName,
										"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

								sa.combineAssertions(saa);

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified  for Commitment : " + intFolder);
							sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + intFolder);
						}

					} else {
						appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
						sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					}
				} else {
					appLog.error("Not able to Click Commitment tab ");
					sa.assertTrue(false, "Not able to Click Commitment tab ");
				}
				
		switchToDefaultContent(driver);
		lp.CRMlogout();
		
	
	sa.assertAll();
}

@Test
	public void M7tc080_1_ManageVersionActionAtSharedFolderFundPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileShared);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileShared);
	
	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//"+updatedFileName;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, fileName, Workspace.InvestorWorkspace, 30, "Yes")) {
					//verify manage version ui
					//v3 version
					if (fp.verifyManageVersionUI(updatedFileName, System.getProperty("user.dir")+path, fileName,"V3", true,false,true,null)) {
						appLog.info("manage version ui 1st time is successfully verified");
					}
					else {
						appLog.error("manage version ui 1st time could not be verified");
						sa.assertTrue(false, "manage version ui 1st time could not be verified");
					}
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version pop up close button", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "fundraising workspace refresh button", action.SCROLLANDBOOLEAN)) {
							
						}
					}
					else {
						appLog.error("manage version popup close button is not clickable");
						sa.assertTrue(false, "manage version popup close button is not clickable");
					}
				}
				
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.InvestorWorkspace, 30, "Yes")) {
					if (fp.verifyManageVersion2ndTime(updatedFileName, fileName, oldestFileName, "V4")) {
						appLog.info("manage version window is successfully verified 2nd time");
					}
					else {
						appLog.error("manage version window cannot be verified");
						sa.assertTrue(false, "manage version window cannot be verified");
					}
					//after verifying UI, clicking on refresh button
					if (click(driver, fp.getManageVersionRefresh(60), "manage version refresh button", action.SCROLLANDBOOLEAN)) {
						appLog.info("clicking on refresh button on manage version window");
					}
					
					//check make current functionality
					if (fp.verifyMakeCurrentFunctionalityManageVersion(updatedFileName, fileName,oldestFileName, "V5")) {
					appLog.info("make current functionality is successfully verified");
					}
					else {
					appLog.error("make current functionality cannot be verified");
					sa.assertTrue(false, "make current funcionality cannot be verified");
					}
					//closing manage version popup
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version close button", action.SCROLLANDBOOLEAN)) {
						appLog.info("close button on manage version close button");
					}
					else {
						appLog.error("manage version close button is not clickable");
						sa.assertTrue(false, "manage version close button is not clickable");
					}
					
					//verifying open file functionality on manage version popup
					if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.InvestorWorkspace, 30, "Yes")) {
							if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.InvestorWorkspace, fileName, true, true, false)) {
								appLog.info("download button and close button are successfully verified on manage version window");
							}
							else {
								appLog.error("download and close button could not be verified on manage version window");
								sa.assertTrue(false, "download and close button could not be verified on manage version window");
							}
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							scrollDownThroughWebelement(driver, fp.getManageVersionsPopUpCrossIcon(60) , "cross icon on manage version window");
							if (click(driver, fp.getManageVersionsPopUpCrossIcon(60), "manage version cross icon", action.SCROLLANDBOOLEAN)) {
								if (fp.getUploadIcon(Workspace.InvestorWorkspace, 30)!=null) {
									appLog.info("manage version window is successfully closed");
									
								}
							}
							
					}
					else {
						appLog.error("manage version could not be found in down arrow dropdown list");
						sa.assertTrue(false, "manage version could not be found in down arrow dropdown list");
					}
				}
				else {
					appLog.error("down arrow dropdown menu manage version is not clickable");
					sa.assertTrue(false, "down arrow dropdown menu manage version is not clickable");
				}
			}
			else {
				appLog.error("folder path "+shdPath + " was not found in folder structure");
				sa.assertTrue(false, shdPath + " was not found in folder structure");
			}
		}
		else {
			appLog.error("fund name "+M7FundName1+" was not found in funds page");
			sa.assertTrue(false, M7FundName1 + " was not found in funds page");
		}
	
	}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		ThreadSleep(3000);
		sa.combineAssertions(saa);
		sa.assertAll();
	
	sa.assertAll();
}

@Test
	public void M7tc080_2_ManageVersionImpactAtSharedFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc080_1_ManageVersionActionAtSharedFolderFundPage";
	String shdFolder = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,dependsOnTc, excelLabel.SharedPath);
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,excelLabel.UploadedFileShared);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
		// Institution
		

		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedInstitution(M7Institution1)) {
				appLog.info("Opened Institution : " + M7Institution1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"fundrasising workspace view");
				
				if (fp.verifyFolderPathdummy(shdFolder, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + shdFolder);

		

					if (filesName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified Institution : " + shdFolder);
					sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + shdFolder);
				}

			} else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}

		// Limited 
		switchToDefaultContent(driver);
		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
				appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
			

				if (fp.verifyFolderPathdummy(shdFolder, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + shdFolder);

				

					if (filesName != null) {

						date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified LP : " + shdFolder);
					sa.assertTrue(false, " Folder Structure Not Verified LP : " + shdFolder);
				}

			} else {
				appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
				sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
		
		// Committment Tab
				switchToDefaultContent(driver);
				if (bp.clickOnTab(TabName.CommitmentsTab)) {
					if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
						appLog.info("Opened Commitment  : " + M7Commitment1ID);
						switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"Investor workspace view");
					
						if (fp.verifyFolderPathdummy(shdFolder, null, null, null, PageName.CommitmentsPage,
								Workspace.InvestorWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + shdFolder);


							if (filesName != null) {

								date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");

								saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName,
										"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

								sa.combineAssertions(saa);

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified  for Commitment : " + shdFolder);
							sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + shdFolder);
						}

					} else {
						appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
						sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					}
				} else {
					appLog.error("Not able to Click Commitment tab ");
					sa.assertTrue(false, "Not able to Click Commitment tab ");
				}
				
			// Contact Tab
				
				switchToDefaultContent(driver);
				if (bp.clickOnTab(TabName.ContactTab)) {
					if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
						appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
						switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"fundraising workspace view");

						if (fp.verifyFolderPathdummy(shdFolder, null, null, M7FundName1, PageName.ContactsPage,
								Workspace.InvestorWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + shdFolder);


							if (filesName != null) {

								saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
										"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

								sa.combineAssertions(saa);

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified for Contact : " + shdFolder);
							sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + shdFolder);
						}

					} else {
						appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
						sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					}
				} else {
					appLog.error("Not able to Click Contact tab ");
					sa.assertTrue(false, "Not able to Click Contact tab ");
				}
				
		
		switchToDefaultContent(driver);
		lp.CRMlogout();
		ThreadSleep(3000);
		sa.combineAssertions(saa);
		sa.assertAll();

}

@Test
	public void M7tc080_3_ManageVersionImpactAtSharedFolderInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTc = "M7tc080_1_ManageVersionActionAtSharedFolderFundPage";
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,dependsOnTc, excelLabel.SharedPath);
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTc,excelLabel.UploadedFileShared);
	
	
	
		lp.investorLogin(M7Contact1EmailId, adminPassword);
		if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
			if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CurrentInvestmentPgae,
					null, 60)) {
				appLog.info(" Folder Structure Verified: " + shdPath);
			
				saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
				sa.combineAssertions(saa);
			} else {
				appLog.info("Folder Structure Not Verified for Investor Page " + shdPath);
				saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdPath);
			}

		} else {
			appLog.info("Not able to click on CurrentInvestment tab");
			saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
		}
		lp.investorLogout();
		ThreadSleep(3000);
		sa.combineAssertions(saa);
		sa.assertAll();
	
}

@Test
	public void M7tc081_1_ManageVersionActionAtStandardFolderSingleInstitutionFundPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	//upload_upd.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileStandard);
	//upload_man_upd.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	
	//upload2.pdf
	String oldestFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	String path = "//UploadFiles//Module8//ManageVersion//"+updatedFileName;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				if(bp.fileinContengGRID(PageName.FundsPage, Workspace.InvestorWorkspace, fileName)){
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, fileName, Workspace.InvestorWorkspace, 30, "Yes")) {
					//verify manage version ui
					//v3 version
					if (fp.verifyManageVersionUI(updatedFileName, System.getProperty("user.dir")+path, fileName,"V3", true,false,true,null)) {
						appLog.info("manage version ui 1st time is successfully verified");
					}
					else {
						appLog.error("manage version ui 1st time could not be verified");
						sa.assertTrue(false, "manage version ui 1st time could not be verified");
					}
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version pop up close button", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "fundraising workspace refresh button", action.SCROLLANDBOOLEAN)) {
							
						}
					}
					else {
						appLog.error("manage version popup close button is not clickable");
						sa.assertTrue(false, "manage version popup close button is not clickable");
					}
				}
				}else{
					appLog.error(fileName+" is not available in the content grid ");
					sa.assertTrue(false,fileName+" is not available in the content grid");
				}
				
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.InvestorWorkspace, 30, "Yes")) {
					if (fp.verifyManageVersion2ndTime(updatedFileName, fileName, oldestFileName, "V4")) {
						appLog.info("manage version window is successfully verified 2nd time");
					}
					else {
						appLog.error("manage version window cannot be verified");
						sa.assertTrue(false, "manage version window cannot be verified");
					}
					//after verifying UI, clicking on refresh button
					if (click(driver, fp.getManageVersionRefresh(60), "manage version refresh button", action.SCROLLANDBOOLEAN)) {
						appLog.info("clicking on refresh button on manage version window");
					}
					
					//check make current functionality
					if (fp.verifyMakeCurrentFunctionalityManageVersion(updatedFileName, fileName,oldestFileName, "V5")) {
					appLog.info("make current functionality is successfully verified");
					}
					else {
					appLog.error("make current functionality cannot be verified");
					sa.assertTrue(false, "make current funcionality cannot be verified");
					}
					//closing manage version popup
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version close button", action.SCROLLANDBOOLEAN)) {
						appLog.info("close button on manage version close button");
					}
					else {
						appLog.error("manage version close button is not clickable");
						sa.assertTrue(false, "manage version close button is not clickable");
					}
					
					//verifying open file functionality on manage version popup
					if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, updatedFileName, Workspace.InvestorWorkspace, 30, "Yes")) {
							if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.InvestorWorkspace, fileName, true, true, false)) {
								appLog.info("download button and close button are successfully verified on manage version window");
							}
							else {
								appLog.error("download and close button could not be verified on manage version window");
								sa.assertTrue(false, "download and close button could not be verified on manage version window");
							}
							switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
							scrollDownThroughWebelement(driver, fp.getManageVersionsPopUpCrossIcon(60) , "cross icon on manage version window");
							if (click(driver, fp.getManageVersionsPopUpCrossIcon(60), "manage version cross icon", action.SCROLLANDBOOLEAN)) {
								if (fp.getUploadIcon(Workspace.InvestorWorkspace, 30)!=null) {
									appLog.info("manage version window is successfully closed");
									
								}
							}
							
					}
					else {
						appLog.error("manage version could not be found in down arrow dropdown list");
						sa.assertTrue(false, "manage version could not be found in down arrow dropdown list");
					}
				}
				else {
					appLog.error("down arrow dropdown menu manage version is not clickable");
					sa.assertTrue(false, "down arrow dropdown menu manage version is not clickable");
				}
			}
			else {
				appLog.error("folder path "+stdPath + " was not found in folder structure");
				sa.assertTrue(false, stdPath + " was not found in folder structure");
			}
		}
		else {
			appLog.error("fund name "+M7FundName1+" was not found in funds page");
			sa.assertTrue(false, M7FundName1 + " was not found in funds page");
		}
	
	}
	switchToDefaultContent(driver);
		lp.CRMlogout();
		ThreadSleep(3000);
		sa.combineAssertions(saa);
		sa.assertAll();
	
}

@Test
	public void M7tc081_2_ManageVersionImpactAtStandardFolderSingleInstitutionAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsOnTC = "M7tc081_1_ManageVersionActionAtStandardFolderSingleInstitutionFundPage";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTC, excelLabel.StandardPath);
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTC,
			excelLabel.UploadedFileStandard);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
		// Institution
		

		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedInstitution(M7Institution1)) {
				appLog.info("Opened Institution : " + M7Institution1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"fundrasising workspace view");
				
				if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);

				

					if (filesName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}

		// Limited
		
		switchToDefaultContent(driver);
		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
				appLog.info("Opened Limited Partner : " + M7LimitedPartner1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
			

				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);

					

					if (filesName != null) {

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName,
								"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified LP : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified LP : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
				sa.assertTrue(false, "Not able to Click LP OR LP is not Present: " + M7LimitedPartner1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
		
		// Committment Tab
				switchToDefaultContent(driver);
				if (bp.clickOnTab(TabName.CommitmentsTab)) {
					if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
						appLog.info("Opened Commitment  : " + M7Commitment1ID);
						switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"Investor workspace view");
					
						if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, null, PageName.CommitmentsPage,
								Workspace.InvestorWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + stdPath);


							if (filesName != null) {

								HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPage(30, Workspace.InvestorWorkspace), By.xpath("//div[@class='contacts_n_name_div']//span[contains(@id,'myGrid-cell-0-')]//a/u"));
								
								appLog.info("Element of set "+set);
							
							if (set.contains(filesName)) {
								appLog.info(filesName+" was successfully found in "+PageName.ContactsPage.toString());
								
							}else{
								appLog.error(filesName+"  not found in "+PageName.ContactsPage.toString());
								sa.assertTrue(false, filesName+"  not found in "+PageName.ContactsPage.toString());
								
							}

								/*saa = verifyContentGridCRMSide(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName,
										"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

								sa.combineAssertions(saa);*/

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified  for Commitment : " + stdPath);
							sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + stdPath);
						}

					} else {
						appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
						sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					}
				} else {
					appLog.error("Not able to Click Commitment tab ");
					sa.assertTrue(false, "Not able to Click Commitment tab ");
				}
		
			// Contact Tab
				
				switchToDefaultContent(driver);
				if (bp.clickOnTab(TabName.ContactTab)) {
					if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
						appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
						switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"fundraising workspace view");

						if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
								Workspace.InvestorWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + stdPath);

							

							if (filesName != null) {
								
								HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, cp.getScrollBoxContactPage(30, Workspace.InvestorWorkspace), By.xpath("//div[@id='Investorgrid_div']//span[contains(@id,'myGrid-cell-0-')]//a/u"));
								
								appLog.info("Element of set "+set);
							
							if (set.contains(filesName)) {
								appLog.info(filesName+" was successfully found in "+PageName.ContactsPage.toString());
								
							}else{
								appLog.error(filesName+"  not found in "+PageName.ContactsPage.toString());
								sa.assertTrue(false, filesName+"  not found in "+PageName.ContactsPage.toString());
								
							}

								/*saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
										"Approved", CRMUser1FirstName + " " + CRMUser1LastName, date);

								sa.combineAssertions(saa);*/

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
							sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
						}

					} else {
						appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
						sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					}
				} else {
					appLog.error("Not able to Click Contact tab ");
					sa.assertTrue(false, "Not able to Click Contact tab ");
				}
				
		
		switchToDefaultContent(driver);
		lp.CRMlogout();
		
		sa.combineAssertions(saa);
		sa.assertAll();
	
}

@Test
	public void M7tc081_3_ManageVersionImpactAtStandardFolderSingleInstitutionInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String dependsOnTC = "M7tc081_1_ManageVersionActionAtStandardFolderSingleInstitutionFundPage";
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsOnTC, excelLabel.StandardPath);
	String filesName = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, dependsOnTC,
			excelLabel.UploadedFileStandard);
		InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
		lp.investorLogin(M7Contact1EmailId, adminPassword);
		if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
			if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
					null, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);
				
				HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));
				
				if (set.contains(filesName)) {
					appLog.info(filesName+" was succesfully found in "+PageName.CurrentInvestmentPgae.toString());
				}
				else {
					appLog.error(filesName+" was not found in "+PageName.CurrentInvestmentPgae.toString());
					sa.assertTrue(false, filesName+" was not found in "+PageName.CurrentInvestmentPgae.toString());
				}
				
				/*saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, CRMUser1FirstName + " " + CRMUser1LastName, date);
				sa.combineAssertions(saa);*/
			} else {
				appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
				saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
			}

		} else {
			appLog.info("Not able to click on CurrentInvestment tab");
			saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
		}
		lp.investorLogout();
		ThreadSleep(3000);
		sa.combineAssertions(saa);
		sa.assertAll();
	
	sa.assertAll();
}

@Test
	public void M7tc082_1_ManageVersionActionAtStandardFolderMultipleInstitutionFundPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	//upload_oi_mult1.pdf, upload_oi_mult2.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UploadedFileStandard);
	String files[] = fileName.split(",");
	//upload_mv1.pdf, upload_mv2.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
	String updatedFiles[] = updatedFileName.split(",");
	String path1 = "//UploadFiles//Module8//ManageVersion//"+updatedFiles[0];
	String path2 = "//UploadFiles//Module8//ManageVersion//"+updatedFiles[1];
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (bp.clickOnTab(TabName.FundsTab)) {
		
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions, files[0], Workspace.InvestorWorkspace, 30, "Yes")) {
					//verify manage version ui
					//v1 version
					if (fp.verifyManageVersionUI(updatedFiles[0], System.getProperty("user.dir")+path1, files[0],"V1", true, true, false,multiInstance.ThisInvestorOnly)) {
						appLog.info("manage version ui 1st time is successfully verified");
					}
					else {
						appLog.error("manage version ui 1st time could not be verified");
						sa.assertTrue(false, "manage version ui 1st time could not be verified");
					}
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version pop up close button", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "fundraising workspace refresh button", action.SCROLLANDBOOLEAN)) {
							
						}
					}
					else {
						appLog.error("manage version popup close button is not clickable");
						sa.assertTrue(false, "manage version popup close button is not clickable");
					}
				}
				
				//verify updatedFileName will be present in 1st inst, but not in 2nd inst
				if (bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, updatedFiles[0])) {
					appLog.info(updatedFiles[0]+" is successfully found in "+M7Institution1+" standard folder");
				}
				if (fp.verifyFolderPathdummy(stdPath, M7Institution2, M7LimitedPartner2, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 30)) {
					if (!bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, updatedFiles[0])) {
						appLog.info(updatedFiles[0]+" is not found successfully in "+M7Institution2+" standard folder");
					}
				}
				if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 30)) {
					
				}
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.ManageVersions,files[1], Workspace.InvestorWorkspace, 30, "Yes")) {
					//verify manage version ui
					//v1 version
					if (fp.verifyManageVersionUI(updatedFiles[1], System.getProperty("user.dir")+path2, files[1],"V1", true, true,false,multiInstance.AllInvestor)) {
						appLog.info("manage version ui is successfully verified");
					}
					else {
						appLog.error("manage version ui could not be verified");
						sa.assertTrue(false, "manage version ui could not be verified");
					}
					if (click(driver, fp.getManageVersionPopUpCloseButton(60), "manage version pop up close button", action.SCROLLANDBOOLEAN)) {
						if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "fundraising workspace refresh button", action.SCROLLANDBOOLEAN)) {
							
						}
					}
					else {
						appLog.error("manage version popup close button is not clickable");
						sa.assertTrue(false, "manage version popup close button is not clickable");
					}
				
					//verify updatedFileName will be present in 1st inst and 2nd inst
					if (bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, updatedFiles[1])) {
						appLog.info(updatedFiles[1]+" is successfully found in "+M7Institution1+" standard folder");
					}
					if (fp.verifyFolderPathdummy(stdPath, M7Institution2, M7LimitedPartner2, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 30)) {
						if (bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, updatedFiles[1])) {
							appLog.info(updatedFiles[1]+" is found successfully in "+M7Institution2+" standard folder");
						}
					}
					if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 30)) {
						
					}
					
					else {
						appLog.error("manage version could not be found in down arrow dropdown list");
						sa.assertTrue(false, "manage version could not be found in down arrow dropdown list");
					}
				}
				else {
					appLog.error("down arrow dropdown menu manage version is not clickable");
					sa.assertTrue(false, "down arrow dropdown menu manage version is not clickable");
				}
			}
			else {
				appLog.error("folder path "+stdPath + " was not found in folder structure");
				sa.assertTrue(false, stdPath + " was not found in folder structure");
			}
		}
		else {
			appLog.error("fund name "+M7FundName1+" was not found in funds page");
			sa.assertTrue(false, M7FundName1 + " was not found in funds page");
		}
	
	}
	
		
		switchToDefaultContent(driver);		
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
}

@Test
	public void M7tc082_2_ManageVersionImpactAtStandardFolderMultipleInstitutionAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsonTC = "M7tc082_1_ManageVersionActionAtStandardFolderMultipleInstitutionFundPage";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.StandardPath);
	//upload_oi_mult1.pdf, upload_oi_mult2.pdf
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.UploadedFileStandard);
	String files[] = fileName.split(",");
	//upload_mv1.pdf, upload_mv2.pdf
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.UpdatedFileStandard);
	String updatedFiles[] = updatedFileName.split(",");
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	
		// Institution
		

		if (fp.clickOnTab(TabName.InstituitonsTab)) {
			if (ip.clickOnCreatedInstitution(M7Institution1)) {
				appLog.info("Opened Institution : " + M7Institution1);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
				
				if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);

					if ((updatedFiles[0] != null)&&(updatedFiles[1]!=null)) {

						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, updatedFiles[0],
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

						sa.combineAssertions(saa);
						saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, updatedFiles[1],
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

						sa.combineAssertions(saa);


					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}

		// Institution 2
		switchToDefaultContent(driver);

				if (fp.clickOnTab(TabName.InstituitonsTab)) {
					if (ip.clickOnCreatedInstitution(M7Institution2)) {
						appLog.info("Opened Institution : " + M7Institution2);
						switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"fundrasising workspace view");
						
						if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner2, M7FundName1, PageName.InstitutionsPage,
								Workspace.InvestorWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + stdPath);

							if ((updatedFiles[1] != null)&&(files[0]!=null)) {
								saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, files[0],
										"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

								sa.combineAssertions(saa);
								saa = verifyContentGridCRMSide(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, updatedFiles[1],
										"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

								sa.combineAssertions(saa);

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified Institution : " + stdPath);
							sa.assertTrue(false, " Folder Structure Not Verified Institution  : " + stdPath);
						}

					} else {
						appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
						sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
					}
				} else {
					appLog.error("Not able to Click Institution tab ");
					sa.assertTrue(false, "Not able to Click Institution tab ");
				}

				
		
		
			// Contact Tab
				
				switchToDefaultContent(driver);
				if (bp.clickOnTab(TabName.ContactTab)) {
					if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
						appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
						switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
						scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"fundraising workspace view");

						if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
								Workspace.InvestorWorkspace, 60)) {
							appLog.info(" Folder Structure Verified: " + stdPath);

							if ((updatedFiles[0] != null)&&(updatedFiles[1]!=null)) {
								saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, updatedFiles[0],
										"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

								sa.combineAssertions(saa);
								saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, updatedFiles[1],
										"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

								sa.combineAssertions(saa);

							} else {
								appLog.error("No Files in Excel for Verifying Content Grid");
								sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
							}

						} else {
							appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
							sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
						}

					} else {
						appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
						sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					}
				} else {
					appLog.error("Not able to Click Contact tab ");
					sa.assertTrue(false, "Not able to Click Contact tab ");
				}
				
		// Contact 2
		
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M7Contact2FirstName, M7Contact2LastName, null)) {
				appLog.info("Opened Contact  : " + M7Contact2FirstName+" "+M7Contact2LastName);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"fundraising workspace view");

				if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
						Workspace.InvestorWorkspace, 60)) {
					appLog.info(" Folder Structure Verified: " + stdPath);

					if ((files[0] != null)&&(updatedFiles[1]!=null)) {
						saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, files[0],
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

						sa.combineAssertions(saa);
						saa = verifyContentGridCRMSide(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, updatedFiles[1],
								"Approved", CRMUser2FirstName + " " + CRMUser2LastName, date);

						sa.combineAssertions(saa);

					} else {
						appLog.error("No Files in Excel for Verifying Content Grid");
						sa.assertTrue(false, "No Files in Excel for Verifying Content Grid");
					}

				} else {
					appLog.error(" Folder Structure Not Verified for Contact : " + stdPath);
					sa.assertTrue(false, " Folder Structure Not Verified for Contact  : " + stdPath);
				}

			} else {
				appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			}
		} else {
			appLog.error("Not able to Click Contact tab ");
			sa.assertTrue(false, "Not able to Click Contact tab ");
		}
		

		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
	
}

@Test
	public void M7tc082_3_ManageVersionImpactAtStandardFolderMultipleInstitutionInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);

	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	SoftAssert sa = new SoftAssert();
	SoftAssert saa = new SoftAssert();
	String dependsonTC = "M7tc082_1_ManageVersionActionAtStandardFolderMultipleInstitutionFundPage";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.StandardPath);
	
	String updatedFileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.UpdatedFileStandard);
	String updatedFiles[] = updatedFileName.split(",");
	
	
		InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
		lp.investorLogin(M7Contact1EmailId, adminPassword);
		if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
			if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
					null, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);
				
				if ((updatedFiles[0] != null)&&(updatedFiles[1]!=null)) {
					HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));
						
						if (set.contains(updatedFiles[0])) {
							appLog.info(updatedFiles[0]+" was succesfully found in "+PageName.CurrentInvestmentPgae.toString());
						}
						else {
							appLog.error(updatedFiles[0]+" was not found in "+PageName.CurrentInvestmentPgae.toString());
							sa.assertTrue(false, updatedFiles[0]+" was not found in "+PageName.CurrentInvestmentPgae.toString());
						}
						if (set.contains(updatedFiles[1])) {
							appLog.info(updatedFiles[1]+" was succesfully found in "+PageName.CurrentInvestmentPgae.toString());
						}
						else {
							appLog.error(updatedFiles[1]+" was not found in "+PageName.CurrentInvestmentPgae.toString());
							sa.assertTrue(false, updatedFiles[1]+" was not found in "+PageName.CurrentInvestmentPgae.toString());
						}
					 
				}
				
			} else {
				appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
				saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
			}

		} else {
			appLog.info("Not able to click on CurrentInvestment tab");
			saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
		}
		lp.investorLogout();
		ThreadSleep(3000);
		
		//Investor 2
		
		
				driver.close();
				config(browserToLaunch);
				lp = new LoginPageBusinessLayer(driver);
				fp = new FundsPageBusinessLayer(driver);
				ifp = new InvestorFirmPageBusinesslayer(driver);
				lp.investorLogin(M7Contact1EmailId, adminPassword);
				if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
					if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
							null, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);
						if ((updatedFiles[0] != null)&&(updatedFiles[1]!=null)) {
							HashSet<String> set = CommonLib.scrollActiveWidgetforSetofFiles(driver, ifp.getScrollBoxPotentialInvestments(30), By.xpath("//span[contains(@id,'grid_Investor')]//span[contains(@id,'grid_Investor-cell-0')]/a"));
								
								if (set.contains(updatedFiles[0])) {
									appLog.info(updatedFiles[0]+" was succesfully found in "+PageName.CurrentInvestmentPgae.toString());
								}
								else {
									appLog.error(updatedFiles[0]+" was not found in "+PageName.CurrentInvestmentPgae.toString());
									sa.assertTrue(false, updatedFiles[0]+" was not found in "+PageName.CurrentInvestmentPgae.toString());
								}
								if (set.contains(updatedFiles[1])) {
									appLog.info(updatedFiles[1]+" was succesfully found in "+PageName.CurrentInvestmentPgae.toString());
								}
								else {
									appLog.error(updatedFiles[1]+" was not found in "+PageName.CurrentInvestmentPgae.toString());
									sa.assertTrue(false, updatedFiles[1]+" was not found in "+PageName.CurrentInvestmentPgae.toString());
								}
							 
						}
						
						
					} else {
						appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
						saa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
					}

				} else {
					appLog.info("Not able to click on CurrentInvestment tab");
					saa.assertTrue(false, "Not able to click on CurrentInvestment tab");
				}
				lp.investorLogout();
				ThreadSleep(3000);
				
		sa.combineAssertions(saa);
		sa.assertAll();
	
	sa.assertAll();
}

@Test
	public void M7tc083_OpenFileInAllFoldersFundPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser2EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				
				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 30, "Yes")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);

				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 30, "Yes")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);

				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 30, "Yes")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);

				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 30, "Yes")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	switchToDefaultContent(driver);

	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc084_OpenFileInAllFoldersInstitutionPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser2EmailID, adminPassword);

	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);

			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				
				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 30, "Yes")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);
				
				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 30, "Yes")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 30, "Yes")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 30, "Yes")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		}else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}

	switchToDefaultContent(driver);

	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc085_OpenFileInAllFoldersContactPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser2EmailID, adminPassword);

	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
			
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				
				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName, 30, "no")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
		
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				appLog.info("Going To open File via DownArrow");
				if (fp.verifyFileOpenViaDownArrow(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName, 30, "no")) {
					appLog.info("File Opened and Close Successfully " + filesName);	
				}else{
					appLog.error("Not able to Opened and Close Successfully " + filesName);
					sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);	
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				
				appLog.info("Going To open File via DownArrow");
				if (bp.fileinContengGRID(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {
					if (fp.verifyFileOpenViaDownArrow(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName,
							30, "no")) {
						appLog.info("File Opened and Close Successfully " + filesName);
					} else {
						appLog.error("Not able to Opened and Close Successfully " + filesName);
						sa.assertTrue(false, "Not able to Opened and Close Successfully " + filesName);
					}
				} else {
					appLog.error(filesName+" is not available in the content grid ");
					sa.assertTrue(false,filesName+" is not available in the content grid");
				}
				
				
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
				
				appLog.info("Going To open File via Direct Click");
				if (bp.verifyDownloadFunctionality(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName, true,
						true,true)) {
					appLog.info("Successfully download file : " + filesName);
				} else {
					appLog.error("Not able to download file : " + filesName);
					sa.assertTrue(false, "Not able to download file : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
		}
	} else {
		appLog.error("Not able to Click Contact tab ");
		sa.assertTrue(false, "Not able to Click Contact tab ");
	}

	switchToDefaultContent(driver);

	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc086_OpenFileInAllFoldersInvestorPortal() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
	
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdPath);
			
			appLog.info("Going To open File via Direct Click");
			if (bp.verifyDownloadFunctionality(PageName.CurrentInvestmentPgae, Workspace.InvestorWorkspace, filesName, true,
					true,true)) {
				appLog.info("Successfully download file : " + filesName);
			} else {
				appLog.error("Not able to download file : " + filesName);
				sa.assertTrue(false, "Not able to download file : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdPath);
		}
		
		switchToDefaultContent(driver);
		
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			appLog.info("Going To open File via Direct Click");
			if (bp.verifyDownloadFunctionality(PageName.CurrentInvestmentPgae, Workspace.InvestorWorkspace, filesName, true,
					true,true)) {
				appLog.info("Successfully download file : " + filesName);
			} else {
				appLog.error("Not able to download file : " + filesName);
				sa.assertTrue(false, "Not able to download file : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}
		
		switchToDefaultContent(driver);
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			
			
			boolean flag = false;
			int i = 0;
			while(true) {
				List<WebElement> ele=ifp.getColumnHeadsInvestor();
				List<WebElement>listOfVisibleElements = ifp.getDocListonInvestmentTab();
				for (int j = 0;j<listOfVisibleElements.size();j++) {
					String a = listOfVisibleElements.get(j).getText().trim();
					if (a.equalsIgnoreCase(filesName)) {
						appLog.info(filesName+" is available in the content grid");
						
						flag=true;
						break;
					}
					if(j==listOfVisibleElements.size()-1){
						appLog.error(filesName+"file is not present in the content grid for "+i+" th iteration");
					}
				}
				if(flag){
					break;					
				}else {
					i++;
					if(i==3){
						appLog.error(filesName+" is not available in the content grid ");
						sa.assertTrue(false,filesName+" is not available in the content grid");
						break;
					}
				}
				click(driver, ele.get(0),"document name column head", action.SCROLLANDBOOLEAN);
			}
			if(flag){
			appLog.info("Going To open File via Direct Click");
			
			if (bp.verifyDownloadFunctionality(PageName.CurrentInvestmentPgae, Workspace.InvestorWorkspace, filesName, true,
					true,true)) {
				appLog.info("Successfully download file : " + filesName);
			} else {
				appLog.error("Not able to download file : " + filesName);
				sa.assertTrue(false, "Not able to download file : " + filesName);
			}
			}else{
				appLog.error(filesName+" is not available in the content grid ");
				sa.assertTrue(false,filesName+" is not available in the content grid");
			}
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}


	switchToDefaultContent(driver);

	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc087_DeleteFilesFromAllFolder_FundsPageNegativeCase() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
				
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
				
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);

				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
				
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);

				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
				
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	

	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}	

@Test
	public void M7tc088_1_DeleteFilesActionFromAllFolderFundsPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
				
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
				
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);

				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
				
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);

				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
				
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	

	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc088_2_DeleteFilesImpactFromAllFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	String dependsonTC = "M7tc088_1_DeleteFilesActionFromAllFolderFundsPage";
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	
	// Institution
	
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);

			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			//Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				
				if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
				
					appLog.error("File has not been deleted and is present: "+filesName);
					sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
				} else {
					appLog.info("File has been deleted and not Present : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);
				
				if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
					
					appLog.error("File has not been deleted and is present: "+filesName);
					sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
				} else {
					appLog.info("File has been deleted and not Present : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		}else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
	
	// InstitutionLP1
	
			switchToDefaultContent(driver);
			if (fp.clickOnTab(TabName.InstituitonsTab)) {
				if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
					appLog.info("Opened Institution : " + M7LimitedPartner1);

					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					//Common
					
					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + cmnPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
						
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
					}
					
					
					// Internal
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + intPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
							
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + intPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
					}
					
					
					// Shared
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + shdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
					}
					
					
					// Standard
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + stdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
					}

				}else {
						appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
						sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
					}
				} else {
					appLog.error("Not able to Click Institution tab ");
					sa.assertTrue(false, "Not able to Click Institution tab ");
				}

	// Contact
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
			
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				

				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
		
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
		}
	} else {
		appLog.error("Not able to Click Contact tab ");
		sa.assertTrue(false, "Not able to Click Contact tab ");
	}
	
	// Committment Tab
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.CommitmentsTab)) {
		if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
			appLog.info("Opened Commitment  : " + M7Commitment1ID);
			switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			
			// Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);

				if (bp.verifyFileinContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + cmnPath);
			}
			
			
			
			// Shared
			
			if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + shdPath);

				if (bp.verifyFileinContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + shdPath);
			}
		
			// Standard
			
			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				if (bp.verifyFileinContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
			sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
		}
	} else {
		appLog.error("Not able to Click Commitment tab ");
		sa.assertTrue(false, "Not able to Click Commitment tab ");
	}
	

	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc088_3_DeleteFilesImpactFromAllFolderInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	
	String dependsonTC = "M7tc088_1_DeleteFilesActionFromAllFolderFundsPage";
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.SharedPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.KeyWord_For_Search);
	
	
	
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
	
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdPath);
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdPath);
		}
		
		switchToDefaultContent(driver);
		
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}
		
		switchToDefaultContent(driver);
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}


	switchToDefaultContent(driver);
	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc089_DeleteFilesFromAllFolder_InstitutionPageNegativeCase() {

	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);

			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			//Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		}else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
		
		switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

	
}

@Test
	public void M7tc090_1_DeleteFilesActionFromAllFolderInstitutionPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);

	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	

	// Institution
	
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			appLog.info("Opened Institution : " + M7Institution1);

			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			//Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		}else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
	
	

	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc090_2_DeleteFilesImpactFromAllFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	String dependsonTC = "M7tc090_1_DeleteFilesActionFromAllFolderInstitutionPage";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	// Funds Page
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.FundsTab)) {
	if (fp.clickOnCreatedFund(M7FundName1)) {

		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
				"Investor workspace view");
		if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		} else {
			appLog.error(" Folder Structure Not Verified  : " + cmnPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
		}
		
		
		// Internal
		
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + intPath);
			
			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + intPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
		}
		
		
		// Shared
		
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + shdPath);

			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + shdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
		}
		
		
		// Standard
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + stdPath);

			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + stdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
		}

	} else {
		appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
		sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
	}
} else {
	appLog.info("Not Able to Click Funds Tab");
	sa.assertTrue(false, "Not Able to Click Funds Tab");
}
	
	// InstitutionLP1
	
			switchToDefaultContent(driver);
			if (fp.clickOnTab(TabName.InstituitonsTab)) {
				if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
					appLog.info("Opened Institution : " + M7LimitedPartner1);

					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					//Common
					
					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + cmnPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
						
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
					}
					
					
					// Internal
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + intPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
							
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + intPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
					}
					
					
					// Shared
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + shdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
					}
					
					
					// Standard
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + stdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
					}

				}else {
						appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
						sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
					}
				} else {
					appLog.error("Not able to Click Institution tab ");
					sa.assertTrue(false, "Not able to Click Institution tab ");
				}

	// Contact
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
			
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				

				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
		
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
		}
	} else {
		appLog.error("Not able to Click Contact tab ");
		sa.assertTrue(false, "Not able to Click Contact tab ");
	}
	
	// Committment Tab
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.CommitmentsTab)) {
		if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
			appLog.info("Opened Commitment  : " + M7Commitment1ID);
			switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			
			// Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);

				if (bp.verifyFileinContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + cmnPath);
			}
			
			
			
			// Shared
			
			if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + shdPath);

				if (bp.verifyFileinContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + shdPath);
			}
		
			// Standard
			
			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				if (bp.verifyFileinContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
			sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
		}
	} else {
		appLog.error("Not able to Click Commitment tab ");
		sa.assertTrue(false, "Not able to Click Commitment tab ");
	}
	

	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc090_3_DeleteFilesImpactFromAllFolderInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	
	String dependsonTC = "M7tc090_1_DeleteFilesActionFromAllFolderInstitutionPage";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.SharedPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.KeyWord_For_Search);
	;
	
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
	
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdPath);
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdPath);
		}
		
		switchToDefaultContent(driver);
		
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}
		
		switchToDefaultContent(driver);
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}


	switchToDefaultContent(driver);
	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc091_DeleteFilesFromAllFolder_ContactPageNegativeCase() {
	
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	
	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
			
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			
			// Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				

				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
		
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
		}
	} else {
		appLog.error("Not able to Click Contact tab ");
		sa.assertTrue(false, "Not able to Click Contact tab ");
	}
	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();
}

@Test
	public void M7tc092_1_DeleteFilesActionFromAllFolderContactPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	
	// Contact
	
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
					appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
					
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					
					// Common Path
					
					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + cmnPath);
						
						if (fp.verifyDeleteViaDownArrow(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName, 60, "no")){
							appLog.info("File has been deleted : "+filesName);
						} else {
							appLog.error("File has not  been deleted : "+filesName);
							sa.assertTrue(false, "File has not been deleted : "+filesName);
						}
						
					} else {
						appLog.error(" Folder Structure Not Verified  : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
					}
						// Shared
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + shdPath);
						
						if (fp.verifyDeleteViaDownArrow(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName, 60, "no")){
							appLog.info("File has been deleted : "+filesName);
						} else {
							appLog.error("File has not  been deleted : "+filesName);
							sa.assertTrue(false, "File has not been deleted : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
					}
						// Standard
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + stdPath);
						
						if (fp.verifyDeleteViaDownArrow(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName, 60, "no")){
							appLog.info("File has been deleted : "+filesName);
						} else {
							appLog.error("File has not been deleted : "+filesName);
							sa.assertTrue(false, "File has not been deleted : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
					}

				} else {
					appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
					sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
				}
			} else {
				appLog.error("Not able to Click Contact tab ");
				sa.assertTrue(false, "Not able to Click Contact tab ");
			}
			
	switchToDefaultContent(driver);
	
	//deleting file from internal folder, because not accessible from contacts page upload_oi.pdf
	appLog.info("deleting file from internal folder, because not accessible from contacts page");
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30), "InvestorWorkspace workspace section");
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage, Workspace.InvestorWorkspace, 30)) {
				if (fp.clickOnOptionsOfArrowKeyInContentGrid(ContentGridArrowKeyFunctions.Delete, filesName, Workspace.InvestorWorkspace, 30, null)) {
					if (click(driver, fp.getDeleteFileYesButtonContentGrid(Workspace.InvestorWorkspace, 60), "delete yes button", action.BOOLEAN)) {
						appLog.info("file "+filesName+" has been deleted");
						
					}
					else {
						appLog.error("delete yes button is not clickable");
						sa.assertTrue(false, "delete yes button is not clickable");
					}
				}
				else {
					appLog.error("delete button not found in down arrow menu");
					sa.assertTrue(false, "delete button not found in down arrow menu");
				}
			}
			else {
				appLog.error("could not find "+intPath+" in folder structure");
				sa.assertTrue(false, "could not find "+intPath+" in folder structure");
			}
		}
		else {
			appLog.error("fund "+M7FundName1+" could not be found on funds page");
			sa.assertTrue(false, "fund "+M7FundName1+" could not be found on funds page");
		}
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc092_2_DeleteFilesImpactFromAllFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	String dependsonTC = "M7tc092_1_DeleteFilesActionFromAllFolderContactPage";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.SharedPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	if (bp.clickOnTab(TabName.FundsTab)) {
	if (fp.clickOnCreatedFund(M7FundName1)) {

		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
				"Investor workspace view");
		if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		} else {
			appLog.error(" Folder Structure Not Verified  : " + cmnPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
		}
		
		
		
		// Shared
		
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + shdPath);

			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + shdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
		}
		
		
		// Standard
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + stdPath);

			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + stdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
		}

	} else {
		appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
		sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
	}
} else {
	appLog.info("Not Able to Click Funds Tab");
	sa.assertTrue(false, "Not Able to Click Funds Tab");
}
	
	// Institution
	
			switchToDefaultContent(driver);
			if (fp.clickOnTab(TabName.InstituitonsTab)) {
				if (ip.clickOnCreatedInstitution(M7Institution1)) {
					appLog.info("Opened Institution : " + M7Institution1);

					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					//Common
					
					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + cmnPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
						
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
					}
					
					
					
					
					// Shared
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + shdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
					}
					
					
					// Standard
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + stdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
					}

				}else {
						appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
						sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
					}
				} else {
					appLog.error("Not able to Click Institution tab ");
					sa.assertTrue(false, "Not able to Click Institution tab ");
				}
	
	// InstitutionLP1
	
			switchToDefaultContent(driver);
			if (fp.clickOnTab(TabName.InstituitonsTab)) {
				if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
					appLog.info("Opened Institution : " + M7LimitedPartner1);

					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					//Common
					
					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + cmnPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
						
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
					}
					
					
					
					
					// Shared
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + shdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
					}
					
					
					// Standard
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + stdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
					}

				}else {
						appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
						sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
					}
				} else {
					appLog.error("Not able to Click Institution tab ");
					sa.assertTrue(false, "Not able to Click Institution tab ");
				}

	
	// Committment Tab
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.CommitmentsTab)) {
		if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
			appLog.info("Opened Commitment  : " + M7Commitment1ID);
			switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			
			// Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);

				if (bp.verifyFileinContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + cmnPath);
			}
			
			
			
			// Shared
			
			if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + shdPath);

				if (bp.verifyFileinContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + shdPath);
			}
		
			// Standard
			
			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				if (bp.verifyFileinContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
			sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
		}
	} else {
		appLog.error("Not able to Click Commitment tab ");
		sa.assertTrue(false, "Not able to Click Commitment tab ");
	}
	

	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();

}

@Test
	public void M7tc092_3_DeleteFilesFromAllFolderInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	
	String dependsonTC = "M7tc092_1_DeleteFilesActionFromAllFolderContactPage";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.SharedPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
	
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdPath);
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdPath);
		}
		
		switchToDefaultContent(driver);
		
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}
		
		switchToDefaultContent(driver);
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}


	switchToDefaultContent(driver);
	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc093_DeleteFilesFromAllFolder_LimitedPartnerPageNegativeCase() {

	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
			appLog.info("Opened Limited  : " + M7LimitedPartner1);

			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			//Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		}else {
				appLog.error("Not able to Click Institution OR LP is not Present: " + M7LimitedPartner1);
				sa.assertTrue(false, "Not able to Click Institution OR LP is not Present: " + M7LimitedPartner1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
		
		switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

	
}

@Test
	public void M7tc094_1_DeleteFilesActionFromAllFolderInstitutionPageForLP1() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	

	// InstitutionLP
	
	switchToDefaultContent(driver);
	if (fp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
			appLog.info("Opened Institution : " + M7LimitedPartner1);

			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			//Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 30, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
			// Internal
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}
			
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				appLog.info("Going To Delete File via DownArrow");
				if (fp.verifyDeleteViaDownArrow(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName, 60, "no")){
					appLog.info("File has been deleted : "+filesName);
				} else {
					appLog.error("File has not  been deleted : "+filesName);
					sa.assertTrue(false, "File has not been deleted : "+filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		}else {
				appLog.error("Not able to Click Institution OR Institution is not Present: " + M7LimitedPartner1);
				sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7LimitedPartner1);
			}
		} else {
			appLog.error("Not able to Click Institution tab ");
			sa.assertTrue(false, "Not able to Click Institution tab ");
		}
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}	

@Test
	public void M7tc094_2_DeleteFilesImportFromAllFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	String dependsonTC = "M7tc094_1_DeleteFilesActionFromAllFolderInstitutionPageForLP1";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	// Funds Page
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.FundsTab)) {
	if (fp.clickOnCreatedFund(M7FundName1)) {

		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
				"Investor workspace view");
		if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		} else {
			appLog.error(" Folder Structure Not Verified  : " + cmnPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
		}
		
		
		// Internal
		
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + intPath);
			
			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + intPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
		}
		
		
		// Shared
		
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + shdPath);

			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + shdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
		}
		
		
		// Standard
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + stdPath);

			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + stdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
		}

	} else {
		appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
		sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
	}
} else {
	appLog.info("Not Able to Click Funds Tab");
	sa.assertTrue(false, "Not Able to Click Funds Tab");
}
	
	// Institution
	
			switchToDefaultContent(driver);
			if (fp.clickOnTab(TabName.InstituitonsTab)) {
				if (ip.clickOnCreatedInstitution(M7Institution1)) {
					appLog.info("Opened Institution : " + M7Institution1);

					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					//Common
					
					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + cmnPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
						
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
					}
					
					
					// Internal
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + intPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
							
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + intPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
					}
					
					
					// Shared
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + shdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
					}
					
					
					// Standard
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + stdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
					}

				}else {
						appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
						sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
					}
				} else {
					appLog.error("Not able to Click Institution tab ");
					sa.assertTrue(false, "Not able to Click Institution tab ");
				}
			

	// Contact
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
			
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				

				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
		
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
		}
	} else {
		appLog.error("Not able to Click Contact tab ");
		sa.assertTrue(false, "Not able to Click Contact tab ");
	}
	
	// Committment Tab
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.CommitmentsTab)) {
		if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
			appLog.info("Opened Commitment  : " + M7Commitment1ID);
			switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			
			// Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);

				if (bp.verifyFileinContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + cmnPath);
			}
			
			
			
			// Shared
			
			if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + shdPath);

				if (bp.verifyFileinContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + shdPath);
			}
		
			// Standard
			
			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				if (bp.verifyFileinContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
			sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
		}
	} else {
		appLog.error("Not able to Click Commitment tab ");
		sa.assertTrue(false, "Not able to Click Commitment tab ");
	}
	

	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();

}

@Test
	public void M7tc094_3_DeleteFilesFromAllFolderInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	
	String dependsonTC = "M7tc094_1_DeleteFilesActionFromAllFolderInstitutionPageForLP1";
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.SharedPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.KeyWord_For_Search);
	;
	

	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
	
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdPath);
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdPath);
		}
		
		switchToDefaultContent(driver);
		
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}
		
		switchToDefaultContent(driver);
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}


	switchToDefaultContent(driver);
	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc095_DeleteFilesFromAllFolder_CommitmentPagePageNegativeCase() {

	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	
	if (bp.clickOnTab(TabName.CommitmentsTab)) {
		if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
			appLog.info("Opened Commitment  : " + M7Commitment1ID);
			switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			
			// Common
			
			if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + cmnPath);

				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + cmnPath);
			}
			
			// INTERNAL
			
			if (fp.verifyFolderPathdummy(intPath, null, null, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + intPath);

				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + intPath);
			}
			
			
			
			// Shared
			
			if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + shdPath);

				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}

			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + shdPath);
			}
		
			// Standard
			
			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, null, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {
				appLog.info(" Folder Structure Verified: " + stdPath);

				appLog.info("Going To Verify UI of Delete Popup via DownArrow No Button");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName, 60, "no",true)){
					appLog.info("File has not been deleted and is present after Clicking on No Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on No Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on No Button:  "+filesName);
				
				}
				
				appLog.info("Going To Verify UI of Delete Popup via DownArrow Cross Icon");
				if (fp.verifyDeletePopUpUIViaDownArrow(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName, 60, "no",false)){
					appLog.info("File has not been deleted and is present after Clicking on Cross Button: "+filesName);
				
				} else {
					appLog.error("File has been deleted and not present after Clicking on Cross Button : "+filesName);
					sa.assertTrue(false, "File has been deleted and not present after Clicking on Cross Button:  "+filesName);
				
				}


			} else {
				appLog.error(" Folder Structure Not Verified  for Commitment : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
			sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
		}
	} else {
		appLog.error("Not able to Click Commitment tab ");
		sa.assertTrue(false, "Not able to Click Commitment tab ");
	}
		
	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

	
}

@Test
	public void M7tc096_1_DeleteFilesActionFromAllFolderCommitmentPage() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	

	// Committment Tab
	
			switchToDefaultContent(driver);
			if (bp.clickOnTab(TabName.CommitmentsTab)) {
				if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
					appLog.info("Opened Commitment  : " + M7Commitment1ID);
					switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					
					// Common
					
					if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + cmnPath);

						appLog.info("Going To Delete File via DownArrow");
						if (fp.verifyDeleteViaDownArrow(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName, 30, "no")){
							appLog.info("File has been deleted : "+filesName);
						} else {
							appLog.error("File has not  been deleted : "+filesName);
							sa.assertTrue(false, "File has not been deleted : "+filesName);
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + cmnPath);
					}
					
					// Internal
					
					if (fp.verifyFolderPathdummy(intPath, null, null, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + intPath);

						appLog.info("Going To Delete File via DownArrow");
						if (fp.verifyDeleteViaDownArrow(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName, 30, "no")){
							appLog.info("File has been deleted : "+filesName);
						} else {
							appLog.error("File has not  been deleted : "+filesName);
							sa.assertTrue(false, "File has not been deleted : "+filesName);
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + intPath);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + intPath);
					}
					
					
					
					// Shared
					
					if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + shdPath);

						appLog.info("Going To Delete File via DownArrow");
						if (fp.verifyDeleteViaDownArrow(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName, 30, "no")){
							appLog.info("File has been deleted : "+filesName);
						} else {
							appLog.error("File has not  been deleted : "+filesName);
							sa.assertTrue(false, "File has not been deleted : "+filesName);
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + shdPath);
					}
				
					// Standard
					
					if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, null, PageName.CommitmentsPage,
							Workspace.InvestorWorkspace, 60)) {
						appLog.info(" Folder Structure Verified: " + stdPath);

						appLog.info("Going To Delete File via DownArrow");
						if (fp.verifyDeleteViaDownArrow(PageName.CommitmentsPage, Workspace.InvestorWorkspace, filesName, 30, "no")){
							appLog.info("File has been deleted : "+filesName);
						} else {
							appLog.error("File has not  been deleted : "+filesName);
							sa.assertTrue(false, "File has not been deleted : "+filesName);
						}

					} else {
						appLog.error(" Folder Structure Not Verified  for Commitment : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified Commitment  : " + stdPath);
					}

				} else {
					appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
					sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
				}
			} else {
				appLog.error("Not able to Click Commitment tab ");
				sa.assertTrue(false, "Not able to Click Commitment tab ");
			}
			

	
	// Funds Page
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.FundsTab)) {
	if (fp.clickOnCreatedFund(M7FundName1)) {

		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
				"Investor workspace view");
		if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		} else {
			appLog.error(" Folder Structure Not Verified  : " + cmnPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
		}
		
		
		// Internal
		
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + intPath);
			
			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + intPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
		}
		
		
		// Shared
		
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + shdPath);

			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + shdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
		}
		
		
		// Standard
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + stdPath);

			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + stdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
		}

	} else {
		appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
		sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
	}
} else {
	appLog.info("Not Able to Click Funds Tab");
	sa.assertTrue(false, "Not Able to Click Funds Tab");
}
	
	// Institution
	
			switchToDefaultContent(driver);
			if (fp.clickOnTab(TabName.InstituitonsTab)) {
				if (ip.clickOnCreatedInstitution(M7Institution1)) {
					appLog.info("Opened Institution : " + M7Institution1);

					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					//Common
					
					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + cmnPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
						
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
					}
					
					
					// Internal
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + intPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
							
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + intPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
					}
					
					
					// Shared
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + shdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
					}
					
					
					// Standard
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + stdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
					}

				}else {
						appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
						sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
					}
				} else {
					appLog.error("Not able to Click Institution tab ");
					sa.assertTrue(false, "Not able to Click Institution tab ");
				}
			

			// InstitutionLP1
			
			switchToDefaultContent(driver);
			if (fp.clickOnTab(TabName.InstituitonsTab)) {
				if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
					appLog.info("Opened Institution : " + M7LimitedPartner1);

					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					//Common
					
					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + cmnPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
						
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
					}
					
					
					// Internal
					
					if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + intPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
						
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + intPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
					}
					
					
					
					
					// Shared
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + shdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
					}
					
					
					// Standard
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + stdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
					}

				}else {
						appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
						sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
					}
				} else {
					appLog.error("Not able to Click Institution tab ");
					sa.assertTrue(false, "Not able to Click Institution tab ");
				}

			
	// Contact
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
			
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				

				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
		
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
		}
	} else {
		appLog.error("Not able to Click Contact tab ");
		sa.assertTrue(false, "Not able to Click Contact tab ");
	}
	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();

}

@Test
	public void M7tc096_2_DeleteFilesActionmAllFolderAllPageCRMSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	
	String dependsonTC = "M7tc096_1_DeleteFilesActionFromAllFolderCommitmentPage";
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.InternalPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.KeyWord_For_Search);
	;
	
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	
	
	// Funds Page
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.FundsTab)) {
	if (fp.clickOnCreatedFund(M7FundName1)) {

		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
				"Investor workspace view");
		if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		} else {
			appLog.error(" Folder Structure Not Verified  : " + cmnPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
		}
		
		
		// Internal
		
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + intPath);
			
			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + intPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
		}
		
		
		// Shared
		
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + shdPath);

			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + shdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
		}
		
		
		// Standard
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + stdPath);

			if(bp.verifyFileinContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace, filesName)){
				
				appLog.error("File has not been deleted and is present: "+filesName);
				sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
			} else {
				appLog.info("File has been deleted and not Present : "+filesName);
			}
			
		
		
		} else {
			appLog.error(" Folder Structure Not Verified  : " + stdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
		}

	} else {
		appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
		sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
	}
} else {
	appLog.info("Not Able to Click Funds Tab");
	sa.assertTrue(false, "Not Able to Click Funds Tab");
}
	
	// Institution
	
			switchToDefaultContent(driver);
			if (fp.clickOnTab(TabName.InstituitonsTab)) {
				if (ip.clickOnCreatedInstitution(M7Institution1)) {
					appLog.info("Opened Institution : " + M7Institution1);

					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					//Common
					
					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + cmnPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
						
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
					}
					
					
					// Internal
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + intPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
							
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + intPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
					}
					
					
					// Shared
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + shdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
					}
					
					
					// Standard
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + stdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
					}

				}else {
						appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
						sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
					}
				} else {
					appLog.error("Not able to Click Institution tab ");
					sa.assertTrue(false, "Not able to Click Institution tab ");
				}
			

			// InstitutionLP1
			
			switchToDefaultContent(driver);
			if (fp.clickOnTab(TabName.InstituitonsTab)) {
				if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
					appLog.info("Opened Institution : " + M7LimitedPartner1);

					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor workspace view");
					//Common
					
					if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + cmnPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
						
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + cmnPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
					}
					
					
					// Internal
					
					if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + intPath);
						
						if(bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)){
						
							appLog.error("File has not been deleted and is present: "+filesName);
							sa.assertTrue(false, "File has not been deleted and is present: "+filesName);
						} else {
							appLog.info("File has been deleted and not Present : "+filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + intPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
					}
					
					
					
					
					// Shared
					
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + shdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + shdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
					}
					
					
					// Standard
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
					if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.InstitutionsPage,
							Workspace.InvestorWorkspace, 60)) {

						appLog.info(" Folder Structure Verified: " + stdPath);
						
						if (bp.verifyFileinContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace, filesName)) {

							appLog.error("File has not been deleted and is present: " + filesName);
							sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
						} else {
							appLog.info("File has been deleted and not Present : " + filesName);
						}
					
					
					} else {
						appLog.error(" Folder Structure Not Verified  : " + stdPath);
						sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
					}

				}else {
						appLog.error("Not able to Click Institution OR Institution is not Present: " + M7Institution1);
						sa.assertTrue(false, "Not able to Click Institution OR Institution is not Present: " + M7Institution1);
					}
				} else {
					appLog.error("Not able to Click Institution tab ");
					sa.assertTrue(false, "Not able to Click Institution tab ");
				}

			
	// Contact
	
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
			
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);
				

				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}
			
			
		
			
			// Shared
			
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);
				
				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}
			
			
			
			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);
				
				if (bp.verifyFileinContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace, filesName)) {

					appLog.error("File has not been deleted and is present: " + filesName);
					sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
				} else {
					appLog.info("File has been deleted and not Present : " + filesName);
				}
			
			
			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
		}
	} else {
		appLog.error("Not able to Click Contact tab ");
		sa.assertTrue(false, "Not able to Click Contact tab ");
	}
	
	
	switchToDefaultContent(driver);
	lp.CRMlogout();

	sa.assertAll();

}

@Test
	public void M7tc096_3_DeleteFilesFromAllFolderAllPageInvestorSide() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	
	
	String dependsonTC = "M7tc096_1_DeleteFilesActionFromAllFolderCommitmentPage";
	
	
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.SharedPath);
	
	String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, dependsonTC, excelLabel.KeyWord_For_Search);
	;
	
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
	
		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + shdPath);
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + shdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + shdPath);
		}
		
		switchToDefaultContent(driver);
		
		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + cmnPath);
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + cmnPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + cmnPath);
		}
		
		switchToDefaultContent(driver);
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
				null, 60)) {
			appLog.info(" Folder Structure Verified: " + stdPath);
			
			
			if (bp.verifyFileinContentGrid(PageName.CurrentInvestmentPgae, Workspace.Other, filesName)) {

				appLog.error("File has not been deleted and is present: " + filesName);
				sa.assertTrue(false, "File has not been deleted and is present: " + filesName);
			} else {
				appLog.info("File has been deleted and not Present : " + filesName);
			}
			
		} else {
			appLog.info("Folder Structure Not Verified for Investor Page " + stdPath);
			sa.assertTrue(false, "Folder Structure Not Verified for Investor Page " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}


	switchToDefaultContent(driver);
	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc097_SearchingInFundsPageForPresentAndAbsentFiles() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	SoftAssert saa = new SoftAssert();
	SoftAssert sa = new SoftAssert();
	String msg;
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	;
	WebElement ele;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	String alertMessage;

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");

			// 1st

			ele = bp.getSearchIcon(driver, PageName.FundsPage, Workspace.InvestorWorkspace, 30);
			if (ele != null) {

				if (click(driver, ele, "Search Icon", action.SCROLLANDBOOLEAN)) {

					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutSelectingAFolder)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Click Search Icon ");
					sa.assertTrue(false, " Not Able to Click Search Icon ");
				}
			} else {
				appLog.error(" Search Icon Element is Null ");
				sa.assertTrue(false, " Search Icon Element is Null ");
			}

			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);

				// 2nd

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					saa = bp.verifySearchUI(cmnPath, 30, PageName.FundsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, cmnPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 2a
					if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN)) {

						if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage,
								Workspace.InvestorWorkspace, filesName[0], 30)) {

							if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
									"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

								ele = bp.getNoDataToDisplaySearchPopMsg(30);
								if (ele != null) {
									msg = ele.getText().trim();
									if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
										appLog.info("  Msg Verified : " + msg);
									} else {
										appLog.error("  Msg Not Verified : Actual - " + msg);
										sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
									}
								} else {
									appLog.error(" No Data Display Msg Element is Null ");
									sa.assertTrue(false, " No Data Display Msg Element is Null ");
								}

								// 2b

								if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

									if (bp.verifyDownloadFunctionality(PageName.FundsPage,
											Workspace.InvestorWorkspace, filesName[0], true, true, false)) {
										appLog.info("Verify UI of Opened File : " + filesName[0]);
									} else {
										appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
										sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
									}

									switchToDefaultContent(driver);
									switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));

									// 3RD
									if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
											action.BOOLEAN)) {

										String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;
										saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
										sa.combineAssertions(saa);
									} else {
										appLog.error(" Not Able to Click All Folder Radio Button  ");
										sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
									}

									if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
											action.SCROLLANDBOOLEAN)) {

									} else {
										appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
										sa.assertTrue(false,
												" Not Able to CLick Search Pop Search Text Cross Icon");
									}

								} else {
									appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
									sa.assertTrue(false,
											" Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

								}

							} else {
								appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
								sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
							}

						} else {
							appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
							sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");
						}

					} else {
						appLog.error(" Not Able to Click Search Cross Icon ");
						sa.assertTrue(false, " Not Able to Click Search Cross Icon ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));

				// 4

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace,
						" ", 30)) {
					ThreadSleep(5000);
					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutEnteringValue)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				// 5
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace,
						filesName[1], 30)) {

					ThreadSleep(5000);

					ele = bp.getNoDataToDisplaySearchPopMsg1(30);
					if (ele != null) {
						msg = ele.getText().trim();
						if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
							appLog.info("  Msg Verified : " + msg);
						} else {
							appLog.error("  Msg Not Verified : Actual - " + msg);
							sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
						}
					} else {
						appLog.error(" No Data Display Msg Element is Null ");
						sa.assertTrue(false, " No Data Display Msg Element is Null ");
					}

					saa = bp.verifySearchUI(cmnPath, 30, PageName.FundsPage);
					sa.combineAssertions(saa);

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);

			}

			// Internal

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					// 6

					saa = bp.verifySearchUI(intPath, 30, PageName.FundsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, intPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 6a -- add code for Sorting
					
					saa = bp.performSortingCheckOnSearchPopUpForAllColumns(false,false);
					sa.combineAssertions(saa);

					if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
							"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

						if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

							// 6b -- add Code for Sorting  No Sorting
						/*	saa = bp.performSortingCheckOnSearchPopUpForAllColumns(true,false);
							sa.combineAssertions(saa);*/
							
							//  folder path Sorting
							saa = bp.performSortingCheckOnSearchPopUpForAllColumns(false,true);
							sa.combineAssertions(saa);

							if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
									action.BOOLEAN)) {


								String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;
								
								// 7
								
								saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
								sa.combineAssertions(saa);
								

								// 6b -- No  Sorting
								saa = bp.performSortingCheckOnSearchPopUpForAllColumns(true,false);
								sa.combineAssertions(saa);
								
							} else {
								appLog.error(" Not Able to Click All Folder Radio Button  ");
								sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
							}

							// 5

							if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
									action.SCROLLANDBOOLEAN)) {

								if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage,
										Workspace.InvestorWorkspace, filesName[1], 30)) {

									ThreadSleep(5000);

									ele = bp.getNoDataToDisplaySearchPopMsg1(30);
									if (ele != null) {
										msg = ele.getText().trim();
										if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
											appLog.info("  Msg Verified : " + msg);
										} else {
											appLog.error("  Msg Not Verified : Actual - " + msg);
											sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
										}
									} else {
										appLog.error(" No Data Display Msg Element is Null ");
										sa.assertTrue(false, " No Data Display Msg Element is Null ");
									}

									saa = bp.verifySearchUI(intPath, 30, PageName.FundsPage);
									sa.combineAssertions(saa);

									click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
											action.SCROLLANDBOOLEAN);

								} else {
									appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
									sa.assertTrue(false,
											" Not Able to Enter Value/ Not Able to click Search Icon ");

								}

							} else {
								appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
								sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
							}

						} else {
							appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
							sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

						}

					} else {
						appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
						sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}

			// Shared

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					// 9

					saa = bp.verifySearchUI(shdPath, 30, PageName.FundsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, shdPath, filesName[0], date);
					sa.combineAssertions(saa);

					if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

						String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

						// 10

						saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
						sa.combineAssertions(saa);
					} else {
						appLog.error(" Not Able to Click All Folder Radio Button  ");
						sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
					}

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}

			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1,
					PageName.FundsPage, Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.FundsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					// 11

					saa = bp.verifySearchUI(stdPath, 30, PageName.FundsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, stdPath, filesName[0], date);
					sa.combineAssertions(saa);

					if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

						String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

						// 12

						saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
						sa.combineAssertions(saa);
						
						// 13
						
						if (bp.verifyDownloadFunctionality(PageName.FundsPage,
								Workspace.InvestorWorkspace, filesName[0], true, true, false)) {
							appLog.info("Verify UI of Opened File : " + filesName[0]);
						} else {
							appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
							sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
						}

						switchToDefaultContent(driver);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
						
					} else {
						appLog.error(" Not Able to Click All Folder Radio Button  ");
						sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
					}

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Fund or Fund Not Available : " + M7FundName1);
			sa.assertTrue(false, "Not Able to Click Fund or Fud Not Available : " + M7FundName1);
		}
	} else {
		appLog.info("Not Able to Click Funds Tab");
		sa.assertTrue(false, "Not Able to Click Funds Tab");
	}

	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc098_SearchingInInstitutionPageForPresentAndAbsentFiles() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	SoftAssert saa = new SoftAssert();
	String msg;
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	;
	WebElement ele;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	String alertMessage;

	if (bp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {

			switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			
			// 1st

			ele = bp.getSearchIcon(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, 30);
			if (ele != null) {

				if (click(driver, ele, "Search Icon", action.SCROLLANDBOOLEAN)) {

					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutSelectingAFolder)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Click Search Icon ");
					sa.assertTrue(false, " Not Able to Click Search Icon ");
				}
			} else {
				appLog.error(" Search Icon Element is Null ");
				sa.assertTrue(false, " Search Icon Element is Null ");
			}



			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);

				// 1st

				// 2nd

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					saa = bp.verifySearchUI(cmnPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, cmnPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 2a
					if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN)) {

						if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage,
								Workspace.InvestorWorkspace, filesName[0], 30)) {

							if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
									"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

								ele = bp.getNoDataToDisplaySearchPopMsg(30);
								if (ele != null) {
									msg = ele.getText().trim();
									if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
										appLog.info("  Msg Verified : " + msg);
									} else {
										appLog.error("  Msg Not Verified : Actual - " + msg);
										sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
									}
								} else {
									appLog.error(" No Data Display Msg Element is Null ");
									sa.assertTrue(false, " No Data Display Msg Element is Null ");
								}

								// 2b

								if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

									if (bp.verifyDownloadFunctionality(PageName.InstitutionsPage,
											Workspace.InvestorWorkspace, filesName[0], true, true, false)) {
										appLog.info("Verify UI of Opened File : " + filesName[0]);
									} else {
										appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
										sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
									}

									switchToDefaultContent(driver);
									switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));

								/*	// 3RD
									if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
											action.BOOLEAN)) {

										String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;
										saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
										sa.combineAssertions(saa);
									} else {
										appLog.error(" Not Able to Click All Folder Radio Button  ");
										sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
									}*/

									if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
											action.SCROLLANDBOOLEAN)) {

									} else {
										appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
										sa.assertTrue(false,
												" Not Able to CLick Search Pop Search Text Cross Icon");
									}

								} else {
									appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
									sa.assertTrue(false,
											" Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

								}

							} else {
								appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
								sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
							}

						} else {
							appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
							sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");
						}

					} else {
						appLog.error(" Not Able to Click Search Cross Icon ");
						sa.assertTrue(false, " Not Able to Click Search Cross Icon ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));

				// 4

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace,
						" ", 30)) {
					ThreadSleep(5000);
					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutEnteringValue)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				// 5
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace,
						filesName[1], 30)) {

					ThreadSleep(5000);

					ele = bp.getNoDataToDisplaySearchPopMsg1(30);
					if (ele != null) {
						msg = ele.getText().trim();
						if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
							appLog.info("  Msg Verified : " + msg);
						} else {
							appLog.error("  Msg Not Verified : Actual - " + msg);
							sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
						}
					} else {
						appLog.error(" No Data Display Msg Element is Null ");
						sa.assertTrue(false, " No Data Display Msg Element is Null ");
					}

					saa = bp.verifySearchUI(cmnPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 20));
			
			// Internal

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					// 6

					saa = bp.verifySearchUI(intPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, intPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 6a -- add code for Sorting

					if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
							"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

						if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

							// 6b -- add Code for Sorting

						/*	if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
									action.BOOLEAN)) {

								// 6b -- add Code for Sorting

								String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;
								
								// 7
								
								saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
								sa.combineAssertions(saa);
							} else {
								appLog.error(" Not Able to Click All Folder Radio Button  ");
								sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
							}*/

							// 5

							if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
									action.SCROLLANDBOOLEAN)) {

								if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage,
										Workspace.InvestorWorkspace, filesName[1], 30)) {

									ThreadSleep(5000);

									ele = bp.getNoDataToDisplaySearchPopMsg1(30);
									if (ele != null) {
										msg = ele.getText().trim();
										if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
											appLog.info("  Msg Verified : " + msg);
										} else {
											appLog.error("  Msg Not Verified : Actual - " + msg);
											sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
										}
									} else {
										appLog.error(" No Data Display Msg Element is Null ");
										sa.assertTrue(false, " No Data Display Msg Element is Null ");
									}

									saa = bp.verifySearchUI(intPath, 30, PageName.InstitutionsPage);
									sa.combineAssertions(saa);

									click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
											action.SCROLLANDBOOLEAN);

								} else {
									appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
									sa.assertTrue(false,
											" Not Able to Enter Value/ Not Able to click Search Icon ");

								}

							} else {
								appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
								sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
							}

						} else {
							appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
							sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

						}

					} else {
						appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
						sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}

			// Shared

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					// 9

					saa = bp.verifySearchUI(shdPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, shdPath, filesName[0], date);
					sa.combineAssertions(saa);

				/*	if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

						String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

						// 10

						saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
						sa.combineAssertions(saa);
					} else {
						appLog.error(" Not Able to Click All Folder Radio Button  ");
						sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
					}*/

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}

			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1,
					PageName.InstitutionsPage, Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					// 11

					saa = bp.verifySearchUI(stdPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, stdPath, filesName[0], date);
					sa.combineAssertions(saa);

				/*	if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

						String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

						// 12

						saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
						sa.combineAssertions(saa);
						
						// 13
						
						if (bp.verifyDownloadFunctionality(PageName.InstitutionsPage,
								Workspace.InvestorWorkspace, filesName[0], true, true, false)) {
							appLog.info("Verify UI of Opened File : " + filesName[0]);
						} else {
							appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
							sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
						}

						switchToDefaultContent(driver);
						switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
						
					} else {
						appLog.error(" Not Able to Click All Folder Radio Button  ");
						sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
					}*/

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Institution or Institution Not Available : " + M7Institution1);
			sa.assertTrue(false, "Not Able to Click Institution or Institution Not Available : " + M7Institution1);
		}
	} else {
		appLog.info("Not Able to Click Institution Tab");
		sa.assertTrue(false, "Not Able to Click Institution Tab");
	}

	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc100_SearchingInLimitedPartnerForPresentAndAbsentFiles() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	SoftAssert saa = new SoftAssert();
	String msg;
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	;
	WebElement ele;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	String alertMessage;

	if (bp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedLP(M7LimitedPartner1)) {
			appLog.info("Opened Institution : " + M7LimitedPartner1);

			switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			
			// 1st

			ele = bp.getSearchIcon(driver, PageName.InstitutionsPage, Workspace.InvestorWorkspace, 30);
			if (ele != null) {

				if (click(driver, ele, "Search Icon", action.SCROLLANDBOOLEAN)) {

					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutSelectingAFolder)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Click Search Icon ");
					sa.assertTrue(false, " Not Able to Click Search Icon ");
				}
			} else {
				appLog.error(" Search Icon Element is Null ");
				sa.assertTrue(false, " Search Icon Element is Null ");
			}



			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);

				// 1st

				// 2nd

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					saa = bp.verifySearchUI(cmnPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, cmnPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 2a
					if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN)) {

						if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage,
								Workspace.InvestorWorkspace, filesName[0], 30)) {

							if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
									"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

								ele = bp.getNoDataToDisplaySearchPopMsg(30);
								if (ele != null) {
									msg = ele.getText().trim();
									if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
										appLog.info("  Msg Verified : " + msg);
									} else {
										appLog.error("  Msg Not Verified : Actual - " + msg);
										sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
									}
								} else {
									appLog.error(" No Data Display Msg Element is Null ");
									sa.assertTrue(false, " No Data Display Msg Element is Null ");
								}

								// 2b

								if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

									if (bp.verifyDownloadFunctionality(PageName.InstitutionsPage,
											Workspace.InvestorWorkspace, filesName[0], true, true, false)) {
										appLog.info("Verify UI of Opened File : " + filesName[0]);
									} else {
										appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
										sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
									}

									switchToDefaultContent(driver);
									switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));

								/*	// 3RD
									if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
											action.BOOLEAN)) {

										String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;
										saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
										sa.combineAssertions(saa);
									} else {
										appLog.error(" Not Able to Click All Folder Radio Button  ");
										sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
									}*/

									if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
											action.SCROLLANDBOOLEAN)) {

									} else {
										appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
										sa.assertTrue(false,
												" Not Able to CLick Search Pop Search Text Cross Icon");
									}

								} else {
									appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
									sa.assertTrue(false,
											" Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

								}

							} else {
								appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
								sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
							}

						} else {
							appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
							sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");
						}

					} else {
						appLog.error(" Not Able to Click Search Cross Icon ");
						sa.assertTrue(false, " Not Able to Click Search Cross Icon ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));

				// 4

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace,
						" ", 30)) {
					ThreadSleep(5000);
					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutEnteringValue)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				// 5
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace,
						filesName[1], 30)) {

					ThreadSleep(5000);

					ele = bp.getNoDataToDisplaySearchPopMsg1(30);
					if (ele != null) {
						msg = ele.getText().trim();
						if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
							appLog.info("  Msg Verified : " + msg);
						} else {
							appLog.error("  Msg Not Verified : Actual - " + msg);
							sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
						}
					} else {
						appLog.error(" No Data Display Msg Element is Null ");
						sa.assertTrue(false, " No Data Display Msg Element is Null ");
					}

					saa = bp.verifySearchUI(cmnPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, ip.getFrame(PageName.InstitutionsPage, 20));
			
			// Internal

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					// 6

					saa = bp.verifySearchUI(intPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, intPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 6a -- add code for Sorting

					if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
							"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

						if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

							// 6b -- add Code for Sorting

						/*	if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
									action.BOOLEAN)) {

								// 6b -- add Code for Sorting

								String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;
								
								// 7
								
								saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
								sa.combineAssertions(saa);
							} else {
								appLog.error(" Not Able to Click All Folder Radio Button  ");
								sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
							}*/

							// 5

							if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
									action.SCROLLANDBOOLEAN)) {

								if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage,
										Workspace.InvestorWorkspace, filesName[1], 30)) {

									ThreadSleep(5000);

									ele = bp.getNoDataToDisplaySearchPopMsg1(30);
									if (ele != null) {
										msg = ele.getText().trim();
										if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
											appLog.info("  Msg Verified : " + msg);
										} else {
											appLog.error("  Msg Not Verified : Actual - " + msg);
											sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
										}
									} else {
										appLog.error(" No Data Display Msg Element is Null ");
										sa.assertTrue(false, " No Data Display Msg Element is Null ");
									}

									saa = bp.verifySearchUI(intPath, 30, PageName.InstitutionsPage);
									sa.combineAssertions(saa);

									click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
											action.SCROLLANDBOOLEAN);

								} else {
									appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
									sa.assertTrue(false,
											" Not Able to Enter Value/ Not Able to click Search Icon ");

								}

							} else {
								appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
								sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
							}

						} else {
							appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
							sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

						}

					} else {
						appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
						sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}

			// Shared

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					// 9

					saa = bp.verifySearchUI(shdPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, shdPath, filesName[0], date);
					sa.combineAssertions(saa);

				/*	if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

						String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

						// 10

						saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
						sa.combineAssertions(saa);
					} else {
						appLog.error(" Not Able to Click All Folder Radio Button  ");
						sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
					}*/

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}

			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1,
					PageName.InstitutionsPage, Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.InstitutionsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					// 11

					saa = bp.verifySearchUI(stdPath, 30, PageName.InstitutionsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, stdPath, filesName[0], date);
					sa.combineAssertions(saa);

				/*	if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

						String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

						// 12

						saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
						sa.combineAssertions(saa);
						
						// 13
						
						if (bp.verifyDownloadFunctionality(PageName.InstitutionsPage,
								Workspace.InvestorWorkspace, filesName[0], true, true, false)) {
							appLog.info("Verify UI of Opened File : " + filesName[0]);
						} else {
							appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
							sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
						}

						switchToDefaultContent(driver);
						switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 20));
						
					} else {
						appLog.error(" Not Able to Click All Folder Radio Button  ");
						sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
					}*/

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		} else {
			appLog.info("Not Able to Click Institution or Limited Partner Not Available : " + M7LimitedPartner1);
			sa.assertTrue(false, "Not Able to Click Institution or Limited Partner Not Available  : " + M7LimitedPartner1);
		}
	} else {
		appLog.info("Not Able to Click Institution Tab");
		sa.assertTrue(false, "Not Able to Click Institution Tab");
	}

	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}	

@Test
	public void M7tc099_SearchingInContactPageForPresentAndAbsentFiles() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	SoftAssert saa = new SoftAssert();
	String msg;
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	
	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	;
	WebElement ele;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	String alertMessage;

	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			appLog.info("Opened Contact  : " + M7Contact1FirstName+" "+M7Contact1LastName);
			switchToFrame(driver, 30, ip.getFrame(PageName.ContactsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			
			// 1st

			ele = bp.getSearchIcon(driver, PageName.ContactsPage, Workspace.InvestorWorkspace, 30);
			if (ele != null) {

				if (click(driver, ele, "Search Icon", action.SCROLLANDBOOLEAN)) {

					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutSelectingAFolder)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Click Search Icon ");
					sa.assertTrue(false, " Not Able to Click Search Icon ");
				}
			} else {
				appLog.error(" Search Icon Element is Null ");
				sa.assertTrue(false, " Search Icon Element is Null ");
			}



			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);

				// 1st

				// 2nd

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					saa = bp.verifySearchUI(cmnPath, 30, PageName.ContactsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, cmnPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 2a
					if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN)) {

						if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.ContactsPage,
								Workspace.InvestorWorkspace, filesName[0], 30)) {

							if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
									"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

								ele = bp.getNoDataToDisplaySearchPopMsg(30);
								if (ele != null) {
									msg = ele.getText().trim();
									if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
										appLog.info("  Msg Verified : " + msg);
									} else {
										appLog.error("  Msg Not Verified : Actual - " + msg);
										sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
									}
								} else {
									appLog.error(" No Data Display Msg Element is Null ");
									sa.assertTrue(false, " No Data Display Msg Element is Null ");
								}

								// 2b

								if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

									if (bp.verifyDownloadFunctionality(PageName.ContactsPage,
											Workspace.InvestorWorkspace, filesName[0], true, true, false)) {
										appLog.info("Verify UI of Opened File : " + filesName[0]);
									} else {
										appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
										sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
									}

									switchToDefaultContent(driver);
									switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));

								/*	// 3RD
									if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
											action.BOOLEAN)) {

										String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;
										saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
										sa.combineAssertions(saa);
									} else {
										appLog.error(" Not Able to Click All Folder Radio Button  ");
										sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
									}*/

									if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
											action.SCROLLANDBOOLEAN)) {

									} else {
										appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
										sa.assertTrue(false,
												" Not Able to CLick Search Pop Search Text Cross Icon");
									}

								} else {
									appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
									sa.assertTrue(false,
											" Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

								}

							} else {
								appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
								sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
							}

						} else {
							appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
							sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");
						}

					} else {
						appLog.error(" Not Able to Click Search Cross Icon ");
						sa.assertTrue(false, " Not Able to Click Search Cross Icon ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));

				// 4

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace,
						" ", 30)) {
					ThreadSleep(5000);
					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutEnteringValue)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				// 5
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace,
						filesName[1], 30)) {

					ThreadSleep(5000);

					ele = bp.getNoDataToDisplaySearchPopMsg1(30);
					if (ele != null) {
						msg = ele.getText().trim();
						if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
							appLog.info("  Msg Verified : " + msg);
						} else {
							appLog.error("  Msg Not Verified : Actual - " + msg);
							sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
						}
					} else {
						appLog.error(" No Data Display Msg Element is Null ");
						sa.assertTrue(false, " No Data Display Msg Element is Null ");
					}

					saa = bp.verifySearchUI(cmnPath, 30, PageName.ContactsPage);
					sa.combineAssertions(saa);

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, ip.getFrame(PageName.ContactsPage, 20));
			
			// Shared

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					// 9

					saa = bp.verifySearchUI(shdPath, 30, PageName.ContactsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, shdPath, filesName[0], date);
					sa.combineAssertions(saa);

				/*	if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

						String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

						// 10

						saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
						sa.combineAssertions(saa);
					} else {
						appLog.error(" Not Able to Click All Folder Radio Button  ");
						sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
					}*/

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}

			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1,
					PageName.ContactsPage, Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.ContactsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					// 11

					saa = bp.verifySearchUI(stdPath, 30, PageName.ContactsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, stdPath, filesName[0], date);
					sa.combineAssertions(saa);

				/*	if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

						String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

						// 12

						saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
						sa.combineAssertions(saa);
						
						// 13
						
						if (bp.verifyDownloadFunctionality(PageName.ContactsPage,
								Workspace.InvestorWorkspace, filesName[0], true, true, false)) {
							appLog.info("Verify UI of Opened File : " + filesName[0]);
						} else {
							appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
							sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
						}

						switchToDefaultContent(driver);
						switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 20));
						
					} else {
						appLog.error(" Not Able to Click All Folder Radio Button  ");
						sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
					}*/

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		 } else {
			appLog.error("Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
			sa.assertTrue(false, "Not able to Click Contact OR Contact is not Present: " + M7Contact1FirstName+" "+M7Contact1LastName);
		}
	} else {
		appLog.error("Not able to Click Contact tab ");
		sa.assertTrue(false, "Not able to Click Contact tab ");
	}

	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc101_SearchingInCommitmentPageForPresentAndAbsentFiles() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
	
	SoftAssert saa = new SoftAssert();
	String msg;
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	String intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath);
	
	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	;
	WebElement ele;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	String alertMessage;

	if (bp.clickOnTab(TabName.CommitmentsTab)) {
		if (cmp.clickOnCreatedCommitmentId(M7Commitment1ID)) {
			appLog.info("Opened Commitment  : " + M7Commitment1ID);
			switchToFrame(driver, 30, ip.getFrame(PageName.CommitmentsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"Investor workspace view");
			
			// 1st

			ele = bp.getSearchIcon(driver, PageName.CommitmentsPage, Workspace.InvestorWorkspace, 30);
			if (ele != null) {

				if (click(driver, ele, "Search Icon", action.SCROLLANDBOOLEAN)) {

					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutSelectingAFolder)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Click Search Icon ");
					sa.assertTrue(false, " Not Able to Click Search Icon ");
				}
			} else {
				appLog.error(" Search Icon Element is Null ");
				sa.assertTrue(false, " Search Icon Element is Null ");
			}



			if (fp.verifyFolderPathdummy(cmnPath, null, null, M7FundName1, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + cmnPath);

				// 1st

				// 2nd

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					saa = bp.verifySearchUI(cmnPath, 30, PageName.CommitmentsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, cmnPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 2a
					if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN)) {

						if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.CommitmentsPage,
								Workspace.InvestorWorkspace, filesName[0], 30)) {

							if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
									"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

								ele = bp.getNoDataToDisplaySearchPopMsg(30);
								if (ele != null) {
									msg = ele.getText().trim();
									if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
										appLog.info("  Msg Verified : " + msg);
									} else {
										appLog.error("  Msg Not Verified : Actual - " + msg);
										sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
									}
								} else {
									appLog.error(" No Data Display Msg Element is Null ");
									sa.assertTrue(false, " No Data Display Msg Element is Null ");
								}

								// 2b

								if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

									if (bp.verifyDownloadFunctionality(PageName.CommitmentsPage,
											Workspace.InvestorWorkspace, filesName[0], true, true, false)) {
										appLog.info("Verify UI of Opened File : " + filesName[0]);
									} else {
										appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
										sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
									}

									switchToDefaultContent(driver);
									switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));

								/*	// 3RD
									if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
											action.BOOLEAN)) {

										String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;
										saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
										sa.combineAssertions(saa);
									} else {
										appLog.error(" Not Able to Click All Folder Radio Button  ");
										sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
									}*/

									if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
											action.SCROLLANDBOOLEAN)) {

									} else {
										appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
										sa.assertTrue(false,
												" Not Able to CLick Search Pop Search Text Cross Icon");
									}

								} else {
									appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
									sa.assertTrue(false,
											" Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

								}

							} else {
								appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
								sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
							}

						} else {
							appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
							sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");
						}

					} else {
						appLog.error(" Not Able to Click Search Cross Icon ");
						sa.assertTrue(false, " Not Able to Click Search Cross Icon ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));

				// 4

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace,
						" ", 30)) {
					ThreadSleep(5000);
					if (isAlertPresent(driver)) {
						alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

						if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutEnteringValue)) {

							appLog.info(" Alert Msg Verified : " + alertMessage);
						} else {
							appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
							sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
						}

						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

					} else {
						appLog.error(" No Alert is Present ");
						sa.assertTrue(false, " No Alert is Present ");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

				// 5
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
				scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
						"Investor workspace view");
				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace,
						filesName[1], 30)) {

					ThreadSleep(5000);

					ele = bp.getNoDataToDisplaySearchPopMsg1(30);
					if (ele != null) {
						msg = ele.getText().trim();
						if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
							appLog.info("  Msg Verified : " + msg);
						} else {
							appLog.error("  Msg Not Verified : Actual - " + msg);
							sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
						}
					} else {
						appLog.error(" No Data Display Msg Element is Null ");
						sa.assertTrue(false, " No Data Display Msg Element is Null ");
					}

					saa = bp.verifySearchUI(cmnPath, 30, PageName.CommitmentsPage);
					sa.combineAssertions(saa);

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + cmnPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
			}

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, ip.getFrame(PageName.CommitmentsPage, 20));
			
			// Internal

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
			if (fp.verifyFolderPathdummy(intPath, null, null, M7FundName1, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + intPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					// 6

					saa = bp.verifySearchUI(intPath, 30, PageName.CommitmentsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, intPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 6a -- add code for Sorting

					if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
							"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

						if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

							// 6b -- add Code for Sorting

						/*	if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
									action.BOOLEAN)) {

								// 6b -- add Code for Sorting

								String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;
								
								// 7
								
								saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
								sa.combineAssertions(saa);
							} else {
								appLog.error(" Not Able to Click All Folder Radio Button  ");
								sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
							}*/

							// 5

							if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
									action.SCROLLANDBOOLEAN)) {

								if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.CommitmentsPage,
										Workspace.InvestorWorkspace, filesName[1], 30)) {

									ThreadSleep(5000);

									ele = bp.getNoDataToDisplaySearchPopMsg1(30);
									if (ele != null) {
										msg = ele.getText().trim();
										if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
											appLog.info("  Msg Verified : " + msg);
										} else {
											appLog.error("  Msg Not Verified : Actual - " + msg);
											sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
										}
									} else {
										appLog.error(" No Data Display Msg Element is Null ");
										sa.assertTrue(false, " No Data Display Msg Element is Null ");
									}

									saa = bp.verifySearchUI(intPath, 30, PageName.CommitmentsPage);
									sa.combineAssertions(saa);

									click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
											action.SCROLLANDBOOLEAN);

								} else {
									appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
									sa.assertTrue(false,
											" Not Able to Enter Value/ Not Able to click Search Icon ");

								}

							} else {
								appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
								sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
							}

						} else {
							appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
							sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

						}

					} else {
						appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
						sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
					}

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + intPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + intPath);
			}

			// Shared

			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
			if (fp.verifyFolderPathdummy(shdPath, null, null, M7FundName1, PageName.CommitmentsPage,
					Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + shdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					// 9

					saa = bp.verifySearchUI(shdPath, 30, PageName.CommitmentsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, shdPath, filesName[0], date);
					sa.combineAssertions(saa);

				/*	if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

						String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

						// 10

						saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
						sa.combineAssertions(saa);
					} else {
						appLog.error(" Not Able to Click All Folder Radio Button  ");
						sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
					}*/

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + shdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
			}

			// Standard
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1,
					PageName.CommitmentsPage, Workspace.InvestorWorkspace, 60)) {

				appLog.info(" Folder Structure Verified: " + stdPath);

				if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.CommitmentsPage, Workspace.InvestorWorkspace,
						filesName[0], 30)) {

					// 11

					saa = bp.verifySearchUI(stdPath, 30, PageName.CommitmentsPage);
					sa.combineAssertions(saa);

					saa = bp.verifyContentGridForSearch(driver, stdPath, filesName[0], date);
					sa.combineAssertions(saa);

				/*	if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

						String AllPath = cmnPath + "," + intPath + "," + shdPath + "," + stdPath;

						// 12

						saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
						sa.combineAssertions(saa);
						
						// 13
						
						if (bp.verifyDownloadFunctionality(PageName.CommitmentsPage,
								Workspace.InvestorWorkspace, filesName[0], true, true, false)) {
							appLog.info("Verify UI of Opened File : " + filesName[0]);
						} else {
							appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
							sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
						}

						switchToDefaultContent(driver);
						switchToFrame(driver, 30, fp.getFrame(PageName.CommitmentsPage, 20));
						
					} else {
						appLog.error(" Not Able to Click All Folder Radio Button  ");
						sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
					}*/

					click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

				} else {
					appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
					sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

				}

			} else {
				appLog.error(" Folder Structure Not Verified  : " + stdPath);
				sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
			}

		}  else {
			appLog.error("Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
			sa.assertTrue(false, "Not able to Click Commitment OR Commitment is not Present: " + M7Commitment1ID);
		}
	} else {
		appLog.error("Not able to Click Commitment tab ");
		sa.assertTrue(false, "Not able to Click Commitment tab ");
	}

	switchToDefaultContent(driver);
	lp.CRMlogout();
	ThreadSleep(3000);
	sa.assertAll();

}

@Test
	public void M7tc102_SearchingInInvestorPageForPresentAndAbsentFiles() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
	SoftAssert saa = new SoftAssert();
	
	String msg;
	
	String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
	String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
	
	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	;
	WebElement ele;
	String alertMessage;
	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {



		if (fp.verifyFolderPathdummy(cmnPath, null, null, null, PageName.CurrentInvestmentPgae,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + cmnPath);

			// 1st

			// 2nd

			if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.CurrentInvestmentPgae, Workspace.InvestorWorkspace,
					filesName[0], 30)) {

				saa = bp.verifySearchUI(cmnPath, 30, PageName.CurrentInvestmentPgae);
				sa.combineAssertions(saa);

				saa = bp.verifyContentGridForSearch(driver, cmnPath, filesName[0], date);
				sa.combineAssertions(saa);

				// 2a
				if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN)) {

					if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.CurrentInvestmentPgae,
							Workspace.InvestorWorkspace, filesName[0], 30)) {

						if (click(driver, bp.getSearchPopSearchTextBoxCrossIcon(30),
								"Search Pop Search Text Cross Icon", action.BOOLEAN)) {

							ele = bp.getNoDataToDisplaySearchPopMsg(30);
							if (ele != null) {
								msg = ele.getText().trim();
								if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
									appLog.info("  Msg Verified : " + msg);
								} else {
									appLog.error("  Msg Not Verified : Actual - " + msg);
									sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
								}
							} else {
								appLog.error(" No Data Display Msg Element is Null ");
								sa.assertTrue(false, " No Data Display Msg Element is Null ");
							}

							// 2b

							if (bp.enterValueAndClickonSearchPopUpResult(filesName[0], 30)) {

								if (bp.verifyDownloadFunctionality(PageName.CurrentInvestmentPgae,
										Workspace.InvestorWorkspace, filesName[0], true, true, false)) {
									appLog.info("Verify UI of Opened File : " + filesName[0]);
								} else {
									appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
									sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
								}

								switchToDefaultContent(driver);
							

								// 3RD
								if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button",
										action.BOOLEAN)) {

									String AllPath = cmnPath + "," + shdPath + "," + stdPath;
									saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
									sa.combineAssertions(saa);
								} else {
									appLog.error(" Not Able to Click All Folder Radio Button  ");
									sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
								}

								if (click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon",
										action.SCROLLANDBOOLEAN)) {

								} else {
									appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
									sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
								}

							} else {
								appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon PopUp ");
								sa.assertTrue(false,
										" Not Able to Enter Value/ Not Able to click Search Icon PoPUP ");

							}

						} else {
							appLog.error(" Not Able to CLick Search Pop Search Text Cross Icon");
							sa.assertTrue(false, " Not Able to CLick Search Pop Search Text Cross Icon");
						}

					} else {
						appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
						sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");
					}

				} else {
					appLog.error(" Not Able to Click Search Cross Icon ");
					sa.assertTrue(false, " Not Able to Click Search Cross Icon ");
				}

			} else {
				appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
				sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

			}

			switchToDefaultContent(driver);

			// 4

			if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.CurrentInvestmentPgae, Workspace.InvestorWorkspace, " ",
					30)) {
				ThreadSleep(5000);
				if (isAlertPresent(driver)) {
					alertMessage = switchToAlertAndGetMessage(driver, 60, action.GETTEXT);

					if (alertMessage.equalsIgnoreCase(BasePageErrorMessage.alertMsgWithoutEnteringValue)) {

						appLog.info(" Alert Msg Verified : " + alertMessage);
					} else {
						appLog.error(" Alert Msg Not Verified : Actual - " + alertMessage);
						sa.assertTrue(false, " Alert Msg Not Verified : Actual - " + alertMessage);
					}

					switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);

				} else {
					appLog.error(" No Alert is Present ");
					sa.assertTrue(false, " No Alert is Present ");
				}

			} else {
				appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
				sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

			}

			// 5
			switchToDefaultContent(driver);
			
			if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.CurrentInvestmentPgae, Workspace.InvestorWorkspace,
					filesName[1], 30)) {

				ThreadSleep(5000);

				ele = bp.getNoDataToDisplaySearchPopMsg1(30);
				if (ele != null) {
					msg = ele.getText().trim();
					if (msg.equalsIgnoreCase(BasePageErrorMessage.nodataDisplayMsg)) {
						appLog.info("  Msg Verified : " + msg);
					} else {
						appLog.error("  Msg Not Verified : Actual - " + msg);
						sa.assertTrue(false, "  Msg Not Verified : Actual - " + msg);
					}
				} else {
					appLog.error(" No Data Display Msg Element is Null ");
					sa.assertTrue(false, " No Data Display Msg Element is Null ");
				}

				saa = bp.verifySearchUI(cmnPath, 30, PageName.CurrentInvestmentPgae);
				sa.combineAssertions(saa);

				click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

			} else {
				appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
				sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

			}

		} else {
			appLog.error(" Folder Structure Not Verified  : " + cmnPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + cmnPath);
		}

		switchToDefaultContent(driver);

		// Shared

		if (fp.verifyFolderPathdummy(shdPath, null, null, null, PageName.CurrentInvestmentPgae,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + shdPath);

			if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.CurrentInvestmentPgae, Workspace.InvestorWorkspace,
					filesName[0], 30)) {

				// 9

				saa = bp.verifySearchUI(shdPath, 30, PageName.CurrentInvestmentPgae);
				sa.combineAssertions(saa);

				saa = bp.verifyContentGridForSearch(driver, shdPath, filesName[0], date);
				sa.combineAssertions(saa);

				if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

					String AllPath = cmnPath + "," + shdPath + "," + stdPath;

					// 10

					saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
					sa.combineAssertions(saa);
				} else {
					appLog.error(" Not Able to Click All Folder Radio Button  ");
					sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
				}

				click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

			} else {
				appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
				sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

			}

		} else {
			appLog.error(" Folder Structure Not Verified  : " + shdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + shdPath);
		}

		// Standard
		switchToDefaultContent(driver);
		if (fp.verifyFolderPathdummy(stdPath, null, null, null, PageName.CurrentInvestmentPgae,
				Workspace.InvestorWorkspace, 60)) {

			appLog.info(" Folder Structure Verified: " + stdPath);

			if (bp.enterValueAndClickonSearchBoxContentGrid(PageName.CurrentInvestmentPgae, Workspace.InvestorWorkspace,
					filesName[0], 30)) {

				// 11

				saa = bp.verifySearchUI(stdPath, 30, PageName.CurrentInvestmentPgae);
				sa.combineAssertions(saa);

				saa = bp.verifyContentGridForSearch(driver, stdPath, filesName[0], date);
				sa.combineAssertions(saa);

				if (click(driver, bp.getAllFolderRadioButton(30), "All Folder Radio Button", action.BOOLEAN)) {

					String AllPath = cmnPath + "," + shdPath + "," + stdPath;

					// 12

					saa = bp.verifyContentGridForSearch(driver, AllPath, filesName[0], date);
					sa.combineAssertions(saa);

					// 13

					if (bp.verifyDownloadFunctionality(PageName.CurrentInvestmentPgae, Workspace.InvestorWorkspace,
							filesName[0], true, true, false)) {
						appLog.info("Verify UI of Opened File : " + filesName[0]);
					} else {
						appLog.error("Not Able to Verify UI of Opened File : " + filesName[0]);
						sa.assertTrue(false, "Not Able Verify UI of Opened File : " + filesName[0]);
					}

					switchToDefaultContent(driver);

				} else {
					appLog.error(" Not Able to Click All Folder Radio Button  ");
					sa.assertTrue(false, " Not Able to Click All Folder Radio Button  ");
				}

				click(driver, bp.getSearchPopCrossIcon(30), "Search Cross Icon", action.SCROLLANDBOOLEAN);

			} else {
				appLog.error(" Not Able to Enter Value/ Not Able to click Search Icon ");
				sa.assertTrue(false, " Not Able to Enter Value/ Not Able to click Search Icon ");

			}

		} else {
			appLog.error(" Folder Structure Not Verified  : " + stdPath);
			sa.assertTrue(false, " Folder Structure Not Verified  : " + stdPath);
		}

	} else {
		appLog.info("Not able to click on CurrentInvestment tab");
		sa.assertTrue(false, "Not able to click on CurrentInvestment tab");
	}

	switchToDefaultContent(driver);
	lp.investorLogout();
	ThreadSleep(3000);
	sa.assertAll();

	
}

@Test
	public void M7tc103_1_UpdateCRMUserNameAndCheckOnContentGrid_VerifyUI() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	NIMPageBusinessLayer np = new NIMPageBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String updatedUserName = ExcelUtils.readData("Users", excelLabel.Variable_Name, "User1", excelLabel.Updated_LastName);
	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"fundraising workspace view");
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {
			if (fp.verifyUploadedByNameAndFirmName(filesName[0], M7FirmName, CRMUser1FirstName+" "+CRMUser1LastName,true,true,"User")) {
				appLog.info("uploaded by name and firm name is successfully verified");
			}
			else {
				appLog.error("uploaded by name and firm name could not be verified");
				sa.assertTrue(false, "uploaded by name and firm name could not be verified");
			}
			}
			switchToDefaultContent(driver);
		}
		else {
			appLog.error(M7FundName1+" is not found in funds page");
			sa.assertTrue(false, M7FundName1+" is not found in funds page");
		}
	}
	else {
		appLog.error("funds tab is not clickable");
		sa.assertTrue(false, "funds tab is not clickable");
	}

	if (fp.clickOnTab(TabName.NIMTab)) {
		switchToFrame(driver, 30, bp.getFrame(PageName.NavatarInvestorManager, 30));
		if (np.clickOnSideMenusTab(sideMenu.Profiles)) {
			if (click(driver, np.getEditIcon(60), "edit icon on NIM page", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, np.getMyProfileLastName(60), updatedUserName, "last name of user 1 on nim page", action.SCROLLANDBOOLEAN)) {
					if (click(driver, np.getMyProfileSaveButton(60), "save button on nim profile page", action.SCROLLANDBOOLEAN)) {
						if (np.getMyProfileNameInViewMode(60).getText().contains(updatedUserName)) {
							appLog.info("user last name has been successfully changed to "+updatedUserName);
						}
						else {
							appLog.error("user last name has not been changed");
							sa.assertTrue(false, "user last name has not been changed");
						}
					}else {
						appLog.error("save button is not clickable on profle page");
						sa.assertTrue(false, "save button is not clickable on profle page");
					}
				}
				else {
					appLog.error("last name textbox is not visible on my profile page");
					sa.assertTrue(false, "last name textbox is not visible on my profile page");
				}
			}
			else {
				appLog.error("edit icon is not clickable on my profile page");
				sa.assertTrue(false, "edit icon is not clickable on my profile page");
			}
		}
		else {
			appLog.error("side menu profile link is not clickable");
			sa.assertTrue(false, "side menu profile link is not clickable");
		}
		switchToDefaultContent(driver);
	}
	//find name in content grid after updating name on nim page
	if (np.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			
		
		switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
		scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
				"fundraising workspace view");
		if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
				Workspace.InvestorWorkspace, 60)) {
			if (fp.verifyUploadedByNameAndFirmName(filesName[0], "", CRMUser1FirstName+" "+updatedUserName, false, true,"User")) {
				appLog.info("file name is successfully verified");
			}
			else {
				appLog.error("file name could not be verified");
				sa.assertTrue(false, "file name could not be verified");
			}
			
		}
		else {
			appLog.error(stdPath + " is not found in funds page content grid");
			sa.assertTrue(false, stdPath + " is not found in funds page content grid");
		}
		}
		else {
			appLog.error(M7FundName1+" was not found on funds page");
			sa.assertTrue(false, M7FundName1+" was not found on funds page");
		}
	switchToDefaultContent(driver);
	}
	lp.CRMlogout();
	sa.assertAll();
}

	@Test
	public void M7tc103_2_UpdateCRMUserNameAndCheckOnContentGrid_Action() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	
	AllFirmsPageBusinesslayer af = new AllFirmsPageBusinesslayer(driver);
	InvestorProfileBusinessLayer ifp = new InvestorProfileBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	String updatedFirmName = "updated"+M7FirmName;
	String updatedContactFirstName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M7C1", excelLabel.ContactNew_fName);
	String updatedContactLastName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M7C1", excelLabel.ContactNew_lName);

	
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (click(driver, af.getProfileLink(60), "profile link on investor all firms page", action.SCROLLANDBOOLEAN)) {
		if (click(driver,ifp.getEditIcon(60) , "Edit button on investor profile page", action.SCROLLANDBOOLEAN)) {
			if (sendKeys(driver, ifp.getFirstNameTextBox(60), updatedContactFirstName, "contact first name textbox on investor profile page", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, ifp.getLastNameTextBox(60), updatedContactLastName, "contact last name textbox on investor profile paeg", action.SCROLLANDBOOLEAN)) {
					if (click(driver, ifp.getSaveButtonMyProfilePage(60), "save button my profile page", action.SCROLLANDBOOLEAN)) {
						appLog.info("save button on my profile page has been clicked, contact has been successfully updated");
					}
					else {
						appLog.error("save button on my profile page is not clickable");
						sa.assertTrue(false, "save button on my profile page is not clickable");
					}
				}
				else {
					appLog.error("last name textbox is not visible on my profile page");
					sa.assertTrue(false, "last name textbox is not visible on my profile page");
				}
			}
			else {
				appLog.error("first name textbox is nto visible on my profile page");
				sa.assertTrue(false, "first name textbox is nto visible on my profile page");
			}
		}
		else {
			appLog.error("edit icon is not clckable on my profile page");
			sa.assertTrue(false, "edit icon is not clckable on my profile page");
		}
		if (click(driver, ifp.getMyFirmProfileTab(60), "my firm profile tab", action.SCROLLANDBOOLEAN) ) {
			if (click(driver, ifp.getEditIcon(60), "edit icon on my firm profile paeg", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, ifp.getFirmNameTextbox(60), updatedFirmName, "firm name texbtox on my firm profile page", action.SCROLLANDBOOLEAN)) {
					if (click(driver, ifp.getSaveButtonFirmProfile(60), "save button on firm profile page", action.SCROLLANDBOOLEAN)) {
						appLog.info("save button on my firm profile page has been clicked, firm details has been susccessfully updated");
					}
					else {
						appLog.error("save button is not clickable on firm profile page");
						sa.assertTrue(false, "save button is not clickable on firm profile page");
					}
				}
				else {
					appLog.error("firm name textbox is not visible on firm profile page");
					sa.assertTrue(false, "firm name textbox is not visible on firm profile page");
				}
			}
			else {
				appLog.error("edit icon is not clickable on my firm profile page");
				sa.assertTrue(false, "edit icon is not clickable on my firm profile page");
			}
		}
		else {
			appLog.error("my firm profile tab is not clickable on profile page");
			sa.assertTrue(false, "my firm profile tab is not clickable on profile page");
		}
	}
	else {
		appLog.error("profile link is not clickable on investor login page");
		sa.assertTrue(false, "profile link is not clickable on investor login page");
	}
	
	lp.investorLogout();
	sa.assertAll();
}

	@Test
	public void M7tc103_3_UpdateCRMUserNameAndCheckOnContentGrid_ImpactCRM() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	SoftAssert sa = new SoftAssert();
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String[] filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split(",");
	String updatedFirmName = "updated"+M7FirmName;
	String updatedContactFirstName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M7C1", excelLabel.ContactNew_fName);
	String updatedContactLastName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M7C1", excelLabel.ContactNew_lName);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);

	//now contact name and firm name will be updated in crm side content grid
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 20));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"fundraising workspace view");
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {
				
				if (fp.verifyUploadedByNameAndFirmName(filesName[1], updatedFirmName, updatedContactFirstName+ " "+ updatedContactLastName, true, true,"Contact")) {
					appLog.info("uploaded by name and firm name is successfully changed and verified from crm side content grid");
				}
				else {
					appLog.error("uploaded by name and firm name cannot be verified on content grid");
					sa.assertTrue(false, "uploaded by name and firm name cannot be verified on content grid");
				}
			}
			else {
				appLog.error("folder structure is not verified "+stdPath);
				sa.assertTrue(false, "folder structure is not verified "+stdPath);
			}
			
		}
		else {
			appLog.error("fund name "+M7FundName1+" is not found");
			sa.assertTrue(false, "fund name "+M7FundName1+" is not found");
		}
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}

@Test
	public void M7tc103_4_UpdateCRMUserNameAndCheckOnContentGrid_RevertBackChanges() {
	//reverting back changes
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	NIMPageBusinessLayer np = new NIMPageBusinessLayer(driver);
	InvestorProfileBusinessLayer ifp = new InvestorProfileBusinessLayer(driver);
	AllFirmsPageBusinesslayer af = new AllFirmsPageBusinesslayer(driver);
	SoftAssert sa = new SoftAssert();
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	if (fp.clickOnTab(TabName.NIMTab)) {
		switchToFrame(driver, 30, bp.getFrame(PageName.NavatarInvestorManager, 30));
		if (np.clickOnSideMenusTab(sideMenu.Profiles)) {
			if (click(driver, np.getEditIcon(60), "edit icon on NIM page", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, np.getMyProfileLastName(60), CRMUser1LastName, "last name of user 1 on nim page", action.SCROLLANDBOOLEAN)) {
					if (click(driver, np.getMyProfileSaveButton(60), "save button on nim profile page", action.SCROLLANDBOOLEAN)) {
						if (np.getMyProfileNameInViewMode(60).getText().contains(CRMUser1LastName)) {
							appLog.info("user last name has been successfully changed to "+CRMUser1LastName);
						}
						else {
							appLog.error("user last name has not been changed");
							sa.assertTrue(false, "user last name has not been changed");
						}
					}else {
						appLog.error("save button is not clickable on profle page");
						sa.assertTrue(false, "save button is not clickable on profle page");
					}
				}
				else {
					appLog.error("last name textbox is not visible on my profile page");
					sa.assertTrue(false, "last name textbox is not visible on my profile page");
				}
			}
			else {
				appLog.error("edit icon is not clickable on my profile page");
				sa.assertTrue(false, "edit icon is not clickable on my profile page");
			}
		}
		else {
			appLog.error("side menu profile link is not clickable");
			sa.assertTrue(false, "side menu profile link is not clickable");
		}
		switchToDefaultContent(driver);
	}
	lp.CRMlogout();
	config(ExcelUtils.readDataFromPropertyFile("Browser"));
	lp = new LoginPageBusinessLayer(driver);
	af = new AllFirmsPageBusinesslayer(driver);
	ifp = new InvestorProfileBusinessLayer(driver);
	lp.investorLogin(M7Contact1EmailId, adminPassword);
	if (click(driver, af.getProfileLink(60), "profile link on investor all firms page", action.SCROLLANDBOOLEAN)) {
		if (click(driver,ifp.getEditIcon(60) , "Edit button on investor profile page", action.SCROLLANDBOOLEAN)) {
			if (sendKeys(driver, ifp.getFirstNameTextBox(60), M7Contact1FirstName, "contact first name textbox on investor profile page", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, ifp.getLastNameTextBox(60), M7Contact1LastName, "contact last name textbox on investor profile paeg", action.SCROLLANDBOOLEAN)) {
					if (click(driver, ifp.getSaveButtonMyProfilePage(60), "save button my profile page", action.SCROLLANDBOOLEAN)) {
						appLog.info("save button on my profile page has been clicked, contact has been successfully updated");
					}
					else {
						appLog.error("save button on my profile page is not clickable");
						sa.assertTrue(false, "save button on my profile page is not clickable");
					}
				}
				else {
					appLog.error("last name textbox is not visible on my profile page");
					sa.assertTrue(false, "last name textbox is not visible on my profile page");
				}
			}
			else {
				appLog.error("first name textbox is nto visible on my profile page");
				sa.assertTrue(false, "first name textbox is nto visible on my profile page");
			}
		}
		else {
			appLog.error("edit icon is not clckable on my profile page");
			sa.assertTrue(false, "edit icon is not clckable on my profile page");
		}
		if (click(driver, ifp.getMyFirmProfileTab(60), "my firm profile tab", action.SCROLLANDBOOLEAN) ) {
			if (click(driver, ifp.getEditIcon(60), "edit icon on my firm profile paeg", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, ifp.getFirmNameTextbox(60), M7FirmName, "firm name texbtox on my firm profile page", action.SCROLLANDBOOLEAN)) {
					if (click(driver, ifp.getSaveButtonFirmProfile(60), "save button on firm profile page", action.SCROLLANDBOOLEAN)) {
						appLog.info("save button on my firm profile page has been clicked, firm details has been susccessfully updated");
					}
					else {
						appLog.error("save button is not clickable on firm profile page");
						sa.assertTrue(false, "save button is not clickable on firm profile page");
					}
				}
				else {
					appLog.error("firm name textbox is not visible on firm profile page");
					sa.assertTrue(false, "firm name textbox is not visible on firm profile page");
				}
			}
			else {
				appLog.error("edit icon is not clickable on my firm profile page");
				sa.assertTrue(false, "edit icon is not clickable on my firm profile page");
			}
		}
		else {
			appLog.error("my firm profile tab is not clickable on profile page");
			sa.assertTrue(false, "my firm profile tab is not clickable on profile page");
		}
	}
	else {
		appLog.error("profile link is not clickable on investor login page");
		sa.assertTrue(false, "profile link is not clickable on investor login page");
	}
	sa.assertAll();
}

	@Test
	public void M7tc104_CheckLinksUploadedByAndFirmName() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	String parentID = null;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {

			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			scrollDownThroughWebelement(driver, fp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
					"fundraising workspace view");
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {
				if (click(driver, fp.getUploadedByFromFileNameContentGrid(fileName, "Contact"), "uploaded by value in front of "+fileName, action.SCROLLANDBOOLEAN)) {
					ThreadSleep(5000);
					parentID = switchOnWindow(driver);
					if (parentID!=null) {
						scrollDownThroughWebelement(driver, cp.getContactFullNameInViewMode(60), "contact name on contacts page");
						if (cp.getContactFullNameInViewMode(60).getText().trim().equals(M7Contact1FirstName+" "+M7Contact1LastName)) {
							appLog.info("contact page has been successfully opened after clicking on name in content grid");
						}
						else {
							appLog.error("contact page cannot be opened in new window");
							sa.assertTrue(false, "contact page cannot be opened in new window");
						}
						driver.close();
						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
					}
					else {
						appLog.error("no new window for contact page is opened");
						sa.assertTrue(false, "no new window for contact page is opened");
					}
				}
				if (click(driver, fp.getFirmNameFromFileNameContentGrid(fileName, "Contact"), "firm name from content grid", action.SCROLLANDBOOLEAN)) {
					ThreadSleep(5000);
					parentID = switchOnWindow(driver);
					if (parentID!=null) {
						scrollDownThroughWebelement(driver, ip.getLegalNameLabelTextbox(60), "instituion name on institutions page");
						if (ip.getLegalNameLabelTextbox(60).getText().trim().contains(M7Institution1)) {
							appLog.info("institutions page for "+M7Institution1+" is opened successfully after clicking on firm name in content grid");
						}
						else {
							appLog.error("instittuions page could not be opened after clicking on firm name on content grid");
							sa.assertTrue(false, "instittuions page could not be opened after clicking on firm name on content grid");
						}
						driver.close();
						driver.switchTo().window(parentID);
					}
					else {
						appLog.error("no new window for institutions page is opened");
						sa.assertTrue(false, "no new window for institutions page is opened");
					}
				}
				else {
					appLog.error("firm name is not clickable on content grid in front of "+fileName);
					sa.assertTrue(false, "firm name is not clickable on content grid in front of "+fileName);
				}
			}
			else {
				appLog.error(stdPath+" path is not found in folder structure");
				sa.assertTrue(false, stdPath+" path is not found in folder structure");
			}
		}
		else {
			appLog.error("fund name "+M7FundName1+" is not found in funds page");
			sa.assertTrue(false, "fund name "+M7FundName1+" is not found in funds page");
		}
	}
	if (bp.clickOnTab(TabName.InstituitonsTab)) {
		if (ip.clickOnCreatedInstitution(M7Institution1)) {
			scrollDownThroughWebelement(driver, ip.getFrame(PageName.InstitutionsPage, 30), "institutions frame");
			switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, null, M7LimitedPartner1, M7FundName1, PageName.InstitutionsPage,
					Workspace.InvestorWorkspace, 60)) {
					if (click(driver,fp.getUploadedByFromFileNameContentGrid(fileName, "Contact") , "uploaded by contact for "+fileName, action.SCROLLANDBOOLEAN)) {
						ThreadSleep(5000);
						parentID = switchOnWindow(driver);
						if (parentID!=null) {
							scrollDownThroughWebelement(driver, cp.getContactFullNameInViewMode(60), "contact name on contacts page");
							if (cp.getContactFullNameInViewMode(60).getText().trim().equals(M7Contact1FirstName+" "+M7Contact1LastName)) {
								appLog.info("contact page has been successfully opened after clicking on name in content grid");
							}
							else {
								appLog.error("contact page cannot be opened in new window");
								sa.assertTrue(false, "contact page cannot be opened in new window");
							}
							driver.close();
							driver.switchTo().window(parentID);
							switchToFrame(driver, 30, fp.getFrame(PageName.InstitutionsPage, 30));
						}
						else {
							appLog.error("no new window for contact page is opened");
							sa.assertTrue(false, "no new window for contact page is opened");
						}
					}
					if (click(driver, fp.getFirmNameFromFileNameContentGrid(fileName, "Contact"), "firm name adjacent to file "+fileName, action.SCROLLANDBOOLEAN)) {
						ThreadSleep(5000);
						parentID = switchOnWindow(driver);
						if (parentID!=null) {
							scrollDownThroughWebelement(driver, ip.getLegalNameLabelTextbox(60), "instituion name on institutions page");
							if (ip.getLegalNameLabelTextbox(60).getText().trim().contains(M7Institution1)) {
								appLog.info("institutions page for "+M7Institution1+" is opened successfully after clicking on firm name in content grid");
							}
							else {
								appLog.error("instittuions page could not be opened after clicking on firm name on content grid");
								sa.assertTrue(false, "instittuions page could not be opened after clicking on firm name on content grid");
							}
							driver.close();
							driver.switchTo().window(parentID);
						}
						else {
							appLog.error("no new window for institutions page is opened");
							sa.assertTrue(false, "no new window for institutions page is opened");
						}
					}
					else {
						appLog.error("firm name cannot be get from "+fileName);
						sa.assertTrue(false, "firm name cannot be get from "+fileName);
					}
					
			}
			else {
				appLog.error("path "+stdPath+" cannot be found in folder structure");
				sa.assertTrue(false, "path "+stdPath+" cannot be found in folder structure");
			}
		}
		else {
			appLog.error("institution "+M7Institution1+" cannot be found on institutiions page");
			sa.assertTrue(false, "institution "+M7Institution1+" cannot be found on institutiions page");
		}
	}
	if (ip.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName,M7Contact1LastName, null)) {
			scrollDownThroughWebelement(driver, ip.getFrame(PageName.ContactsPage, 30), "contacts frame");
			switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, null, null, M7FundName1, PageName.ContactsPage,
					Workspace.InvestorWorkspace, 60)) {
				if (click(driver,fp.getUploadedByFromFileNameContentGrid(fileName, "Contact") , "uploaded by contact for "+fileName, action.SCROLLANDBOOLEAN)) {
					ThreadSleep(5000);
					parentID = switchOnWindow(driver);
					if (parentID!=null) {
						scrollDownThroughWebelement(driver, cp.getContactFullNameInViewMode(60), "contact name on contacts page");
						if (cp.getContactFullNameInViewMode(60).getText().trim().equals(M7Contact1FirstName+" "+M7Contact1LastName)) {
							appLog.info("contact page has been successfully opened after clicking on name in content grid");
						}
						else {
							appLog.error("contact page cannot be opened in new window");
							sa.assertTrue(false, "contact page cannot be opened in new window");
						}
						driver.close();
						driver.switchTo().window(parentID);
						switchToFrame(driver, 30, fp.getFrame(PageName.ContactsPage, 30));
					}
					else {
						appLog.error("no new window for contact page is opened");
						sa.assertTrue(false, "no new window for contact page is opened");
					}
				}
				if (click(driver, fp.getFirmNameFromFileNameContentGrid(fileName, "Contact"), "firm name adjacent to file "+fileName, action.SCROLLANDBOOLEAN)) {
					ThreadSleep(5000);
					parentID = switchOnWindow(driver);
					if (parentID!=null) {
						scrollDownThroughWebelement(driver, ip.getLegalNameLabelTextbox(60), "instituion name on institutions page");
						if (ip.getLegalNameLabelTextbox(60).getText().trim().contains(M7Institution1)) {
							appLog.info("institutions page for "+M7Institution1+" is opened successfully after clicking on firm name in content grid");
						}
						else {
							appLog.error("instittuions page could not be opened after clicking on firm name on content grid");
							sa.assertTrue(false, "instittuions page could not be opened after clicking on firm name on content grid");
						}
						driver.close();
						driver.switchTo().window(parentID);
					}
					else {
						appLog.error("no new window for institutions page is opened");
						sa.assertTrue(false, "no new window for institutions page is opened");
					}
				}
				else {
					appLog.error("firm name cannot be get from content grid adjacent to file "+fileName);
					sa.assertTrue(false, "firm name cannot be get from content grid adjacent to file "+fileName);
				}

			}
			else {
				appLog.error("path "+stdPath+" could not be found in folder structure");
				sa.assertTrue(false, "path "+stdPath+" could not be found in folder structure");
			}
		}
		else {
			appLog.error("contact "+M7Contact1FirstName+" "+M7Contact1LastName+" cannot be found on contacts page");
			sa.assertTrue(false, "contact "+M7Contact1FirstName+" "+M7Contact1LastName+" cannot be found on contacts page");
		}
	}
	else {
		appLog.error("contacts tab is not clickable");
		sa.assertTrue(false, "contacts tab is not clickable");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}

	@Test
	public void M7tc105_CheckLinksAfterDeletingContact() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	HomePageBusineesLayer hp = new HomePageBusineesLayer(driver);
	String msg=null;
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
			if (click(driver, cp.getDeleteButtonContactsPage(60), "delete button on contacts page", action.SCROLLANDBOOLEAN)) {
				ThreadSleep(3000);
				if (isAlertPresent(driver)) {
					msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
					switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
				}
				else {
					appLog.error("no alert is present");
					sa.assertTrue(false, "no alert is present");
				}
			}
			else {
				appLog.error("delete button on contacts page is not clickable");
				sa.assertTrue(false, "delete button on contacts page is not clickable");
			}
		}
		else {
			appLog.error("contact "+M7Contact1FirstName+" "+M7Contact1LastName+" was not found");
			sa.assertTrue(false, "contact "+M7Contact1FirstName+" "+M7Contact1LastName+" was not found");
		}
	}
	else {
		appLog.error("contacts tab is not clickable");
		sa.assertTrue(false, "contacts tab is not clickable");
	}
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M7FundName1)) {
			switchToFrame(driver, 30, fp.getFrame(PageName.FundsPage, 30));
			if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
					Workspace.InvestorWorkspace, 60)) {
				if (click(driver, fp.getUploadedByFromFileNameContentGrid(fileName, "Contact"), "firm name url adjacent to file "+fileName, action.SCROLLANDBOOLEAN)) {
					if (isAlertPresent(driver)) {
						msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
						if (msg.trim().equals(FundsPageErrorMessage.couldNotFindContactOrFirm)) {
							appLog.info("correct alert that contact is not present is successfully verified");
						}
						else {
							appLog.error("alert message is wrong for contact not found");
							sa.assertTrue(false, "alert message is wrong for contact not found");
						}
					}
					else {
						appLog.error("alert is not present when deleted contact is accessed");
						sa.assertTrue(false, "alert is not present when deleted contact is accessed");
					}
				}
				if (click(driver, fp.getFirmNameFromFileNameContentGrid(fileName, "Contact"), "firm name adjacent to "+fileName+" on contact grid", action.SCROLLANDBOOLEAN)) {
					if (isAlertPresent(driver)) {
						msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
						switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
						if (msg.trim().equals(FundsPageErrorMessage.couldNotFindContactOrFirm)) {
							appLog.info("correct alert that firm is not present is successfully verified");
						}
						else {
							appLog.error("alert for firm not found is wrong");
							sa.assertTrue(false, "alert for firm not found is wrong");
						}
					}
					else {
						appLog.error("no alert is present when clicking on deleted firm name");
						sa.assertTrue(false, "no alert is present when clicking on deleted firm name");
					}
				}
				else {
					appLog.error("cannot click on contact who uploaded file "+fileName);
					sa.assertTrue(false, "cannot click on contact who uploaded file "+fileName);
				}
			}
			else {
				appLog.error("folder path "+stdPath+" is not present in folder structrure");
				sa.assertTrue(false, "folder path "+stdPath+" is not present in folder structrure");
			}
			switchToDefaultContent(driver);
			if (hp.clickOnRecycleBin()) {
				if (hp.restoreValuesFromRecycleBin(M7Contact1FirstName+" "+M7Contact1LastName)) {
					if (bp.clickOnTab(TabName.ContactTab)) {
						if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
							appLog.info("contact has been successfully restored");
							if (click(driver, cp.getEditButton(60), "edit button on contacts page", action.SCROLLANDBOOLEAN)) {
								if (sendKeys(driver, cp.getEmailId(60), "**"+M7Contact1EmailId.substring(2), "email id textbox on contact page", action.SCROLLANDBOOLEAN)) {
									if (click(driver, cp.getSaveButton(60), "contacts page save button", action.SCROLLANDBOOLEAN)) {
										if (bp.clickOnTab(TabName.FundsTab)) {
											if (fp.clickOnCreatedFund(M7FundName1)) {
												switchToFrame(driver, 30, bp.getFrame(PageName.FundsPage, 30));
												if (fp.verifyFolderPathdummy(stdPath, M7Institution1, M7LimitedPartner1, M7FundName1, PageName.FundsPage,
														Workspace.InvestorWorkspace, 60)) {
													if (click(driver, fp.getUploadedByFromFileNameContentGrid(fileName, "Contact"), "contact name in front of file "+fileName+" in content grid", action.SCROLLANDBOOLEAN)) {
														if (isAlertPresent(driver)) {
															msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
															switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
															if (msg.trim().equals(FundsPageErrorMessage.couldNotFindContactOrFirm)) {
																appLog.info("correct error message alert is present after editing email id of contact and clicking on contact name");
															}
															else {
																appLog.error("error message is wrong when updated contact name and clicking on contact");
																sa.assertTrue(false, "error message is wrong when updated contact name and clicking on contact");
															}
														}
														else {
															appLog.error("no alert message is present when clicked on changed email id of contact");
															sa.assertTrue(false, "no alert message is present when clicked on changed email id of contact");
														}
													}
													if (click(driver, fp.getFirmNameFromFileNameContentGrid(fileName, "Contact"), "firm name in front of file "+fileName+" in content grid", action.SCROLLANDBOOLEAN)) {
														if (isAlertPresent(driver)) {
															msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
															switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
															if (msg.trim().equals(FundsPageErrorMessage.couldNotFindContactOrFirm)) {
																appLog.info("correct error message alert is present after editing email id of contact and clicking on contact name");
															}
															else {
																appLog.error("error message is wrong when updated contact name and clicking on firmname");
																sa.assertTrue(false, "error message is wrong when updated contact name and clicking on firmname");
															}
														}
														else {
															appLog.error("no alert message is present when clicked on changed email id of contact");
															sa.assertTrue(false, "no alert message is present when clicked on changed email id of contact");
														}
													}
													
													//revert back changes
													switchToDefaultContent(driver);
													if (fp.clickOnTab(TabName.ContactTab)) {
														if (cp.clickOnCreatedContact(M7Contact1FirstName, M7Contact1LastName, null)) {
															if (click(driver, cp.getEditButton(60), "edit button on contacts page", action.SCROLLANDBOOLEAN)) {
																if (sendKeys(driver, cp.getEmailId(60), M7Contact1EmailId, "email id textbox on contact page", action.SCROLLANDBOOLEAN)) {
																	if (click(driver, cp.getSaveButton(60), "contacts page save button", action.SCROLLANDBOOLEAN)) {
																		appLog.info("correct email id has been successfully reverted back of "+M7Contact1FirstName+" "+M7Contact1LastName);
																	}
																	else {
																		appLog.error("save button onc contacts page is not clickable");
																		sa.assertTrue(false, "save button onc contacts page is not clickable");
																	}
																}
																else {
																	appLog.error("email id textbox is not visible on contacts page");
																	sa.assertTrue(false, "email id textbox is not visible on contacts page");
																}
															}
															else {
																appLog.error("edit button on contacts page is not clickable");
																sa.assertTrue(false, "edit button on contacts page is not clickable");
															}
														}
														else {
															appLog.error("contact "+M7Contact1LastName+" is not found on contacts page");
															sa.assertTrue(false, "contact "+M7Contact1LastName+" is not found on contacts page");
														}
													}
													
													else {
														appLog.error("cannot click on uploaded by link in front of "+fileName);
														sa.assertTrue(false, "cannot click on uploaded by link in front of "+fileName);
													}
												}
												else {
													appLog.error(stdPath+" is not found in folder structure");
													sa.assertTrue(false, stdPath+" is not found in folder structure");
												}
											}
											else {
												appLog.error("cannot find fund "+M7FundName1);
												sa.assertTrue(false, "cannot find fund "+M7FundName1);
											}
										}
										else {
											appLog.error("cannot click on funds tab");
											sa.assertTrue(false, "cannot click on funds tab");
										}
									}
									else {
										appLog.error("save button on contact page edit page is not clickable");
										sa.assertTrue(false, "save button on contact page edit page is not clickable");
									}
								}
								else {
									appLog.error("email id text box is not visible on contact page edit page");
									sa.assertTrue(false, "email id text box is not visible on contact page edit page");
								}
							}
							else {
								appLog.error("edit button on contact page is not clickable");
								sa.assertTrue(false, "edit button on contact page is not clickable");
							}
						}
						else {
							appLog.error("contact could not be restored from recycle bin");
							sa.assertTrue(false, "contact could not be restored from recycle bin");
						}
					}
					else {
						appLog.error("contacts tab is not clickable");
						sa.assertTrue(false, "contacts tab is not clickable");
					}

				}
				else {
					appLog.error("could not undelete contact "+M7Contact1FirstName+" "+M7Contact1LastName+" from recycle bin");
					sa.assertTrue(false, "could not undelete contact "+M7Contact1FirstName+" "+M7Contact1LastName+" from recycle bin");
				}
			}
			else {
				appLog.error("recycle button link is not clickable on home page");
				sa.assertTrue(false, "recycle button link is not clickable on home page");
			}
		}
		else {
			appLog.error("funds tab is not clickable");
			sa.assertTrue(false, "funds tab is not clickable");
		}
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();
}

	@Test
	public void M7tc106_PostConditionForAll() {
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
	NIMPageBusinessLayer np = new NIMPageBusinessLayer(driver);
	String parentID = null;
	lp.CRMLogin(superAdminUserName, adminPassword);
	String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
	String fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search);
	if (bp.clickOnTab(TabName.NIMTab)) {
		switchToFrame(driver, 30, np.getFrame(PageName.NavatarInvestorManager,30));
		if (np.removeAllUserAccess()) {
			appLog.info("IP access has been removed for all users");
		}
		else {
			appLog.error("could not remove access for all users");
			sa.assertTrue(false, "could not remove access for all users");
		}
		if (np.deactivateManageApprovalsSetting()) {
			appLog.info("manage approval has been removed successfully");
		}
		else {
			appLog.error("could not deactivate manage approval setting");
			sa.assertTrue(false, "could not deactivate manage approval setting");
		}
		if (np.deactivateWatermarkingSetting()) {
			appLog.info("watermarking settings has been deactivated from NIM page");
		}
		else {
			appLog.error("could not remove watermarking setting from NIM page");
			sa.assertTrue(false, "could not remove watermarking setting from NIM page");
		}
		if (np.getMyProfileFistNameAndLastNameAndFirmName("AdminUser")) {
			appLog.info("written firm name, and user first, last name to excel for admin");
		}

		switchToDefaultContent(driver);
	}
	lp.CRMlogout();
	sa.assertAll();

}

}
