/**
 * 
 */
package com.navatar.scripts;

import static com.navatar.generic.CommonVariables.*;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import static com.navatar.generic.CommonLib.*;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
import static com.navatar.generic.AppListeners.appLog;
import com.navatar.generic.ExcelUtils;
import com.navatar.generic.SoftAssert;
import com.navatar.generic.BaseLib;
import com.navatar.generic.CommonLib;

import static com.navatar.generic.CommonLib.*;
import com.navatar.generic.EmailLib;
import com.navatar.generic.CommonLib.ContentGridArrowKeyFunctions;
import com.navatar.generic.CommonLib.EnableDisable;
import com.navatar.generic.CommonLib.FolderType;
import com.navatar.generic.CommonLib.PageName;
import com.navatar.generic.CommonLib.SortOrder;
import com.navatar.generic.CommonLib.TabName;
import com.navatar.generic.CommonLib.UploadFileActions;
import com.navatar.generic.CommonLib.WorkSpaceAction;
import com.navatar.generic.CommonLib.Workspace;
import com.navatar.generic.CommonLib.accessType;
import com.navatar.generic.CommonLib.action;
import com.navatar.generic.CommonLib.excelLabel;
import com.navatar.generic.CommonLib.investorSideWorkSpace;
import com.navatar.pageObjects.AllFirmsPage;
import com.navatar.pageObjects.AllFirmsPageBusinesslayer;
import com.navatar.pageObjects.BasePageBusinessLayer;
import com.navatar.pageObjects.CommitmentPageBusinessLayer;
import com.navatar.pageObjects.ContactPageBusinessLayer;
import com.navatar.pageObjects.ContactPageErrorMessage;
import com.navatar.pageObjects.DisclaimerPageBussinessLayer;
import com.navatar.pageObjects.FundRaisingPageBusinessLayer;
import com.navatar.pageObjects.FundsPageBusinessLayer;
import com.navatar.pageObjects.FundsPageErrorMessage;
import com.navatar.pageObjects.HomePageBusineesLayer;
import com.navatar.pageObjects.HomePageErrorMessage;
import com.navatar.pageObjects.InstitutionPageBusinessLayer;
import com.navatar.pageObjects.InvestorFirmPageBusinesslayer;
import com.navatar.pageObjects.InvestorProfileBusinessLayer;
import com.navatar.pageObjects.LoginPageBusinessLayer;
import com.navatar.pageObjects.NIMPageBusinessLayer;
import com.navatar.pageObjects.PartnershipPageBusinessLayer;
import com.relevantcodes.extentreports.model.Log;
import com.sun.mail.util.BASE64DecoderStream;

/**
 * @author Parul Singh
 *
 */
public class Module12 extends BaseLib {

	@Test
	public void M12tc001_CreatePreconditionDataFromSheet() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		NIMPageBusinessLayer nim = new NIMPageBusinessLayer(driver);
		SoftAssert saa = new SoftAssert();	
//		if(lp.preCondition(superAdminUserName, CRMUser1FirstName+" "+CRMUser1LastName, CRMUser1EmailID, EnableDisable.Disable, EnableDisable.Disable, accessType.InternalUserAccess)){
//			appLog.info("Provided admin user access to crm user "+CRMUser1FirstName+" "+CRMUser1LastName+".");
//		} else {
//			appLog.error("Not able to provide admin user access to crm user "+CRMUser1FirstName+" "+CRMUser1LastName+".");
//			saa.assertTrue(false,"Not able to provide admin user access to crm user "+CRMUser1FirstName+" "+CRMUser1LastName+".");
//		}
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		CommitmentPageBusinessLayer cmp = new CommitmentPageBusinessLayer(driver);
		PartnershipPageBusinessLayer pp = new PartnershipPageBusinessLayer(driver);
		FundRaisingPageBusinessLayer frp = new FundRaisingPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		InstitutionPageBusinessLayer ip = new InstitutionPageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		String instutionName = null;
		for (int i = 0; i < 2; i++) {
			instutionName = ExcelUtils.readData("Institutions", excelLabel.Variable_Name, "M12Institution" + (i + 1),
					excelLabel.Institutions_Name);
			if (bp.clickOnTab(TabName.InstituitonsTab)) {
				if (ip.createInstitution(instutionName)) {

				} else {
					appLog.error("Not able to create institution: " + instutionName);
					saa.assertTrue(false, "Not able to create institution: " + instutionName);
				}
			} else {
				appLog.error("Not able to click on institution tab so cannot create institution: " + instutionName);
				saa.assertTrue(false,
						"Not able to click on institution tab so cannot create institution: " + instutionName);
			}
		}
		for (int i = 0; i < 2; i++) {
			String fundName = ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund" + (i + 1),
					excelLabel.Fund_Name);
			if (bp.clickOnTab(TabName.FundsTab)) {
				String fundType = ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund" + (i + 1),
						excelLabel.Fund_Type);
				String investmentCategory = ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund" + (i + 1),
						excelLabel.Fund_InvestmentCategory);
				if (fp.createFund(fundName, fundType, investmentCategory)) {
					appLog.info("fund is created: " + fundName);
				} else {
					appLog.error("Not able to create fund: " + fundName);
					saa.assertTrue(false, "Not able to create fund: " + fundName);
				}
			} else {
				appLog.error("Not able to click on fund tab so cannot create fund: " + fundName);
				saa.assertTrue(false, "Not able to click on fund tab so cannot create fund: " + fundName);
			}
		}
		for (int i = 0; i < 2; i++) {
			String emailId = cp.generateRandomEmailId();
			instutionName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M12Contact" + (i + 1),
					excelLabel.Institutions_Name);
			String ContactFirstName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M12Contact" + (i + 1),
					excelLabel.Contact_FirstName);
			String ContactLastName = ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M12Contact" + (i + 1),
					excelLabel.Contact_LastName);
			if (bp.clickOnTab(TabName.ContactTab)) {
				if (cp.createContact(ContactFirstName, ContactLastName, instutionName, emailId)) {
					appLog.info("contact is created: " + ContactFirstName + " " + ContactLastName);
					if (emailId != "") {
						ExcelUtils.writeData(emailId, "Contacts", excelLabel.Variable_Name, "M12Contact" + (i + 1),
								excelLabel.Contact_EmailId);
					}
				} else {
					appLog.error("Not able to create contact: " + ContactFirstName + " " + ContactLastName);
					saa.assertTrue(false, "Not able to create contact: " + ContactFirstName + " " + ContactLastName);
				}
			}
		}
		for (int i = 0; i < 3; i++) {
			String fundraisingName = ExcelUtils.readData("Fundraisings", excelLabel.Variable_Name,
					"M12FundRaising" + (i + 1), excelLabel.FundRaising_Name);
			if (bp.clickOnTab(TabName.FundraisingsTab)) {
				String fundName = ExcelUtils.readData("Fundraisings", excelLabel.Variable_Name,
						"M12FundRaising" + (i + 1), excelLabel.Fund_Name);
				instutionName = ExcelUtils.readData("Fundraisings", excelLabel.Variable_Name,
						"M12FundRaising" + (i + 1), excelLabel.Institutions_Name);
				if (frp.createFundRaising(fundraisingName, fundName, instutionName)) {
					appLog.info("fundraising is created : " + fundraisingName);
				} else {
					appLog.error("Not able to create fundraising: " + fundraisingName);
					saa.assertTrue(false, "Not able to create fundraising: " + fundraisingName);
				}
			} else {
				appLog.error("Not able to click on fundraising tab so cannot create fundraising: " + fundraisingName);
				saa.assertTrue(false,
						"Not able to click on fundraising tab so cannot create fundraising: " + fundraisingName);
			}
		}
		for (int i = 0; i < 2; i++) {
			String lpName = ExcelUtils.readData("Limited Partner", excelLabel.Variable_Name,
					"M12LimitedPartner" + (i + 1), excelLabel.LimitedPartner_Name);
			if (bp.clickOnTab(TabName.InstituitonsTab)) {
				instutionName = ExcelUtils.readData("Institutions", excelLabel.Variable_Name,
						"M12Institution" + (i + 1), excelLabel.Institutions_Name);
				if (ip.createLimitedPartner(lpName, instutionName)) {
					appLog.info("limited partner is created: " + lpName);
				} else {
					appLog.error("Not able to create limited partner: " + lpName);
					saa.assertTrue(false, "Not able to create limited partner: " + lpName);
				}
			} else {
				appLog.error("Not able to click on institution tab so cannot create limite partner: " + lpName);
				saa.assertTrue(false,
						"Not able to click on institution tab so cannot create limite partner: " + lpName);
			}
		}

		for (int i = 0; i < 2; i++) {
			String partnershipName = ExcelUtils.readData("Partnerships", excelLabel.Variable_Name,
					"M12Partnership" + (i + 1), excelLabel.PartnerShip_Name);
			if (bp.clickOnTab(TabName.PartnershipsTab)) {
				String fundName = ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund" + (i + 1),
						excelLabel.Fund_Name);
				if (pp.createPartnership(partnershipName, fundName)) {
					appLog.info("partnership is created: " + partnershipName);
				} else {
					appLog.error("Not able to create partnership: " + partnershipName);
					saa.assertTrue(false, "Not able to create partnership: " + partnershipName);
				}
			} else {
				appLog.error("Not able to click on partnership tab so cannot create partnership: " + partnershipName);
				saa.assertTrue(false,
						"Not able to click on partnership tab so cannot create partnership: " + partnershipName);
			}
		}
		for (int i = 0; i < 3; i++) {
			String lpName;
			String partnershipName = null;
			if (i == 0 || i == 2) {
				lpName = ExcelUtils.readData("Limited Partner", excelLabel.Variable_Name, "M12LimitedPartner1",
						excelLabel.LimitedPartner_Name);
			} else {
				lpName = ExcelUtils.readData("Limited Partner", excelLabel.Variable_Name, "M12LimitedPartner2",
						excelLabel.LimitedPartner_Name);
			}
			if (bp.clickOnTab(TabName.CommitmentsTab)) {
				if (i == 0 || i == 1) {
					partnershipName = ExcelUtils.readData("Partnerships", excelLabel.Variable_Name, "M12Partnership1",
							excelLabel.PartnerShip_Name);
				} else {
					partnershipName = ExcelUtils.readData("Partnerships", excelLabel.Variable_Name, "M12Partnership2",
							excelLabel.PartnerShip_Name);
				}

				if (cmp.createCommitment(lpName, partnershipName, "M12Commitment" + (i + 1), null)) {
					appLog.info("commitment is created successfully");
				} else {
					appLog.error("Not able to create commitment for limited partner: " + lpName
							+ " and partnership Name: " + partnershipName);
					saa.assertTrue(false, "Not able to create commitment for limited partner: " + lpName
							+ " and partnership Name: " + partnershipName);
				}
			} else {
				appLog.error("Not able to click on commitment tab so cannot create committment for limite partner: "
						+ lpName + " and partnership Name: " + partnershipName);
				saa.assertTrue(false,
						"Not able to click on commitment tab so cannot create committment for limite partner: " + lpName
								+ " and partnership Name: " + partnershipName);
			}
		}
		if (nim.getMyProfileFistNameAndLastNameAndFirmName("User1")) {
			appLog.info("CRM User first,last name and firm name successfully write in excel");
		} else {
			appLog.error("Not able to write CRM User first,last name and firm profile in excel");
			saa.assertTrue(false, "Not able to write CRM User first,last name and firm profile in excel");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
	}

	@Test
	public void M12tc002_VerifyAlertsGridAtCRMHomePage() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		SoftAssert sa = new SoftAssert();
		HomePageBusineesLayer hp = new HomePageBusineesLayer(driver);
		ThreadSleep(5000);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
//		String errMsg = hp.getErrorMessage(60).getText().trim();
//		if (errMsg.equalsIgnoreCase(HomePageErrorMessage.nodataToDisplayErroMessage)) {
//			appLog.info("Message Matched : " + HomePageErrorMessage.nodataToDisplayErroMessage);
//		} else {
//			appLog.info("Message not Matched ");
//			sa.assertTrue(false, "Message not matched " + "Expected: " + HomePageErrorMessage.nodataToDisplayErroMessage
//					+ "\tActual: " + errMsg);
//		}
		switchToDefaultContent(driver);
		if (hp.getnavatarInvetsorActivityGridOnHomeAlert(60) != null && hp.getnavatarInvetsorActivityGridOnHomeAlert(60)
				.getText().trim().equalsIgnoreCase("Navatar Investor Activities")) {
			appLog.info("Navatar Investor Activities Grid is displaying");
		} else {
			appLog.info("Navatar Investor Activities grid is not displaying");
			sa.assertTrue(false, "Navatar Investor Activities grid is not displaying");
		}
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (hp.getHeadingOfHomeAlert(60).getText().trim().equalsIgnoreCase("Alerts")) {
			appLog.info("Heading is displaying as Alerts");
		} else {
			appLog.info("Wrong Heading is displaying");
			sa.assertTrue(false, "Wrong Heading is displaying");
		}
		if (hp.getShowDropDownLabelONHomeAlert(60).getText().trim().equalsIgnoreCase("Show:")) {
			appLog.info("Show Drop Down Label is Displayed");
		} else {
			appLog.info("Show Drop Down Label is not Displayed");
			sa.assertTrue(false, "Show Drop Down Label is not Displayed");
		}
		if (hp.getRangeDropDownLabelONHomeAlert(60).getText().trim().equalsIgnoreCase("Range:")) {
			appLog.info("Range Drop Down Label is Displayed");
		} else {
			appLog.info("Range Drop Down Label is not Displayed");
			sa.assertTrue(false, "Range Drop Down Label is not Displayed");
		}
		String dropdownvalue = getSelectedOptionOfDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropdown ",
				"value");
		if (dropdownvalue.equalsIgnoreCase("All Alerts")) {
			appLog.info("Default All Alerts Drop Down value is selected in Show.");
		} else {
			appLog.info("Default All Alerts Drop Down value is not selected in Show");
			sa.assertTrue(false, "Default All Alerts Drop Down value is not selected in Show");
		}

		dropdownvalue = getSelectedOptionOfDropDown(driver, hp.getRangeDropdownOnHomeAlert(60), "Range dropdown",
				"text");
		if (dropdownvalue.equalsIgnoreCase("Last 7 Days")) {
			appLog.info("Default Last 7 Days value is selected in Range.");
		} else {
			appLog.info("Default Last 7 Days value is not selected in Range.");
			sa.assertTrue(false, "Default Last 7 Days  value is not selected in Range.");
		}

		List<WebElement> columnValue = hp.getColumnTextonHomeAlert(30);
		String[] ExpectedColumnText = { "Activity Type", "Fund", "Workspace", "Document ", "Firm", "Contact", "Date" };
		String[] actColumnText = new String[columnValue.size()];

		int i = 0;
		for (WebElement webElement : columnValue) {
			actColumnText[i] = webElement.getText().trim();
			i++;
		}

		for (int j = 0; j < actColumnText.length; j++) {
			if (ExpectedColumnText[j].contains(actColumnText[j])) {
				appLog.info("Column Verified : " + ExpectedColumnText[j]);
			} else {
				appLog.info("Column not Verified : " + "\tActual: " + actColumnText[j] + "\tExpected: "
						+ ExpectedColumnText[j]);
				sa.assertTrue(false, "Column not Verified : " + "\tActual: " + actColumnText[j] + "\tExpected: "
						+ ExpectedColumnText[j]);
			}
		}

		String[] recWithValue = hp.getRecordLabelWithValueOnHomeAlert(60).getText().trim().split(":");

		if (recWithValue[0].equalsIgnoreCase("Records") && recWithValue[1].equalsIgnoreCase(" 0")) {
			appLog.info(recWithValue[0] + " Label with value " + recWithValue[1] + " is showing at bottom of section.");
		} else {
			appLog.info(recWithValue[0] + " Label with value " + recWithValue[1]
					+ " is showing at bottom of section. it should be 0");
			sa.assertTrue(false, recWithValue[0] + " Label with value " + recWithValue[1]
					+ " is showing at bottom of section. it should be 0");
		}

		List<WebElement> showOptions = allOptionsInDropDrop(driver, hp.getShowDropdownOnHomeAlert(60),
				"Show Drop Down");

		String[] expectedResult = { "All Alerts", "All Except Profile Updates", "Document Viewed",
				"Document Downloaded", "Document Uploaded", "Document Updated", "Contact Profile Updated",
				"Firm Profile Updated" };

		List<String> showOptions1 = new ArrayList<String>();
		for (WebElement showlist : showOptions) {
			showOptions1.add(showlist.getText().trim());
		}

		for (int k = 0; k < expectedResult.length; k++) {
			if (showOptions1.get(k).equalsIgnoreCase(expectedResult[k])) {
				appLog.info("Show Drop Down Value matched : " + expectedResult[k]);
			} else {
				appLog.info("Show Drop Down Value not matched : " + expectedResult[k]);
				sa.assertTrue(false, "Show Drop Down Value not matched : " + expectedResult[k]);
			}
		}

		List<WebElement> rangeOptions = allOptionsInDropDrop(driver, hp.getRangeDropdownOnHomeAlert(60),
				"Show Drop Down");

		String[] expectedResult1 = { "All Time", "Today", "Last 7 Days", "Last 30 Days", "Last 60 Days", "Last 90 Days",
				"Year to Date" };

		List<String> rangeOptions1 = new ArrayList<String>();
		for (WebElement rangelist : rangeOptions) {

			rangeOptions1.add(rangelist.getText().trim());
		}

		for (int p = 0; p < expectedResult1.length; p++) {
			if (rangeOptions1.get(p).equalsIgnoreCase(expectedResult1[p])) {
				appLog.info("Range Drop Down Value matched : " + expectedResult1[p]);
			} else {
				appLog.info("Range Drop Down Value not matched : " + expectedResult1[p]);
				sa.assertTrue(false, "Range Drop Down Value not matched : " + expectedResult1[p]);
			}
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Test
	public void M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		SoftAssert saa = new SoftAssert();
		String[] stdPath = ExcelUtils
				.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath)
				.split(",");
		String[] cmnPath = ExcelUtils
				.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath)
				.split(",");
		String[] shdPath = ExcelUtils
				.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath)
				.split(",");
		String[] intPath = ExcelUtils
				.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath)
				.split(",");
		String[] step1of3 = { ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Size),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_VintageYear),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Contact),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Phone),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Email),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Description) };
		String StdFromFolder = "UploadFiles\\Module12\\FWR\\Standard";
		String CommonFromFolder = "UploadFiles\\Module12\\FWR\\Common";
		String InternalFromFolder = "UploadFiles\\Module12\\FWR\\Internal";
		String SharedFromFolder = "UploadFiles\\Module12\\FWR\\Shared";
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1)) {
				if (fp.buildWorkspace(step1of3, WorkSpaceAction.IMPORTFOLDERTEMPLATE, folderTemplateName, null,
						M12Institution1 + "<break>" + M12Institution2, Workspace.FundraisingWorkspace, 60)) {
					appLog.info("Fundraising Workspace is created successfully");
				} else {
					appLog.info("Fundraising workspace is not created successfully");
					saa.assertTrue(false, " Fundraising workspace is not craeted successfully");
				}
				if (fp.inviteContact(environment, mode, M12Institution1, M12Contact1EmailId, null, FolderType.Standard,
						"Upload", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution2, M12Contact2EmailId, null, FolderType.Standard,
						"Upload", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution1, M12Contact1EmailId, shdPath[0],
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution2, M12Contact2EmailId, shdPath[0],
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				switchToFrame(driver, 30, fp.getFrame( PageName.FundsPage, 30));
				if (fp.sendInvitationMail(Workspace.FundraisingWorkspace, M12Contact1EmailId, "All Folders",
						M12Contact1LastName)) {
					appLog.info("contact " + M12Contact1LastName + " has been sent email for invitation");
				} else {
					appLog.info(
							"Not able to sent invitation email to" + M12Contact1FirstName + " " + M12Contact1LastName);
					saa.assertTrue(false,
							"Not able to sent invitation email to" + M12Contact1FirstName + " " + M12Contact1LastName);
				}
				if (fp.sendInvitationMail(Workspace.FundraisingWorkspace, M12Contact2EmailId, "All Folders",
						M12Contact2LastName)) {
					appLog.info("contact " + M12Contact2LastName + " has been sent email for invitation");
				} else {
					appLog.info(
							"Not able to sent invitation email to" + M12Contact2FirstName + " " + M12Contact2LastName);
					saa.assertTrue(false,
							"Not able to sent invitation email to" + M12Contact2FirstName + " " + M12Contact2LastName);
				}
				if (fp.uploadFile(stdPath[0], M12Institution1+"<break>"+M12Institution2, StdFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + stdPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + stdPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + stdPath[0] + "'");
				}
				StdFromFolder = "UploadFiles\\Module12\\FWR\\StandardSub";
				if (fp.uploadFile(stdPath[1], M12Institution1+"<break>"+M12Institution2, StdFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + stdPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + stdPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + stdPath[1] + "'");
				}
				if (fp.uploadFile(cmnPath[0], null, CommonFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + cmnPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + cmnPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + cmnPath[0] + "'");
				}
				CommonFromFolder = CommonFromFolder + "Sub";
				if (fp.uploadFile(cmnPath[1], null, CommonFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + cmnPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + cmnPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + cmnPath[1] + "'");
				}
				if (fp.uploadFile(shdPath[0], null, SharedFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + shdPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + shdPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + shdPath[0] + "'");
				}
				SharedFromFolder = SharedFromFolder + "Sub";
				if (fp.uploadFile(shdPath[1], null, SharedFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + shdPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + shdPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + shdPath[1] + "'");
				}
				if (fp.uploadFile(intPath[0], null, InternalFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + intPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + intPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + intPath[0] + "'");
				}
				InternalFromFolder = InternalFromFolder + "Sub";
				if (fp.uploadFile(intPath[1], null, InternalFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + intPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + intPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + intPath[1] + "'");
				}
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					saa = fp.verifyALertHistoryUI(Workspace.FundraisingWorkspace);
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						saa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}
		} else {
			appLog.info("Not able to click on Funds tab so we cannot create workspace");
			saa.assertTrue(false, "Not able to click on Funds tab so we cannot create workspace");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, cp.getContactsTab(60), "Contact tab");
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					saa = fp.verifyALertHistoryUI(Workspace.FundraisingWorkspace);
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						saa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on contact tab");
				saa.assertTrue(false, "Not able to click on contact tab");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			saa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();
	}

	@Test
	public void M12tc004_1_RegisterContact1UpdateMyProfileMyFirmProfile() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		InvestorProfileBusinessLayer ip = new InvestorProfileBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1, M12Contact1FirstName, M12Contact1LastName,
				Workspace.FundraisingWorkspace, "M12Contact1","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		bp = new BasePageBusinessLayer(driver);
		ip = new InvestorProfileBusinessLayer(driver);
		int i = 0;
		if (ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M12Contact1", excelLabel.Registered)
				.equalsIgnoreCase("Not Registered")) {
			try {
				investorRegLink = new EmailLib().getInvestorRegLink("InvitationMail", gmailUserName, gmailPassword,
						CRMUser1EmailID, M12Contact1EmailId);
				appLog.info("Investor Registration Link: " + investorRegLink);
			} catch (InterruptedException e) {
				appLog.info("Invitation mail not found.");
				e.printStackTrace();
			}
			if (investorRegLink != null) {
				driver.get(investorRegLink);
				if (bp.targetRegistration(M12Contact1FirstName, M12Contact1LastName, M12Contact1EmailId,
						M12Institution1, adminPassword)) {
					appLog.info(
							"Investor is registered successfully: " + M12Contact1FirstName + " " + M12Contact1LastName);
					ExcelUtils.writeData("Registered", "Contacts", excelLabel.Variable_Name, "M12Contact1",
							excelLabel.Registered);
				} else {
					driver.get(ExcelUtils.readDataFromPropertyFile("TargetRegistrationURL"));
					appLog.info("Register Target URL through Direct URL..");
					if (bp.targetRegistration(M12Contact1FirstName, M12Contact1LastName, M12Contact1EmailId,
							M12Institution1, adminPassword)) {
						appLog.info("Investor is registered successfully: " + M12Contact1FirstName + " "
								+ M12Contact1LastName);
						ExcelUtils.writeData("Registered", "Contacts", excelLabel.Variable_Name, "M12Contact1",
								excelLabel.Registered);
					} else {
						appLog.error("Investor is not Registered through Invited Link: " + M12Contact1FirstName + " "
								+ M12Contact1LastName);
						sa.assertTrue(false, "Investor is not Registered through Invited Link: " + M12Contact1FirstName
								+ " " + M12Contact1LastName);
					}
				}
			} else {
				driver.get(ExcelUtils.readDataFromPropertyFile("TargetRegistrationURL"));
				appLog.info("Register Target URL through Direct URL..");
				if (bp.targetRegistration(M12Contact1FirstName, M12Contact1FirstName, M12Contact1EmailId,
						M12Institution1, adminPassword)) {
					appLog.info(
							"Investor is registered successfully: " + M12Contact1FirstName + " " + M12Contact1LastName);
					ExcelUtils.writeData("Registered", "Contacts", excelLabel.Variable_Name, "M12Contact1",
							excelLabel.Registered);
				} else {
					appLog.error("Investor is not Registered through Invited Link: " + M12Contact1FirstName + " "
							+ M12Contact1LastName);
					sa.assertTrue(false, "Investor is not Registered through Invited Link: " + M12Contact1FirstName
							+ " " + M12Contact1LastName);
				}
			}
		} else {
			appLog.info("investor " + M12Contact1FirstName + " " + M12Contact1LastName + " is already Registered.");
			sa.assertTrue(false,
					"investor " + M12Contact1FirstName + " " + M12Contact1LastName + " is already Registered.");
		}
		if (click(driver, ip.getProfileLink(60), "Profile link", action.SCROLLANDBOOLEAN)) {
			if (click(driver, ip.getEditIcon(60), "Edit icon	", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, ip.getFirstNameTextBox(60), M12Contact1UpdatedFirstName, "Contact 1 first name",
						action.SCROLLANDBOOLEAN)) {
					appLog.info("Enter value in first name box");
				} else {
					appLog.info("Not able to enter value in first name text box");
					sa.assertTrue(false, "Not able to enter value in first name tetx box");
				}
				if (sendKeys(driver, ip.getLastNameTextBox(60), M12Contact1UpdatedLastName, "Contact 1 Last name",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in last name text box");
					sa.assertTrue(false, "Not able to enter value in last name tetx box");
				}
				if (sendKeys(driver, ip.getPhoneTextbox(60), M12Contact1Phone, "Phone", action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in Phone text box");
					sa.assertTrue(false, "Not able to enter value in Phone text box");
				}
				if (sendKeys(driver, ip.getLinkedinTextbox(60), M12Contact1LinkedIn, "LinkedIN",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in Linkedin text box");
					sa.assertTrue(false, "Not able to enter value in Linkedin tetx box");
				}
				if (sendKeys(driver, ip.getFacebookTextbox(60), M12Contact1Facebook, "Facebook",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in facebook text box");
					sa.assertTrue(false, "Not able to enter value in facebook tetx box");
				}
				if (sendKeys(driver, ip.getTitleTextbox(60), M12Contact1Title, "Title", action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in title text box");
					sa.assertTrue(false, "Not able to enter value in title tetx box");
				}
				if (sendKeys(driver, ip.getMailingStreetTextbox(60), M12Contact1MailingStreet, "Mailing Street",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in Mailing Street text box");
					sa.assertTrue(false, "Not able to enter value in Mailing Street tetx box");
				}
				if (sendKeys(driver, ip.getMailingCityTextbox(60), M12Contact1MailingCity, "Mailing City",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in Mailing City text box");
					sa.assertTrue(false, "Not able to enter value in Mailing City tetx box");
				}

				if (sendKeys(driver, ip.getMailingStateTextbox(60), M12Contact1Mailingstate, "Mailing State",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in Mailing State text box");
					sa.assertTrue(false, "Not able to enter value in Mailing State text box");
				}
				if (sendKeys(driver, ip.getMailingZipTextbox(60), M12Contact1MailingZip, "Mailing Zip",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in Zip text box");
					sa.assertTrue(false, "Not able to enter value in Zip text box");
				}
				if (sendKeys(driver, ip.getMailingCountryTextbox(60), M12Contact1MailingCountry, "Mailing country",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in mailing country text box");
					sa.assertTrue(false, "Not able to enter value in Mailing country tetx box");
				}
				if (click(driver, ip.getNoEmailRadiobuttonEditMode(60), "No email radio button",
						action.SCROLLANDBOOLEAN)) {
					appLog.info("abel to click on no email radio buton");
				} else {
					appLog.info("Not abel to click on no email radio buton");
					sa.assertTrue(false, "Not able to click on no email radio button");
				}
				if (click(driver, ip.getSaveButtonMyProfilePage(60), "Save button", action.SCROLLANDBOOLEAN)) {
					appLog.info("Clicked on save button");
					i++;
				} else {
					appLog.error("Not able to click on svae button");
					sa.assertTrue(false, "Not able to click on save button");
				}
			} else {
				appLog.info("Not able to click on edit icon");
				sa.assertTrue(false, "Not able to click on edit icon");
			}
		} else {
			appLog.info("Not able to click on profile link");
			sa.assertTrue(false, "Not able to lcick on profile link");
		}
		if (click(driver, ip.getMyFirmProfileTab(60), "My firm profile", action.SCROLLANDBOOLEAN)) {
			if (click(driver, ip.getEditIcon(60), "Edit icon", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, ip.getFirmNameTextbox(60), M12Contact1UpdatedFirmName, "Firm Name text box",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter firm name");
					sa.assertTrue(false, "Not able to enter firm name");
				}
				if (selectVisibleTextFromDropDown(driver, ip.getInstitutionTypeDropdown(60), "Institutiton type",
						M12Contact1InstitutionTypeDropdown)) {
				} else {
					appLog.info("Not able to Select institution type value");
					sa.assertTrue(false, "Not able to Select institution type value");
				}
				if (selectVisibleTextFromDropDown(driver, ip.getIndustryDropdown(60), "Industry",
						M12Contact1IndustryDropdown)) {
				} else {
					appLog.info("Not able to Select Industry dropdown value");
					sa.assertTrue(false, "Not able to Select Industry dropdown value");
				}
				if (sendKeys(driver, ip.getDescriptionTextArea(60), M12Contact1FirmDescription, "Description text box",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter description");
					sa.assertTrue(false, "Not able to enter description");
				}
				if (sendKeys(driver, ip.getBillingStreetTextArea(60), M12Contact1BillingStreet, "Billing text box",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter Billing value");
					sa.assertTrue(false, "Not able to enter Billing value");
				}
				if (sendKeys(driver, ip.getBillingCityTextbox(60), M12Contact1BillingCity, "Billing city text box",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter Billing city");
					sa.assertTrue(false, "Not able to enter Billing city");
				}
				if (sendKeys(driver, ip.getBillingStateTextbox(60), M12Contact1BillingState, "Billing state text box",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter Billing state");
					sa.assertTrue(false, "Not able to enter Billing state");
				}

				if (sendKeys(driver, ip.getBillingZipCodeTextbox(60), M12Contact1BillingZip, "Billing Zip text box",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter Billing Zip");
					sa.assertTrue(false, "Not able to enter Billing Zip");
				}
				if (sendKeys(driver, ip.getBillingCountryTextbox(60), M12Contact1BillingCountry,
						"Billing country text box", action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter Billing country");
					sa.assertTrue(false, "Not able to enter Billing country");
				}
				if (click(driver, ip.getWeWishToBeContactedNoEditModeRadiobtn(60), "No radio button",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to click on no radio button");
					sa.assertTrue(false, "Not able to click on no radio button");
				}
				if (sendKeys(driver, ip.getMinInvestmentTextbox(60), M12Contact1MinInvestment, "Min investment size",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in min investment text box");
					sa.assertTrue(false, "Not able to enter value in min investment text box");
				}
				if (sendKeys(driver, ip.getMaxInvestmentTextbox(60), M12Contact1MaxInvestment, "Max investment size",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in Max investment text box");
					sa.assertTrue(false, "Not able to enter value in Max investment text box");
				}
				if (sendKeys(driver, ip.getAUMtextbox(60), M12Contact1AUM, "AUM Text box", action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in AUM text box");
					sa.assertTrue(false, "Not able to enter value in AUM text box");
				}
				if (selectVisibleTextFromDropDown(driver, ip.getFundTypeSelectbox(50), "Fund type selct box",
						M12Contact1FundTypeselectbox)) {
				} else {
					appLog.info("Not able to slect text from fund type dropdown");
					sa.assertTrue(false, "Not able to slect text from fund type dropdown");
				}
				if (click(driver, ip.getAddButtonFundsSelectbox(60), "Ad dbutton", action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to click on add button");
					sa.assertTrue(false, "Not able to click on add button");
				}
				if (selectVisibleTextFromDropDown(driver, ip.getIndustriesSelectbox(50), "Industries  selct box",
						M12Contact1Industriesselectbox)) {
				} else {
					appLog.info("Not able to slect text from Industries dropdown");
					sa.assertTrue(false, "Not able to slect text from Industries dropdown");
				}
				if (click(driver, ip.getAddButtonIndustriesSelectbox(60), "Add dbutton", action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to click on add button");
					sa.assertTrue(false, "Not able to click on add button");
				}
				if (selectVisibleTextFromDropDown(driver, ip.getGeoFocusSelectbox(50), "Geo focus selct box",
						M12Contact1Geofocus)) {
				} else {
					appLog.info("Not able to slect text from Geo focus dropdown");
					sa.assertTrue(false, "Not able to slect text from Geo focus dropdown");
				}
				if (click(driver, ip.getAddButtonGeographicSelectbox(60), "Ad dbutton", action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to click on add button");
					sa.assertTrue(false, "Not able to click on add button");
				}
				if (click(driver, ip.getSaveButtonFirmProfile(60), "Firm profile", action.SCROLLANDBOOLEAN)) {
					ThreadSleep(2000);
					i++;
				} else {
					appLog.info("Not able to click on firm profile save button");
					sa.assertTrue(false, "Not able to click on firm profile save button");
				}
				int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
				int ContactAlertCount = Integer.parseInt(M12ContactPageALertCount) + i;
				int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
				ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
				ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
						"M12Fund1", excelLabel.FundsPageALertCount);
				ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName,
						"M12Contact1", excelLabel.ContactPageALertCount);
			} else {
				appLog.info("Not able to click on edit icon");
				sa.assertTrue(false, "Not able to click on edit icon");
			}
		} else {
			appLog.info("Not able to click on my firm profile tab");
			sa.assertTrue(false, "Not able to click on my firm prfile tab");
		}
		lp.investorLogout();
		sa.assertAll();
	}

	@Test
	public void M12tc004_2_VerifyAlertAtCRMHomePage() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp = new HomePageBusineesLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (hp.verifyAlertOnHomePage("Firm Profile Updated", null, null, null, M12Contact1UpdatedFirmName,
				M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
			appLog.info("Grid data is veririfed for" + "Firm Profile Updated alert for contact"
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		} else {
			appLog.info("Grid data is not veririfed for" + "Firm Profile Updated alert for contact"
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not veririfed for" + "Firm Profile Updated alert for contact"
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (hp.verifyAlertOnHomePage("Contact Profile Updated", null, null, null, M12Contact1UpdatedFirmName,
				M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
			appLog.info("Grid data is veririfed for" + "Contact Profile Updated alert for contact"
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		} else {
			appLog.info("Grid data is not veririfed for" + "Contact Profile Updated alert for contact"
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not veririfed for" + "Contact Profile Updated alert for contact"
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");

					if (fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName,
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
						appLog.info("Grid data is verified for " + "Firm Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.info("Grid data is not verified for " + "Firm Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for " + "Firm Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName,
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
						appLog.info("Grid data is verified for " + "Contact Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.info("Grid data is not verified for " + "Contact Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for " + "Contact Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if (fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName,
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
						appLog.info("Grid data is verified for " + "Firm Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.info("Grid data is not verified for " + "Firm Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for " + "Firm Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName,
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
						appLog.info("Grid data is verified for " + "Contact Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.info("Grid data is not verified for " + "Contact Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for " + "Contact Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact1",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Noit able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Test
	public void M12tc005_VerifyFirmProfileUpdatedPopUp() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		String firmProfileData = "" + M12Contact1AUM + "<break>" + M12Contact1BillingCity + "<break>"
				+ M12Contact1BillingCountry + "<break>" + M12Contact1BillingState + "<break>" + M12Contact1BillingStreet
				+ "<break>" + M12Contact1BillingZip + "<break>" + M12Contact1UpdatedFirmName + "<break>"
				+ M12Contact1IndustryDropdown + "<break>" + M12Contact1MaxInvestment + "<break>"
				+ M12Contact1MinInvestment;
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated",
				M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
			appLog.info("Clicked on activity type");
			if (bp.getFirmProfileUpdatedHeader(null, PageName.HomePage, 60).getText().trim()
					.equalsIgnoreCase("Firm Profile Updated")) {
				appLog.info("Firm profile updtaed popup is displaying");
			} else {
				appLog.info("Firm profile updated popup is not displaying");
				sa.assertTrue(false, "Firm profile updated popup is not displaying");
			}
			if (bp.getFirmTextLabel(null, PageName.HomePage, 60).getText().trim()
					.equalsIgnoreCase(M12Contact1UpdatedFirmName)) {
				appLog.info("Firm Name is verified");
			} else {
				appLog.info("Firm Name is not verified");
				sa.assertTrue(false, "Firm Name is not verified");
			}
			if (bp.getFieldLabelInFirmProfilePopup(60) != null) {
				appLog.info("Field label is displaying");
			} else {
				appLog.info("Field label is not displaying");
				sa.assertTrue(false, "Field label is not displaying");
			}
			if (bp.getValueLabelInFirmProfilePopup(60) != null) {
				appLog.info("Value label is displaying");
			} else {
				appLog.info("Value label is not displaying");
				sa.assertTrue(false, "Value label is not displaying");
			}
			HashSet<String> newValue = scrollActiveWidgetforSetofFiles(driver,
					bp.getFirmProfileUpdateScrollBox(null, PageName.HomePage, 60),
					By.xpath("//span[contains(@id,'grid_AccountProfileUpdatedACTALT-cell-1-')]"));
			List<String> fieldList = new ArrayList<String>(newValue);
			if (!compareMultipleListWithoutAssertion(firmProfileData, fieldList)) {
				appLog.info("New value data Not Matched for Firm Profile Updated Alerts on Home Page");
				sa.assertTrue(false, "New value data Not Matched for Firm Profile Updated Alerts on Home Page");
			} else {
				appLog.info("New value data is Matched for Firm Profile Updated Alerts on Home Page");
			}
			if (isDisplayed(driver, bp.getGoToFirmButton(PageName.HomePage,null,60), "Visibility", 60, "Go to Firm Button") != null) {
				appLog.info("Go to firm button is displaying");
			} else {
				appLog.error("Go to firm button is not displaying");
				sa.assertTrue(false, "Go to firm button is not displaying");
			}
			if (isDisplayed(driver, bp.getFirmProfileUpdateCloseButton(null, PageName.HomePage, 60), "Visibility", 60,
					"Close Button") != null) {
				appLog.info("Close button is displaying");
			} else {
				appLog.error("Close button is not displaying");
				sa.assertTrue(false, "Close button is not displaying");
			}

			if (isDisplayed(driver, bp.getFirmProfileUpdateCloseIcon(null, PageName.HomePage, 60), "Visibility", 60,
					"Close Icon") != null) {
				appLog.info("Close Icon is displaying");
			} else {
				appLog.error("Close Icon is not displaying");
				sa.assertTrue(false, "Close Icon is not displaying");
			}
			if (click(driver, bp.getFirmProfileUpdateCloseIcon(null, PageName.HomePage, 60), "Close icon",
					action.SCROLLANDBOOLEAN)) {
				appLog.info("Clicked on close icon");
				if (bp.getFirmProfileUpdateCloseIcon(null, PageName.HomePage, 10) == null) {
					appLog.info("Firm profile updated popup get closed");
				} else {
					appLog.info("Firm Profile updtaed popup does not get closed");
					sa.assertTrue(false, "Firm Profile updtaed popup does not get closed");
				}
			} else {
				appLog.info("Not able to click on close icon");
				sa.assertTrue(false, "Not able to click on close icon");
			}
		} else {
			appLog.info("Not able to click on activity type");
			sa.assertTrue(false, "Not able to click on activity type");
		}
		if (bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated",
				M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
			appLog.info("Clicked on activity type");
			if (click(driver, bp.getFirmProfileUpdateCloseButton(null, PageName.HomePage, 60), "Close Button",
					action.SCROLLANDBOOLEAN)) {
				appLog.info("Clicked on close icon");
				if (bp.getFirmProfileUpdateCloseButton(null, PageName.HomePage, 10) == null) {
					appLog.info("Firm profile updated popup get closed");
				} else {
					appLog.info("Firm Profile updtaed popup does not get closed");
					sa.assertTrue(false, "Firm Profile updtaed popup does not get closed");
				}
			} else {
				appLog.info("Not able to click on close icon");
				sa.assertTrue(false, "Not able to click on close icon");
			}
		} else {
			appLog.info("Not able to click on activity type");
			sa.assertTrue(false, "Not able to click on activity type");
		}
		if (bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated",
				M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
			appLog.info("Clicked on activity type");
			if (click(driver, bp.getGoToFirmButton(PageName.HomePage,null,60), "Go to firm button", action.SCROLLANDBOOLEAN)) {
				appLog.info("Clicked on Go to firm button");
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					WebElement ele = FindElement(driver, "//div[@class='content']", "Page Header", action.BOOLEAN, 40);
					if (ele != null) {
						if (ele.getText().trim().equalsIgnoreCase(M12Institution1)) {
							appLog.info(M12Institution1 + " Page is opened");
						} else {
							appLog.info(M12Institution1 + " Page is not opened");
							sa.assertTrue(false, M12Institution1 + " Page is not opened");
						}
					} else {
						appLog.info("Not able to find page header");
						sa.assertTrue(false, "Not able to find page header");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.info("No new window is open");
					sa.assertTrue(false, "No new window is open");
				}
			} else {
				appLog.info("Not able to click on got ot firm button");
				sa.assertTrue(false, "Not able to lcick on go to firm button");
			}
		} else {
			appLog.info("Not able to click on activity type");
			sa.assertTrue(false, "Not able to click on activity type");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if (bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated",
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
						appLog.info("Clicked on activity type");
						if (bp.getFirmProfileUpdatedHeader(Workspace.FundraisingWorkspace, PageName.FundsPage, 60)
								.getText().trim().equalsIgnoreCase("Firm Profile Updated")) {
							appLog.info("Firm profile updtaed popup is displaying");
						} else {
							appLog.info("Firm profile updated popup is not displaying");
							sa.assertTrue(false, "Firm profile updated popup is not displaying");
						}
						if (bp.getFirmTextLabel(Workspace.FundraisingWorkspace, PageName.FundsPage, 60).getText().trim()
								.equalsIgnoreCase(M12Contact1UpdatedFirmName)) {
							appLog.info("Firm Name is verified");
						} else {
							appLog.info("Firm Name is not verified");
							sa.assertTrue(false, "Firm Name is not verified");
						}
						if (bp.getFieldLabelInFirmProfilePopup(60) != null) {
							appLog.info("Field label is displaying");
						} else {
							appLog.info("Field label is not displaying");
							sa.assertTrue(false, "Field label is not displaying");
						}
						if (bp.getValueLabelInFirmProfilePopup(60) != null) {
							appLog.info("Value label is displaying");
						} else {
							appLog.info("Value label is not displaying");
							sa.assertTrue(false, "Value label is not displaying");
						}
						HashSet<String> newValue = scrollActiveWidgetforSetofFiles(driver,
								bp.getFirmProfileUpdateScrollBox(Workspace.FundraisingWorkspace, PageName.FundsPage,
										60),
								By.xpath("//span[contains(@id,'grid_AccountProfileUpdatedACTALTFR-cell-1-')]"));
						List<String> fieldList = new ArrayList<String>(newValue);
						if (!compareMultipleListWithoutAssertion(firmProfileData, fieldList)) {
							appLog.info("New value data Not Matched for Firm Profile Updated Alerts on Funds Page");
							sa.assertTrue(false,
									"New value data Not Matched for Firm Profile Updated Alerts on Funds Page");
						} else {
							appLog.info("New value data is Matched for Firm Profile Updated Alerts on Funds Page");
						}
						if (isDisplayed(driver, bp.getGoToFirmButton(PageName.FundsPage,Workspace.FundraisingWorkspace,60), "Visibility", 60,
								"Go to Firm Button") != null) {
							appLog.info("Go to firm button is displaying");
						} else {
							appLog.error("Go to firm button is not displaying");
							sa.assertTrue(false, "Go to firm button is not displaying");
						}
						if (isDisplayed(driver, bp.getFirmProfileUpdateCloseButton(Workspace.FundraisingWorkspace,
								PageName.FundsPage, 60), "Visibility", 60, "Close Button") != null) {
							appLog.info("Close button is displaying");
						} else {
							appLog.error("Close button is not displaying");
							sa.assertTrue(false, "Close button is not displaying");
						}
						if (isDisplayed(driver, bp.getFirmProfileUpdateCloseIcon(Workspace.FundraisingWorkspace,
								PageName.FundsPage, 60), "Visibility", 60, "Close Icon") != null) {
							appLog.info("Close Icon is displaying");
						} else {
							appLog.error("Close Icon is not displaying");
							sa.assertTrue(false, "Close Icon is not displaying");
						}
						if (click(driver, bp.getFirmProfileUpdateCloseIcon(Workspace.FundraisingWorkspace,
								PageName.FundsPage, 60), "Close icon", action.SCROLLANDBOOLEAN)) {
							appLog.info("Clicked on close icon");
							if (bp.getFirmProfileUpdateCloseIcon(Workspace.FundraisingWorkspace, PageName.FundsPage,
									10) == null) {
								appLog.info("Firm profile updated popup get closed");
							} else {
								appLog.info("Firm Profile updtaed popup does not get closed");
								sa.assertTrue(false, "Firm Profile updtaed popup does not get closed");
							}
						} else {
							appLog.info("Not able to click on close icon");
							sa.assertTrue(false, "Not able to click on close icon");
						}
					} else {
						appLog.info("Not able to click on activity type");
						sa.assertTrue(false, "Not able to click on activity type");
					}
					if (bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated",
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
						appLog.info("Clicked on activity type");
						if (click(driver, bp.getFirmProfileUpdateCloseButton(Workspace.FundraisingWorkspace,
								PageName.FundsPage, 60), "Close Button", action.SCROLLANDBOOLEAN)) {
							appLog.info("Clicked on close icon");
							if (bp.getFirmProfileUpdateCloseButton(Workspace.FundraisingWorkspace, PageName.FundsPage,
									10) == null) {
								appLog.info("Firm profile updated popup get closed");
							} else {
								appLog.info("Firm Profile updtaed popup does not get closed");
								sa.assertTrue(false, "Firm Profile updtaed popup does not get closed");
							}
						} else {
							appLog.info("Not able to click on close icon");
							sa.assertTrue(false, "Not able to click on close icon");
						}
					} else {
						appLog.info("Not able to click on activity type");
						sa.assertTrue(false, "Not able to click on activity type");
					}
					if (bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated",
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
						appLog.info("Clicked on activity type");
						if (click(driver, bp.getGoToFirmButton(PageName.FundsPage,Workspace.FundraisingWorkspace,60), "Go to firm button", action.SCROLLANDBOOLEAN)) {
							appLog.info("Clicked on Go to firm button");
							String parentID = switchOnWindow(driver);
							if (parentID != null) {
								WebElement ele = FindElement(driver, "//div[@class='content']", "Page Header",
										action.BOOLEAN, 40);
								if (ele != null) {
									if (ele.getText().trim().equalsIgnoreCase(M12Institution1)) {
										appLog.info(M12Institution1 + " Page is opened");
									} else {
										appLog.info(M12Institution1 + " Page is not opened");
										sa.assertTrue(false, M12Institution1 + " Page is not opened");
									}
								} else {
									appLog.info("Not able to find page header");
									sa.assertTrue(false, "Not able to find page header");
								}
								driver.close();
								driver.switchTo().window(parentID);
							} else {
								appLog.info("No new window is open");
								sa.assertTrue(false, "No new window is open");
							}
						} else {
							appLog.info("Not able to click on got ot firm button");
							sa.assertTrue(false, "Not able to lcick on go to firm button");
						}
					} else {
						appLog.info("Not able to click on activity type");
						sa.assertTrue(false, "Not able to click on activity type");
					}
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if (click(driver,
							bp.getFirmProfileUpdateCloseButton(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
							"Close Button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on close icon");
						if (bp.getFirmProfileUpdateCloseButton(Workspace.FundraisingWorkspace, PageName.FundsPage,
								10) == null) {
							appLog.info("Firm profile updated popup get closed");
						} else {
							appLog.info("Firm Profile updtaed popup does not get closed");
							sa.assertTrue(false, "Firm Profile updtaed popup does not get closed");
						}
					} else {
						appLog.info("Not able to click on close icon");
						sa.assertTrue(false, "Not able to click on close icon");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"AlertHistory cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on cross icon");
					} else {
						appLog.info("Not able to click on cross icon");
						sa.assertTrue(false, "Not able to click on cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on cretaed fund");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (new ContactPageBusinessLayer(driver).clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if (bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated",
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
						appLog.info("Clicked on activity type");
						if (bp.getFirmProfileUpdatedHeader(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60)
								.getText().trim().equalsIgnoreCase("Firm Profile Updated")) {
							appLog.info("Firm profile updtaed popup is displaying");
						} else {
							appLog.info("Firm profile updated popup is not displaying");
							sa.assertTrue(false, "Firm profile updated popup is not displaying");
						}
						if (bp.getFirmTextLabel(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60).getText()
								.trim().equalsIgnoreCase(M12Contact1UpdatedFirmName)) {
							appLog.info("Firm Name is verified");
						} else {
							appLog.info("Firm Name is not verified");
							sa.assertTrue(false, "Firm Name is not verified");
						}
						if (bp.getFieldLabelInFirmProfilePopup(60) != null) {
							appLog.info("Field label is displaying");
						} else {
							appLog.info("Field label is not displaying");
							sa.assertTrue(false, "Field label is not displaying");
						}
						if (bp.getValueLabelInFirmProfilePopup(60) != null) {
							appLog.info("Value label is displaying");
						} else {
							appLog.info("Value label is not displaying");
							sa.assertTrue(false, "Value label is not displaying");
						}

						HashSet<String> newValue = scrollActiveWidgetforSetofFiles(driver,
								bp.getFirmProfileUpdateScrollBox(Workspace.FundraisingWorkspace, PageName.ContactsPage,
										60),
								By.xpath("//span[contains(@id,'grid_AccountProfileUpdatedACTALTFR-cell-1-')]"));
						List<String> fieldList = new ArrayList<String>(newValue);
						if (!compareMultipleListWithoutAssertion(firmProfileData, fieldList)) {
							appLog.info(
									"New value data Not Matched for Contact Profile Updated Alerts on Contact Page");
							sa.assertTrue(false,
									"New value data Not Matched for Contact Profile Updated Alerts on Contact Page");
						} else {
							appLog.info("New value data is Matched for Contact Profile Updated Alerts on Contact Page");
						}
						if (isDisplayed(driver, bp.getGoToFirmButton(PageName.ContactsPage,Workspace.FundraisingWorkspace,60), "Visibility", 60,
								"Go to Firm Button") != null) {
							appLog.info("Go to firm button is displaying");
						} else {
							appLog.error("Go to firm button is not displaying");
							sa.assertTrue(false, "Go to firm button is not displaying");
						}
						if (isDisplayed(driver, bp.getFirmProfileUpdateCloseButton(Workspace.FundraisingWorkspace,
								PageName.ContactsPage, 60), "Visibility", 60, "Close Button") != null) {
							appLog.info("Close button is displaying");
						} else {
							appLog.error("Close button is not displaying");
							sa.assertTrue(false, "Close button is not displaying");
						}

						if (isDisplayed(driver, bp.getFirmProfileUpdateCloseIcon(Workspace.FundraisingWorkspace,
								PageName.ContactsPage, 60), "Visibility", 60, "Close Icon") != null) {
							appLog.info("Close Icon is displaying");
						} else {
							appLog.error("Close Icon is not displaying");
							sa.assertTrue(false, "Close Icon is not displaying");
						}
						if (click(driver, bp.getFirmProfileUpdateCloseIcon(Workspace.FundraisingWorkspace,
								PageName.ContactsPage, 60), "Close icon", action.SCROLLANDBOOLEAN)) {
							appLog.info("Clicked on close icon");
							if (bp.getFirmProfileUpdateCloseIcon(Workspace.FundraisingWorkspace, PageName.ContactsPage,
									10) == null) {
								appLog.info("Firm profile updated popup get closed");
							} else {
								appLog.info("Firm Profile updtaed popup does not get closed");
								sa.assertTrue(false, "Firm Profile updtaed popup does not get closed");
							}
						} else {
							appLog.info("Not able to click on close icon");
							sa.assertTrue(false, "Not able to click on close icon");
						}
					} else {
						appLog.info("Not able to click on activity type");
						sa.assertTrue(false, "Not able to click on activity type");
					}
					if (bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated",
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
						appLog.info("Clicked on activity type");
						if (click(driver, bp.getFirmProfileUpdateCloseButton(Workspace.FundraisingWorkspace,
								PageName.ContactsPage, 60), "Close Button", action.SCROLLANDBOOLEAN)) {
							appLog.info("Clicked on close Button");
							if (bp.getFirmProfileUpdateCloseButton(Workspace.FundraisingWorkspace,
									PageName.ContactsPage, 10) == null) {
								appLog.info("Firm profile updated popup get closed");
							} else {
								appLog.info("Firm Profile updtaed popup does not get closed");
								sa.assertTrue(false, "Firm Profile updtaed popup does not get closed");
							}
						} else {
							appLog.info("Not able to click on close Button");
							sa.assertTrue(false, "Not able to click on close Button");
						}
					} else {
						appLog.info("Not able to click on activity type");
						sa.assertTrue(false, "Not able to click on activity type");
					}
					if (bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated",
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
						appLog.info("Clicked on activity type");
						if (click(driver, bp.getGoToFirmButton(PageName.ContactsPage,Workspace.FundraisingWorkspace,60), "Go to firm button", action.SCROLLANDBOOLEAN)) {
							appLog.info("Clicked on Go to firm button");
							String parentID = switchOnWindow(driver);
							if (parentID != null) {
								WebElement ele = FindElement(driver, "//div[@class='content']", "Page Header",
										action.BOOLEAN, 40);
								if (ele != null) {
									if (ele.getText().trim().equalsIgnoreCase(M12Institution1)) {
										appLog.info(M12Institution1 + " Page is opened");
									} else {
										appLog.info(M12Institution1 + " Page is not opened");
										sa.assertTrue(false, M12Institution1 + " Page is not opened");
									}
								} else {
									appLog.info("Not able to find page header");
									sa.assertTrue(false, "Not able to find page header");
								}
								driver.close();
								driver.switchTo().window(parentID);
							} else {
								appLog.info("No new window is open");
								sa.assertTrue(false, "No new window is open");
							}
						} else {
							appLog.info("Not able to click on got ot firm button");
							sa.assertTrue(false, "Not able to lcick on go to firm button");
						}
					} else {
						appLog.info("Not able to click on activity type");
						sa.assertTrue(false, "Not able to click on activity type");
					}
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if (click(driver, bp.getFirmProfileUpdateCloseButton(Workspace.FundraisingWorkspace,
							PageName.ContactsPage, 60), "Close Button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on close icon");
						if (bp.getFirmProfileUpdateCloseButton(Workspace.FundraisingWorkspace, PageName.ContactsPage,
								10) == null) {
							appLog.info("Firm profile updated popup get closed");
						} else {
							appLog.info("Firm Profile updtaed popup does not get closed");
							sa.assertTrue(false, "Firm Profile updtaed popup does not get closed");
						}
					} else {
						appLog.info("Not able to click on close icon");
						sa.assertTrue(false, "Not able to click on close icon");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"AlertHistory cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on cross icon");
					} else {
						appLog.info("Not able to click on cross icon");
						sa.assertTrue(false, "Not able to click on cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Test
	public void M12tc006_VerifyContactProfileUpdatedPopUp() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		String contactProfileData = "" + M12Contact1Facebook + "<break>" + M12Contact1UpdatedFirstName + "<break>"
				+ M12Contact1UpdatedLastName + "<break>" + M12Contact1LinkedIn + "<break>" + M12Contact1MailingCity
				+ "<break>" + M12Contact1MailingCountry + "<break>" + M12Contact1Mailingstate + "<break>"
				+ M12Contact1MailingStreet + "<break>" + M12Contact1MailingZip + "<break>" + M12Contact1Phone
				+ "<break>" + M12Contact1Title + "";
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated",
				M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
			appLog.info("Clicked on activity type");
			if (bp.getContactProfileUpdatedHeader(null, PageName.HomePage, 60).getText().trim()
					.equalsIgnoreCase("Contact Profile Updated")) {
				appLog.info("Contact profile updtaed popup is displaying");
			} else {
				appLog.info("Contact profile updated popup is not displaying");
				sa.assertTrue(false, "Contact profile updated popup is not displaying");
			}
			if (bp.getFirmTextLabelInContactProfileUpdated(null, PageName.HomePage, 60).getText().trim()
					.equalsIgnoreCase(M12Contact1UpdatedFirmName)) {
				appLog.info("Firm Name is verified");
			} else {
				appLog.info("Firm Name is not verified");
				sa.assertTrue(false, "Firm Name is not verified");
			}
			if (bp.getContactTextLabelInContactProfileUpdated(null, PageName.HomePage, 60).getText().trim()
					.equalsIgnoreCase(M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
				appLog.info("Contact Name is verified");
			} else {
				appLog.info("Contact Name is not verified");
				sa.assertTrue(false, "Contact Name is not verified");
			}
			if (bp.getFieldLabelInFirmProfilePopup(60) != null) {
				appLog.info("Field label is displaying");
			} else {
				appLog.info("Field label is not displaying");
				sa.assertTrue(false, "Field label is not displaying");
			}
			if (bp.getValueLabelInFirmProfilePopup(60) != null) {
				appLog.info("Value label is displaying");
			} else {
				appLog.info("Value label is not displaying");
				sa.assertTrue(false, "Value label is not displaying");
			}
			HashSet<String> newValue = scrollActiveWidgetforSetofFiles(driver,
					bp.getContactProfileUpdateScrollBox(null, PageName.HomePage, 60),
					By.xpath("//span[contains(@id,'grid_ContactProfileUpdatedACTALT-cell-1-')]"));
			List<String> fieldList = new ArrayList<String>(newValue);
			if (!compareMultipleListWithoutAssertion(contactProfileData, fieldList)) {
				appLog.info("New value data Not Matched for Contact Profile Updated Alerts on Home Page");
				sa.assertTrue(false, "New value data Not Matched for Contact Profile Updated Alerts on Home Page");
			} else {
				appLog.info("New value data is Matched for Contact Profile Updated Alerts on Home Page");
			}
			if (isDisplayed(driver, bp.getGoToContactButton(PageName.HomePage,null,60), "Visibility", 60, "Go to Contact Button") != null) {
				appLog.info("Go to Contact button is displaying");
			} else {
				appLog.error("Go to Contact button is not displaying");
				sa.assertTrue(false, "Go to Contact button is not displaying");
			}
			if (isDisplayed(driver, bp.getContactProfileUpdateCloseButton(null, PageName.HomePage, 60), "Visibility",
					60, "Close Button") != null) {
				appLog.info("Close button is displaying");
			} else {
				appLog.error("Close button is not displaying");
				sa.assertTrue(false, "Close button is not displaying");
			}

			if (isDisplayed(driver, bp.getContactProfileUpdateCloseIcon(null, PageName.HomePage, 60), "Visibility", 60,
					"Close Icon") != null) {
				appLog.info("Close Icon is displaying");
			} else {
				appLog.error("Close Icon is not displaying");
				sa.assertTrue(false, "Close Icon is not displaying");
			}
			if (click(driver, bp.getContactProfileUpdateCloseIcon(null, PageName.HomePage, 60), "Close icon",
					action.SCROLLANDBOOLEAN)) {
				appLog.info("Clicked on close icon");
				if (bp.getContactProfileUpdateCloseIcon(null, PageName.HomePage, 10) == null) {
					appLog.info("Contact profile updated popup get closed");
				} else {
					appLog.info("Contact Profile updtaed popup does not get closed");
					sa.assertTrue(false, "Contact Profile updtaed popup does not get closed");
				}
			} else {
				appLog.info("Not able to click on close icon");
				sa.assertTrue(false, "Not able to click on close icon");
			}
		} else {
			appLog.info("Not able to click on activity type");
			sa.assertTrue(false, "Not able to click on activity type");
		}
		if (bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated",
				M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
			appLog.info("Clicked on activity type");
			if (click(driver, bp.getContactProfileUpdateCloseButton(null, PageName.HomePage, 60), "Close Button",
					action.SCROLLANDBOOLEAN)) {
				appLog.info("Clicked on close icon");
				if (bp.getContactProfileUpdateCloseButton(null, PageName.HomePage, 10) == null) {
					appLog.info("Contact profile updated popup get closed");
				} else {
					appLog.info("Contact Profile updtaed popup does not get closed");
					sa.assertTrue(false, "Contact Profile updtaed popup does not get closed");
				}
			} else {
				appLog.info("Not able to click on close icon");
				sa.assertTrue(false, "Not able to click on close icon");
			}
		} else {
			appLog.info("Not able to click on activity type");
			sa.assertTrue(false, "Not able to click on activity type");
		}
		if (bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated",
				M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
			appLog.info("Clicked on activity type");
			if (click(driver, bp.getGoToContactButton(PageName.HomePage,null,60), "Go to Contact button", action.SCROLLANDBOOLEAN)) {
				appLog.info("Clicked on Go to Contact button");
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					WebElement ele = FindElement(driver, "//div[@class='content']", "Page Header", action.BOOLEAN, 40);
					if (ele != null) {
						if (ele.getText().trim().equalsIgnoreCase(M12Contact1FirstName + " " + M12Contact1LastName)) {
							appLog.info(M12Contact1FirstName + " " + M12Contact1LastName + " Page is opened");
						} else {
							appLog.info(M12Contact1FirstName + " " + M12Contact1LastName + " Page is not opened");
							sa.assertTrue(false,
									M12Contact1FirstName + " " + M12Contact1LastName + " Page is not opened");
						}
					} else {
						appLog.info("Not able to find page header");
						sa.assertTrue(false, "Not able to find page header");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.info("No new window is open");
					sa.assertTrue(false, "No new window is open");
				}
			} else {
				appLog.info("Not able to click on go to Contact button");
				sa.assertTrue(false, "Not able to click on go to contact button");
			}
		} else {
			appLog.info("Not able to click on activity type");
			sa.assertTrue(false, "Not able to click on activity type");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if (bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated",
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
						appLog.info("Clicked on activity type");
						if (bp.getContactProfileUpdatedHeader(Workspace.FundraisingWorkspace, PageName.FundsPage, 60)
								.getText().trim().equalsIgnoreCase("Contact Profile Updated")) {
							appLog.info("Contact profile updtaed popup is displaying");
						} else {
							appLog.info("Contact profile updated popup is not displaying");
							sa.assertTrue(false, "Contact profile updated popup is not displaying");
						}
						if (bp.getFirmTextLabelInContactProfileUpdated(Workspace.FundraisingWorkspace,
								PageName.FundsPage, 60).getText().trim()
								.equalsIgnoreCase(M12Contact1UpdatedFirmName)) {
							appLog.info("Firm Name is verified");
						} else {
							appLog.info("Firm Name is not verified");
							sa.assertTrue(false, "Firm Name is not verified");
						}
						if (bp.getContactTextLabelInContactProfileUpdated(Workspace.FundraisingWorkspace,
								PageName.FundsPage, 60).getText().trim().equalsIgnoreCase(
										M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
							appLog.info("Contact Name is verified");
						} else {
							appLog.info("Contact Name is not verified");
							sa.assertTrue(false, "Contact Name is not verified");
						}
						if (bp.getFieldLabelInFirmProfilePopup(60) != null) {
							appLog.info("Field label is displaying");
						} else {
							appLog.info("Field label is not displaying");
							sa.assertTrue(false, "Field label is not displaying");
						}
						if (bp.getValueLabelInFirmProfilePopup(60) != null) {
							appLog.info("Value label is displaying");
						} else {
							appLog.info("Value label is not displaying");
							sa.assertTrue(false, "Value label is not displaying");
						}
						HashSet<String> newValue = scrollActiveWidgetforSetofFiles(driver,
								bp.getContactProfileUpdateScrollBox(Workspace.FundraisingWorkspace, PageName.FundsPage,
										60),
								By.xpath("//span[contains(@id,'grid_ContactProfileUpdatedACTALTFR-cell-1-')]"));
						List<String> fieldList = new ArrayList<String>(newValue);
						if (!compareMultipleListWithoutAssertion(contactProfileData, fieldList)) {
							appLog.info("New value data Not Matched for Contact Profile Updated Alerts on Funds Page");
							sa.assertTrue(false,
									"New value data Not Matched for Contact Profile Updated Alerts on Funds Page");
						} else {
							appLog.info("New value data is Matched for Contact Profile Updated Alerts on Funds Page");
						}
						if (isDisplayed(driver, bp.getGoToContactButton(PageName.FundsPage,Workspace.FundraisingWorkspace,60), "Visibility", 60,
								"Go to Contact Button") != null) {
							appLog.info("Go to Contact button is displaying");
						} else {
							appLog.error("Go to Contact button is not displaying");
							sa.assertTrue(false, "Go to Contact button is not displaying");
						}
						if (isDisplayed(driver, bp.getContactProfileUpdateCloseButton(Workspace.FundraisingWorkspace,
								PageName.FundsPage, 60), "Visibility", 60, "Close Button") != null) {
							appLog.info("Close button is displaying");
						} else {
							appLog.error("Close button is not displaying");
							sa.assertTrue(false, "Close button is not displaying");
						}

						if (isDisplayed(driver, bp.getContactProfileUpdateCloseIcon(Workspace.FundraisingWorkspace,
								PageName.FundsPage, 60), "Visibility", 60, "Close Icon") != null) {
							appLog.info("Close Icon is displaying");
						} else {
							appLog.error("Close Icon is not displaying");
							sa.assertTrue(false, "Close Icon is not displaying");
						}
						if (click(driver, bp.getContactProfileUpdateCloseIcon(Workspace.FundraisingWorkspace,
								PageName.FundsPage, 60), "Close icon", action.SCROLLANDBOOLEAN)) {
							appLog.info("Clicked on close icon");
							if (bp.getContactProfileUpdateCloseIcon(Workspace.FundraisingWorkspace, PageName.FundsPage,
									10) == null) {
								appLog.info("Contact profile updated popup get closed");
							} else {
								appLog.info("Contact Profile updtaed popup does not get closed");
								sa.assertTrue(false, "Contact Profile updtaed popup does not get closed");
							}
						} else {
							appLog.info("Not able to click on close icon");
							sa.assertTrue(false, "Not able to click on close icon");
						}
					} else {
						appLog.info("Not able to click on activity type");
						sa.assertTrue(false, "Not able to click on activity type");
					}
					if (bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated",
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
						appLog.info("Clicked on activity type");
						if (click(driver, bp.getContactProfileUpdateCloseButton(Workspace.FundraisingWorkspace,
								PageName.FundsPage, 60), "Close Button", action.SCROLLANDBOOLEAN)) {
							appLog.info("Clicked on close icon");
							if (bp.getContactProfileUpdateCloseButton(Workspace.FundraisingWorkspace,
									PageName.FundsPage, 10) == null) {
								appLog.info("Contact profile updated popup get closed");
							} else {
								appLog.info("Contact Profile updtaed popup does not get closed");
								sa.assertTrue(false, "Contact Profile updtaed popup does not get closed");
							}
						} else {
							appLog.info("Not able to click on close icon");
							sa.assertTrue(false, "Not able to click on close icon");
						}
					} else {
						appLog.info("Not able to click on activity type");
						sa.assertTrue(false, "Not able to click on activity type");
					}
					if (bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated",
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
						appLog.info("Clicked on activity type");
						if (click(driver, bp.getGoToContactButton(PageName.FundsPage,Workspace.FundraisingWorkspace,60), "Go to Contact button",
								action.SCROLLANDBOOLEAN)) {
							appLog.info("Clicked on Go to Contact button");
							String parentID = switchOnWindow(driver);
							if (parentID != null) {
								WebElement ele = FindElement(driver, "//div[@class='content']", "Page Header",
										action.BOOLEAN, 40);
								if (ele != null) {
									if (ele.getText().trim()
											.equalsIgnoreCase(M12Contact1FirstName + " " + M12Contact1LastName)) {
										appLog.info(
												M12Contact1FirstName + " " + M12Contact1LastName + " Page is opened");
									} else {
										appLog.info(M12Contact1FirstName + " " + M12Contact1LastName
												+ " Page is not opened");
										sa.assertTrue(false, M12Contact1FirstName + " " + M12Contact1LastName
												+ " Page is not opened");
									}
								} else {
									appLog.info("Not able to find page header");
									sa.assertTrue(false, "Not able to find page header");
								}
								driver.close();
								driver.switchTo().window(parentID);
							} else {
								appLog.info("No new window is open");
								sa.assertTrue(false, "No new window is open");
							}
						} else {
							appLog.info("Not able to click on go to Contact button");
							sa.assertTrue(false, "Not able to click on go to contact button");
						}
					} else {
						appLog.info("Not able to click on activity type");
						sa.assertTrue(false, "Not able to click on activity type");
					}
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if (click(driver,
							bp.getContactProfileUpdateCloseIcon(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
							"Close Button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on close icon");
						if (bp.getContactProfileUpdateCloseIcon(Workspace.FundraisingWorkspace, PageName.FundsPage,
								10) == null) {
							appLog.info("Firm profile updated popup get closed");
						} else {
							appLog.info("Firm Profile updtaed popup does not get closed");
							sa.assertTrue(false, "Firm Profile updtaed popup does not get closed");
						}
					} else {
						appLog.info("Not able to click on close icon");
						sa.assertTrue(false, "Not able to click on close icon");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"AlertHistory cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on cross icon");
					} else {
						appLog.info("Not able to click on cross icon");
						sa.assertTrue(false, "Not able to click on cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on cretaed fund");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (new ContactPageBusinessLayer(driver).clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if (bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated",
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
						appLog.info("Clicked on activity type");
						if (bp.getContactProfileUpdatedHeader(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60)
								.getText().trim().equalsIgnoreCase("Contact Profile Updated")) {
							appLog.info("Contact profile updtaed popup is displaying");
						} else {
							appLog.info("Contact profile updated popup is not displaying");
							sa.assertTrue(false, "Contact profile updated popup is not displaying");
						}
						if (bp.getFirmTextLabelInContactProfileUpdated(Workspace.FundraisingWorkspace,
								PageName.ContactsPage, 60).getText().trim()
								.equalsIgnoreCase(M12Contact1UpdatedFirmName)) {
							appLog.info("Firm Name is verified");
						} else {
							appLog.info("Firm Name is not verified");
							sa.assertTrue(false, "Firm Name is not verified");
						}
						if (bp.getContactTextLabelInContactProfileUpdated(Workspace.FundraisingWorkspace,
								PageName.ContactsPage, 60).getText().trim().equalsIgnoreCase(
										M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
							appLog.info("Contact Name is verified");
						} else {
							appLog.info("Contact Name is not verified");
							sa.assertTrue(false, "Contact Name is not verified");
						}
						if (bp.getFieldLabelInFirmProfilePopup(60) != null) {
							appLog.info("Field label is displaying");
						} else {
							appLog.info("Field label is not displaying");
							sa.assertTrue(false, "Field label is not displaying");
						}
						if (bp.getValueLabelInFirmProfilePopup(60) != null) {
							appLog.info("Value label is displaying");
						} else {
							appLog.info("Value label is not displaying");
							sa.assertTrue(false, "Value label is not displaying");
						}
						HashSet<String> newValue = scrollActiveWidgetforSetofFiles(driver,
								bp.getContactProfileUpdateScrollBox(Workspace.FundraisingWorkspace,
										PageName.ContactsPage, 60),
								By.xpath("//span[contains(@id,'grid_ContactProfileUpdatedACTALTFR-cell-1-')]"));
						List<String> fieldList = new ArrayList<String>(newValue);
						if (!compareMultipleListWithoutAssertion(contactProfileData, fieldList)) {
							appLog.info(
									"New value data Not Matched for Contact Profile Updated Alerts on Contact Page");
							sa.assertTrue(false,
									"New value data Not Matched for Contact Profile Updated Alerts on Contact Page");
						} else {
							appLog.info("New value data is Matched for Contact Profile Updated Alerts on Contact Page");
						}
						if (isDisplayed(driver, bp.getGoToContactButton(PageName.ContactsPage,Workspace.FundraisingWorkspace,60), "Visibility", 60,
								"Go to Contact Button") != null) {
							appLog.info("Go to Contact button is displaying");
						} else {
							appLog.error("Go to Contact button is not displaying");
							sa.assertTrue(false, "Go to Contact button is not displaying");
						}
						if (isDisplayed(driver, bp.getContactProfileUpdateCloseButton(Workspace.FundraisingWorkspace,
								PageName.ContactsPage, 60), "Visibility", 60, "Close Button") != null) {
							appLog.info("Close button is displaying");
						} else {
							appLog.error("Close button is not displaying");
							sa.assertTrue(false, "Close button is not displaying");
						}

						if (isDisplayed(driver, bp.getContactProfileUpdateCloseIcon(Workspace.FundraisingWorkspace,
								PageName.ContactsPage, 60), "Visibility", 60, "Close Icon") != null) {
							appLog.info("Close Icon is displaying");
						} else {
							appLog.error("Close Icon is not displaying");
							sa.assertTrue(false, "Close Icon is not displaying");
						}
						if (click(driver, bp.getContactProfileUpdateCloseIcon(Workspace.FundraisingWorkspace,
								PageName.ContactsPage, 60), "Close icon", action.SCROLLANDBOOLEAN)) {
							appLog.info("Clicked on close icon");
							if (bp.getContactProfileUpdateCloseIcon(Workspace.FundraisingWorkspace,
									PageName.ContactsPage, 10) == null) {
								appLog.info("Contact profile updated popup get closed");
							} else {
								appLog.info("Contact Profile updtaed popup does not get closed");
								sa.assertTrue(false, "Contact Profile updtaed popup does not get closed");
							}
						} else {
							appLog.info("Not able to click on close icon");
							sa.assertTrue(false, "Not able to click on close icon");
						}
					} else {
						appLog.info("Not able to click on activity type");
						sa.assertTrue(false, "Not able to click on activity type");
					}
					if (bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated",
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
						appLog.info("Clicked on activity type");
						if (click(driver, bp.getContactProfileUpdateCloseButton(Workspace.FundraisingWorkspace,
								PageName.ContactsPage, 60), "Close Button", action.SCROLLANDBOOLEAN)) {
							appLog.info("Clicked on close icon");
							if (bp.getContactProfileUpdateCloseButton(Workspace.FundraisingWorkspace,
									PageName.ContactsPage, 10) == null) {
								appLog.info("Contact profile updated popup get closed");
							} else {
								appLog.info("Contact Profile updtaed popup does not get closed");
								sa.assertTrue(false, "Contact Profile updtaed popup does not get closed");
							}
						} else {
							appLog.info("Not able to click on close icon");
							sa.assertTrue(false, "Not able to click on close icon");
						}
					} else {
						appLog.info("Not able to click on activity type");
						sa.assertTrue(false, "Not able to click on activity type");
					}
					if (bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated",
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName)) {
						appLog.info("Clicked on activity type");
						if (click(driver, bp.getGoToContactButton(PageName.ContactsPage,Workspace.FundraisingWorkspace,60), "Go to Contact button",
								action.SCROLLANDBOOLEAN)) {
							appLog.info("Clicked on Go to Contact button");
							String parentID = switchOnWindow(driver);
							if (parentID != null) {
								WebElement ele = FindElement(driver, "//div[@class='content']", "Page Header",
										action.BOOLEAN, 40);
								if (ele != null) {
									if (ele.getText().trim()
											.equalsIgnoreCase(M12Contact1FirstName + " " + M12Contact1LastName)) {
										appLog.info(
												M12Contact1FirstName + " " + M12Contact1LastName + " Page is opened");
									} else {
										appLog.info(M12Contact1FirstName + " " + M12Contact1LastName
												+ " Page is not opened");
										sa.assertTrue(false, M12Contact1FirstName + " " + M12Contact1LastName
												+ " Page is not opened");
									}
								} else {
									appLog.info("Not able to find page header");
									sa.assertTrue(false, "Not able to find page header");
								}
								driver.close();
								driver.switchTo().window(parentID);
							} else {
								appLog.info("No new window is open");
								sa.assertTrue(false, "No new window is open");
							}
						} else {
							appLog.info("Not able to click on go to Contact button");
							sa.assertTrue(false, "Not able to click on go to contact button");
						}
					} else {
						appLog.info("Not able to click on activity type");
						sa.assertTrue(false, "Not able to click on activity type");
					}
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if (click(driver, bp.getContactProfileUpdateCloseButton(Workspace.FundraisingWorkspace,
							PageName.ContactsPage, 60), "Close Button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on close icon");
						if (bp.getContactProfileUpdateCloseButton(Workspace.FundraisingWorkspace, PageName.ContactsPage,
								10) == null) {
							appLog.info("Contact profile updated popup get closed");
						} else {
							appLog.info("Contact Profile updtaed popup does not get closed");
							sa.assertTrue(false, "Contact Profile updtaed popup does not get closed");
						}
					} else {
						appLog.info("Not able to click on close icon");
						sa.assertTrue(false, "Not able to click on close icon");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"AlertHistory cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on cross icon");
					} else {
						appLog.info("Not able to click on cross icon");
						sa.assertTrue(false, "Not able to click on cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Test
	public void M12tc007_1_RegisterContact2UpdateMyProfileMyFirmProfile() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		InvestorProfileBusinessLayer ip = new InvestorProfileBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1, M12Contact2FirstName, M12Contact2LastName,
				Workspace.FundraisingWorkspace, "M12Contact2","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		bp = new BasePageBusinessLayer(driver);
		ip = new InvestorProfileBusinessLayer(driver);
		int i = 0;
		if (ExcelUtils.readData("Contacts", excelLabel.Variable_Name, "M12Contact2", excelLabel.Registered)
				.equalsIgnoreCase("Not Registered")) {
			try {
				investorRegLink = new EmailLib().getInvestorRegLink("InvitationMail", gmailUserName, gmailPassword,
						CRMUser1EmailID, M12Contact2EmailId);
				appLog.info("Investor Registration Link: " + investorRegLink);
			} catch (InterruptedException e) {
				appLog.info("Invitation mail not found.");
				e.printStackTrace();
			}
			if (investorRegLink != null) {
				driver.get(investorRegLink);
				if (bp.targetRegistration(M12Contact2FirstName, M12Contact2LastName, M12Contact2EmailId,
						M12Institution2, adminPassword)) {
					appLog.info(
							"Investor is registered successfully: " + M12Contact2FirstName + " " + M12Contact2LastName);
					ExcelUtils.writeData("Registered", "Contacts", excelLabel.Variable_Name, "M12Contact2",
							excelLabel.Registered);
				} else {
					driver.get(ExcelUtils.readDataFromPropertyFile("TargetRegistrationURL"));
					appLog.info("Register Target URL through Direct URL..");
					if (bp.targetRegistration(M12Contact2FirstName, M12Contact2LastName, M12Contact2EmailId,
							M12Institution2, adminPassword)) {
						appLog.info("Investor is registered successfully: " + M12Contact2FirstName + " "
								+ M12Contact2LastName);
						ExcelUtils.writeData("Registered", "Contacts", excelLabel.Variable_Name, "M12Contact2",
								excelLabel.Registered);
					} else {
						appLog.error("Investor is not Registered through Invited Link: " + M12Contact2FirstName + " "
								+ M12Contact2LastName);
						sa.assertTrue(false, "Investor is not Registered through Invited Link: " + M12Contact2FirstName
								+ " " + M12Contact2LastName);
					}
				}
			} else {
				driver.get(ExcelUtils.readDataFromPropertyFile("TargetRegistrationURL"));
				appLog.info("Register Target URL through Direct URL..");
				if (bp.targetRegistration(M12Contact2FirstName, M12Contact2FirstName, M12Contact2EmailId,
						M12Institution2, adminPassword)) {
					appLog.info(
							"Investor is registered successfully: " + M12Contact2FirstName + " " + M12Contact2LastName);
					ExcelUtils.writeData("Registered", "Contacts", excelLabel.Variable_Name, "M12Contact2",
							excelLabel.Registered);
				} else {
					appLog.error("Investor is not Registered through Invited Link: " + M12Contact2FirstName + " "
							+ M12Contact2LastName);
					sa.assertTrue(false, "Investor is not Registered through Invited Link: " + M12Contact2FirstName
							+ " " + M12Contact2LastName);
				}
			}
		} else {
			appLog.info("investor " + M12Contact2FirstName + " " + M12Contact2LastName + " is already Registered.");
			sa.assertTrue(false,
					"investor " + M12Contact2FirstName + " " + M12Contact2LastName + " is already Registered.");
		}
		if (click(driver, ip.getProfileLink(60), "Profile link", action.SCROLLANDBOOLEAN)) {
			if (click(driver, ip.getEditIcon(60), "Edit icon	", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, ip.getFirstNameTextBox(60), M12Contact2UpdatedFirstName, "Contact 1 first name",
						action.SCROLLANDBOOLEAN)) {
					appLog.info("Enter value in first name box");
				} else {
					appLog.info("Not able to enter value in first name text box");
					sa.assertTrue(false, "Not able to enter value in first name tetx box");
				}
				if (sendKeys(driver, ip.getLastNameTextBox(60), M12Contact2UpdatedLastName, "Contact 1 Last name",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in last name text box");
					sa.assertTrue(false, "Not able to enter value in last name tetx box");
				}
				if (sendKeys(driver, ip.getPhoneTextbox(60), M12Contact2Phone, "Phone", action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in Phone text box");
					sa.assertTrue(false, "Not able to enter value in Phone text box");
				}
				if (sendKeys(driver, ip.getLinkedinTextbox(60), M12Contact2LinkedIn, "LinkedIN",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in Linkedin text box");
					sa.assertTrue(false, "Not able to enter value in Linkedin tetx box");
				}
				if (sendKeys(driver, ip.getFacebookTextbox(60), M12Contact2Facebook, "Facebook",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in facebook text box");
					sa.assertTrue(false, "Not able to enter value in facebook tetx box");
				}
				if (sendKeys(driver, ip.getTitleTextbox(60), M12Contact2Title, "Title", action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in title text box");
					sa.assertTrue(false, "Not able to enter value in title tetx box");
				}
				if (sendKeys(driver, ip.getMailingStreetTextbox(60), M12Contact2MailingStreet, "Mailing Street",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in Mailing Street text box");
					sa.assertTrue(false, "Not able to enter value in Mailing Street tetx box");
				}
				if (sendKeys(driver, ip.getMailingCityTextbox(60), M12Contact2MailingCity, "Mailing City",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in Mailing City text box");
					sa.assertTrue(false, "Not able to enter value in Mailing City tetx box");
				}

				if (sendKeys(driver, ip.getMailingStateTextbox(60), M12Contact2Mailingstate, "Mailing State",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in Mailing State text box");
					sa.assertTrue(false, "Not able to enter value in Mailing State text box");
				}
				if (sendKeys(driver, ip.getMailingZipTextbox(60), M12Contact2MailingZip, "Mailing Zip",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in Zip text box");
					sa.assertTrue(false, "Not able to enter value in Zip text box");
				}
				if (sendKeys(driver, ip.getMailingCountryTextbox(60), M12Contact2MailingCountry, "Mailing country",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in mailing country text box");
					sa.assertTrue(false, "Not able to enter value in Mailing country tetx box");
				}
				if (click(driver, ip.getNoEmailRadiobuttonEditMode(60), "No email radio button",
						action.SCROLLANDBOOLEAN)) {
					appLog.info("abel to click on no email radio buton");
				} else {
					appLog.info("Not abel to click on no email radio buton");
					sa.assertTrue(false, "Not able to click on no email radio button");
				}
				if (click(driver, ip.getSaveButtonMyProfilePage(60), "Save button", action.SCROLLANDBOOLEAN)) {
					appLog.info("Clicked on save button");
					i++;
				} else {
					appLog.error("Not able to click on svae button");
					sa.assertTrue(false, "Not able to click on save button");
				}
			} else {
				appLog.info("Not able to click on edit icon");
				sa.assertTrue(false, "Not able to click on edit icon");
			}
		} else {
			appLog.info("Not able to click on profile link");
			sa.assertTrue(false, "Not able to lcick on profile link");
		}
		if (click(driver, ip.getMyFirmProfileTab(60), "My firm profile", action.SCROLLANDBOOLEAN)) {
			if (click(driver, ip.getEditIcon(60), "Edit icon", action.SCROLLANDBOOLEAN)) {
				if (sendKeys(driver, ip.getFirmNameTextbox(60), M12Contact2UpdatedFirmName, "Firm Name text box",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter firm name");
					sa.assertTrue(false, "Not able to enter firm name");
				}
				if (selectVisibleTextFromDropDown(driver, ip.getInstitutionTypeDropdown(60), "Institutiton type",
						M12Contact2InstitutionTypeDropdown)) {
				} else {
					appLog.info("Not able to Select institution type value");
					sa.assertTrue(false, "Not able to Select institution type value");
				}
				if (selectVisibleTextFromDropDown(driver, ip.getIndustryDropdown(60), "Industry",
						M12Contact2IndustryDropdown)) {
				} else {
					appLog.info("Not able to Select Industry dropdown value");
					sa.assertTrue(false, "Not able to Select Industry dropdown value");
				}
				if (sendKeys(driver, ip.getDescriptionTextArea(60), M12Contact2FirmDescription, "Description text box",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter description");
					sa.assertTrue(false, "Not able to enter description");
				}
				if (sendKeys(driver, ip.getBillingStreetTextArea(60), M12Contact2BillingStreet, "Billing text box",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter Billing value");
					sa.assertTrue(false, "Not able to enter Billing value");
				}
				if (sendKeys(driver, ip.getBillingCityTextbox(60), M12Contact2BillingCity, "Billing city text box",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter Billing city");
					sa.assertTrue(false, "Not able to enter Billing city");
				}
				if (sendKeys(driver, ip.getBillingStateTextbox(60), M12Contact2BillingState, "Billing state text box",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter Billing state");
					sa.assertTrue(false, "Not able to enter Billing state");
				}

				if (sendKeys(driver, ip.getBillingZipCodeTextbox(60), M12Contact2BillingZip, "Billing Zip text box",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter Billing Zip");
					sa.assertTrue(false, "Not able to enter Billing Zip");
				}
				if (sendKeys(driver, ip.getBillingCountryTextbox(60), M12Contact2BillingCountry,
						"Billing country text box", action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter Billing country");
					sa.assertTrue(false, "Not able to enter Billing country");
				}
				if (click(driver, ip.getWeWishToBeContactedNoEditModeRadiobtn(60), "No radio button",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to click on no radio button");
					sa.assertTrue(false, "Not able to click on no radio button");
				}
				if (sendKeys(driver, ip.getMinInvestmentTextbox(60), M12Contact2MinInvestment, "Min investment size",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in min investment text box");
					sa.assertTrue(false, "Not able to enter value in min investment text box");
				}
				if (sendKeys(driver, ip.getMaxInvestmentTextbox(60), M12Contact2MaxInvestment, "Max investment size",
						action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in Max investment text box");
					sa.assertTrue(false, "Not able to enter value in Max investment text box");
				}
				if (sendKeys(driver, ip.getAUMtextbox(60), M12Contact2AUM, "AUM Text box", action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to enter value in AUM text box");
					sa.assertTrue(false, "Not able to enter value in AUM text box");
				}
				if (selectVisibleTextFromDropDown(driver, ip.getFundTypeSelectbox(50), "Fund type selct box",
						M12Contact2FundTypeselectbox)) {
				} else {
					appLog.info("Not able to slect text from fund type dropdown");
					sa.assertTrue(false, "Not able to slect text from fund type dropdown");
				}
				if (click(driver, ip.getAddButtonFundsSelectbox(60), "Ad dbutton", action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to click on add button");
					sa.assertTrue(false, "Not able to click on add button");
				}
				if (selectVisibleTextFromDropDown(driver, ip.getIndustriesSelectbox(50), "Industries  selct box",
						M12Contact2Industriesselectbox)) {
				} else {
					appLog.info("Not able to slect text from Industries dropdown");
					sa.assertTrue(false, "Not able to slect text from Industries dropdown");
				}
				if (click(driver, ip.getAddButtonIndustriesSelectbox(60), "Add dbutton", action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to click on add button");
					sa.assertTrue(false, "Not able to click on add button");
				}
				if (selectVisibleTextFromDropDown(driver, ip.getGeoFocusSelectbox(50), "Geo focus selct box",
						M12Contact2Geofocus)) {
				} else {
					appLog.info("Not able to slect text from Geo focus dropdown");
					sa.assertTrue(false, "Not able to slect text from Geo focus dropdown");
				}
				if (click(driver, ip.getAddButtonGeographicSelectbox(60), "Ad dbutton", action.SCROLLANDBOOLEAN)) {
				} else {
					appLog.info("Not able to click on add button");
					sa.assertTrue(false, "Not able to click on add button");
				}
				if (click(driver, ip.getSaveButtonFirmProfile(60), "Firm profile", action.SCROLLANDBOOLEAN)) {
					ThreadSleep(2000);
					i++;
				} else {
					appLog.info("Not able to click on firm profile save button");
					sa.assertTrue(false, "Not able to click on firm profile save button");
				}
				int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
				int ContactAlertCount = Integer.parseInt(M12Contact2PageAlertCount) + i;
				int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
				ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
				ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName,
						"M12Contact2", excelLabel.ContactPageALertCount);
				ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
						"M12Fund1", excelLabel.FundsPageALertCount);
			} else {
				appLog.info("Not able to click on edit icon");
				sa.assertTrue(false, "Not able to click on edit icon");
			}
		} else {
			appLog.info("Not able to click on my firm profile tab");
			sa.assertTrue(false, "Not able to click on my firm prfile tab");
		}
		lp.investorLogout();
		sa.assertAll();
	}

	@Test
	public void M12tc007_2_verifyContactProfileUpdatedAndFirmProfileUpdatedAlertAtCRMHomePage() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp = new HomePageBusineesLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (hp.verifyAlertOnHomePage("Firm Profile Updated", null, null, null, M12Contact2UpdatedFirmName,
				M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, "date")) {
			appLog.info("Grid data is veririfed for" + "Firm Profile Updated alert for contact"
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		} else {
			appLog.info("Grid data is not veririfed for" + "Firm Profile Updated alert for contact"
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not veririfed for" + "Firm Profile Updated alert for contact"
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (hp.verifyAlertOnHomePage("Contact Profile Updated", null, null, null, M12Contact2UpdatedFirmName,
				M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, "date")) {
			appLog.info("Grid data is veririfed for" + "Contact Profile Updated alert for contact"
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		} else {
			appLog.info("Grid data is not veririfed for" + "Contact Profile Updated alert for contact"
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not veririfed for" + "Contact Profile Updated alert for contact"
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (hp.verifyAlertOnHomePage("Firm Profile Updated", null, null, null, M12Contact1UpdatedFirmName,
				M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
			appLog.info("Grid data is veririfed for" + "Firm Profile Updated alert for contact"
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		} else {
			appLog.info("Grid data is not veririfed for" + "Firm Profile Updated alert for contact"
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not veririfed for" + "Firm Profile Updated alert for contact"
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (hp.verifyAlertOnHomePage("Contact Profile Updated", null, null, null, M12Contact1UpdatedFirmName,
				M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
			appLog.info("Grid data is veririfed for" + "Contact Profile Updated alert for contact"
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		} else {
			appLog.info("Grid data is not veririfed for" + "Contact Profile Updated alert for contact"
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not veririfed for" + "Contact Profile Updated alert for contact"
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");

					if (fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName,
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, "date")) {
						appLog.info("Grid data is verified for " + "Firm Profile Updated for contact"
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.info("Grid data is not verified for " + "Firm Profile Updated for contact"
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for " + "Firm Profile Updated for contact"
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName,
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, "date")) {
						appLog.info("Grid data is verified for " + "Contact Profile Updated  for contact"
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.info("Grid data is not verified for " + "Contact Profile Updated for contact"
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for " + "Contact Profile Updated for contact"
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName,
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
						appLog.info("Grid data is verified for " + "Firm Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.info("Grid data is not verified for " + "Firm Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for " + "Firm Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName,
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
						appLog.info("Grid data is verified for " + "Contact Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.info("Grid data is not verified for " + "Contact Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for " + "Contact Profile Updated for contact"
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if (fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName,
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, "date")) {
						appLog.info("Grid data is verified for " + "Firm Profile Updated for contact"
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.info("Grid data is not verified for " + "Firm Profile Updated for contact"
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for " + "Firm Profile Updated for contact"
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName,
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, "date")) {
						appLog.info("Grid data is verified for " + "Contact Profile Updated for contact"
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.info("Grid data is not verified for " + "Contact Profile Updated for contact"
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for " + "Contact Profile Updated for contact"
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact2",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Test
	public void M12tc008_1_ViewDownloadDocumentFromAllFirms() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1, M12Contact1FirstName, M12Contact1LastName,
				Workspace.FundraisingWorkspace, "M12Contact1","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		AllFirmsPageBusinesslayer afp = new AllFirmsPageBusinesslayer(driver);
		DisclaimerPageBussinessLayer dp = new DisclaimerPageBussinessLayer(driver);
		lp.investorLogin(M12Contact1EmailId, adminPassword);
		sa = new SoftAssert();
		int i = 0;
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		if (selectVisibleTextFromDropDown(driver, afp.getFirmNameDropdown(60), "Firm Name dropdown", "All Firms")) {
			ThreadSleep(3000);
			if(SharedDocument.length>1){
			if (dp.clickOnDocument("Potential Investment", M12FundName1, SharedDocument[1], 60, afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ SharedDocument[1] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ SharedDocument[1] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the shared document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the shared document");
			}
			if(CommonDocument.length>1){
			if (dp.clickOnDocument("Potential Investment", M12FundName1, CommonDocument[1], 60, afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ CommonDocument[1] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ CommonDocument[1] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the common document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the common document");
			}
			if(StandardDocument.length>1){
			if (dp.clickOnDocument("Potential Investment", M12FundName1, StandardDocument[1], 60,
					afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ StandardDocument[1] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ StandardDocument[1] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the standard document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the standard document");
			}
		} else {
			appLog.info("Not able to select firm name ");
			sa.assertTrue(false, "Not able to select firm name ");
		}
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12ContactPageALertCount) + i;
		int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact1",
				excelLabel.ContactPageALertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund1", excelLabel.FundsPageALertCount);
		lp.investorLogout();
		sa.assertAll();
	}

	@Test
	public void M12tc008_2_verifyDocumentViewedDocumentDownloadedAlertAtCRMSide() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(CommonDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				CommonDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the common document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the common document");
		}
		if(SharedDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				SharedDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the shared document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the shared document");
		}
		if(StandardDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				StandardDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the shared document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the shared document");
		}
		if(CommonDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				CommonDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the common document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the common document");
		}
		if(SharedDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				SharedDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the shared document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the shared document");
		}
		if(StandardDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				StandardDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the standard document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the standard document");
		}
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, StandardDocument[1],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the standard document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the standard document");	
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, CommonDocument[1],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the standard document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the standard document");
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, SharedDocument[1],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the standard document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the standard document");
					}
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							StandardDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the standard document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the standard document");
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							CommonDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the standard document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the standard document");
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							SharedDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the standard document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the standard document");
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,
							StandardDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the standard document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the standard document");
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, CommonDocument[1],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the Common document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the Common document");
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, SharedDocument[1],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the Common document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the Common document");	
					}
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							StandardDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the Common document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the Common document");	
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							CommonDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the Common document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the Common document");							
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							SharedDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the Common document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the Common document");							
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact1",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Test
	public void M12tc009_1_ViewDownloadDocumentFromPEFirmAllDocuments() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1, M12Contact2FirstName, M12Contact2LastName,
				Workspace.FundraisingWorkspace, "M12Contact2","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		AllFirmsPageBusinesslayer afp = new AllFirmsPageBusinesslayer(driver);
		DisclaimerPageBussinessLayer dp = new DisclaimerPageBussinessLayer(driver);
		lp.investorLogin(M12Contact2EmailId, adminPassword);
		sa = new SoftAssert();
		int i = 0;
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		if(SharedDocument.length>1){
			if (dp.clickOnDocument("Potential Investment", M12FundName1, SharedDocument[0], 60, afp.getAllDocumentsScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ SharedDocument[0] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ SharedDocument[0] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
		}else{
			appLog.error("Since files not uploaded successfully so not able to click on document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to click on document");							
		}
		if(CommonDocument.length>1){
			if (dp.clickOnDocument("Potential Investment", M12FundName1, CommonDocument[0], 60, afp.getAllDocumentsScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ CommonDocument[0] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ CommonDocument[0] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
		}else{
			appLog.error("Since files not uploaded successfully so not able to click on document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to click on document");	
		}
		if(StandardDocument.length>1){
			if (dp.clickOnDocument("Potential Investment", M12FundName1, StandardDocument[0], 60,
					afp.getAllDocumentsScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ StandardDocument[0] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ StandardDocument[0] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}	
		}else{
			appLog.error("Since files not uploaded successfully so not able to click on document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to click on document");		
		}
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12Contact2PageAlertCount) + i;
		int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
		System.out.println(ContactAlertCount);
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact2",
				excelLabel.ContactPageALertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund1", excelLabel.FundsPageALertCount);
		lp.investorLogout();
		sa.assertAll();
	}

	@Test
	public void M12tc009_2_VerifyDocumentViewedDocumentDownloadedAlertAtCRMSide() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(CommonDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				CommonDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");		
		}
		if(SharedDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				SharedDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");	
		}
		if(StandardDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				StandardDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");	
		}
		if(CommonDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				CommonDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
		}
		if(SharedDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				SharedDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
		}
		if(StandardDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				StandardDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
		}
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, StandardDocument[0],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");	
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, CommonDocument[0],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");		
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, SharedDocument[0],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");		
					}
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							StandardDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");	
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							CommonDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");	
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							SharedDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");		
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,
							StandardDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, CommonDocument[0],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, SharedDocument[0],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
					}
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							StandardDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							CommonDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							SharedDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact2",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Test
	public void M12tc010_1_ViewDownloadDocumentFromPEFirmRecentDocuments() {
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1, M12Contact1FirstName, M12Contact1LastName,
				Workspace.FundraisingWorkspace, "M12Contact1","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		AllFirmsPageBusinesslayer afp = new AllFirmsPageBusinesslayer(driver);
		InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
		DisclaimerPageBussinessLayer dp = new DisclaimerPageBussinessLayer(driver);
		lp.investorLogin(M12Contact1EmailId, adminPassword);
		sa = new SoftAssert();
		int i = 0;
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		if (click(driver, ifp.getRecentActivitiesTab(60), "Recent Activities tab", action.SCROLLANDBOOLEAN)) {
			ThreadSleep(3000);
			if(SharedDocument.length>1){
			if (dp.clickOnDocument("Potential Investment", M12FundName1, SharedDocument[3], 60, afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ SharedDocument[3] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ SharedDocument[3] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");
			}
			if(CommonDocument.length>1){
			if (dp.clickOnDocument("Potential Investment", M12FundName1, CommonDocument[3], 60, afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ CommonDocument[3] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ CommonDocument[3] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");
			}
			if(StandardDocument.length>1){
			if (dp.clickOnDocument("Potential Investment", M12FundName1, StandardDocument[3], 60,
					afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ StandardDocument[3] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ StandardDocument[3] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");
			}
		} else {
			appLog.info("Not able to click on recent activity tab ");
			sa.assertTrue(false, "Not able to click on recent activity tab");
		}
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12ContactPageALertCount) + i;
		int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact1",
				excelLabel.ContactPageALertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund1", excelLabel.FundsPageALertCount);
		lp.investorLogout();
		sa.assertAll();
	}
	
	@Test
	public void M12tc010_2_VerifyDocumentViewedDocumentDownloadedAlertAtCRMSide(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(CommonDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				CommonDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
		}
		if(SharedDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				SharedDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
		}
		if(StandardDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				StandardDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
		}
		if(CommonDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				CommonDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
		}
		if(SharedDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				SharedDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
		}
		if(StandardDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				StandardDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	

		}
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, StandardDocument[3],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");		
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, CommonDocument[3],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, SharedDocument[3],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");
					}
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							StandardDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							CommonDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							SharedDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,
							StandardDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, CommonDocument[3],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, SharedDocument[3],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");
					}
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							StandardDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							CommonDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");
					}	
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							SharedDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact1",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}
	
	@Test
	public void M12tc011_1_ViewDownloadDocumentFromPEFirmPotentialInvestment(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1, M12Contact2FirstName, M12Contact2LastName,
				Workspace.FundraisingWorkspace, "M12Contact2","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		AllFirmsPageBusinesslayer afp = new AllFirmsPageBusinesslayer(driver);
		InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
		DisclaimerPageBussinessLayer dp = new DisclaimerPageBussinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		lp.investorLogin(M12Contact2EmailId, adminPassword);
		sa = new SoftAssert();
		int i = 0;
		String stdfolderPath=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
		String CommonfolderPath=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
		String SharedfolderPath=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		if(ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)){
			if(selectVisibleTextFromDropDown(driver, ifp.getPotentialAndCurrentInvestmentInvestmentDropdown(60), "Investment dropdown", M12FundName1)){
				if(fp.verifyFolderPathdummy(CommonfolderPath, null, null, null, PageName.PotentialInvestmentPage, null, 60)){
			if(CommonDocument.length>1){
					if(dp.clickOnDocumentInWorkspaceContentGrid(CommonDocument[2])){
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ CommonDocument[2] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ CommonDocument[2] + "'.");
				}		
				}else{
					appLog.info("Not able to click on document name");
					sa.assertTrue(false, "Not able to click on document name");
				}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the  document");
			}
				}else{
					appLog.info("Folder path is not verified");
					sa.assertTrue(false, "Folder path is not verified");
				}
				if(fp.verifyFolderPathdummy(SharedfolderPath, null, null, null, PageName.PotentialInvestmentPage, null, 60)){
					if(SharedDocument.length>1){
					if(dp.clickOnDocumentInWorkspaceContentGrid(SharedDocument[2])){
						String parentID = switchOnWindow(driver);
						if (parentID != null) {
							i++;
							if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
								appLog.info("Clicked on download link");
								i++;
								bp.clickOnDownloadDocumentCancelButton();
							} else {
								appLog.info("Not able to click on download link");
								sa.assertTrue(false, "Not able to click on download ink");
							}
							driver.close();
							driver.switchTo().window(parentID);
						} else {
							appLog.error("No new window is opening after clicking on the document name link of '"
									+ SharedDocument[2] + "'.");
							sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
									+ SharedDocument[2] + "'.");
						}		
						}else{
							appLog.info("Not able to click on document name");
							sa.assertTrue(false, "Not able to click on document name");
						}
					}else{
						appLog.error("Since files not uploaded successfully so not able to click on the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the  document");
					}
						}else{
							appLog.info("Folder path is not verified");
							sa.assertTrue(false, "Folder path is not verified");
						}
				if(fp.verifyFolderPathdummy(stdfolderPath, M12Institution2, null, null, PageName.PotentialInvestmentPage, null, 60)){
					if(StandardDocument.length>1){
					if(dp.clickOnDocumentInWorkspaceContentGrid(StandardDocument[2])){
						String parentID = switchOnWindow(driver);
						if (parentID != null) {
							i++;
							if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
								appLog.info("Clicked on download link");
								i++;
								bp.clickOnDownloadDocumentCancelButton();
							} else {
								appLog.info("Not able to click on download link");
								sa.assertTrue(false, "Not able to click on download ink");
							}
							driver.close();
							driver.switchTo().window(parentID);
						} else {
							appLog.error("No new window is opening after clicking on the document name link of '"
									+ StandardDocument[2] + "'.");
							sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
									+ StandardDocument[2] + "'.");
						}		
						}else{
							appLog.info("Not able to click on document name");
							sa.assertTrue(false, "Not able to click on document name");
						}
					}else{
						appLog.error("Since files not uploaded successfully so not able to click on the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the  document");
					}
						}else{
							appLog.info("Folder path is not verified");
							sa.assertTrue(false, "Folder path is not verified");
						}
				int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
				int ContactAlertCount = Integer.parseInt(M12Contact2PageAlertCount) + i;
				int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
				System.out.println(ContactAlertCount);
				ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
				ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact2",
						excelLabel.ContactPageALertCount);
				ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
						"M12Fund1", excelLabel.FundsPageALertCount);
			}else{
					appLog.info("Not able to select fund value from invest,ment dropdown");
					sa.assertTrue(false, "Not able to select fund value from invest,ment dropdown");
				}
		}else{
			appLog.info("Not able to click on potential investment tab");
			sa.assertTrue(false, "Not able to click on potential investment tab");
		}
		lp.investorLogout();
		sa.assertAll();	
	}

	@Test
	public void M12tc011_2_VerifyDocumentViewedDocumentDownloadedAlertAtCRMSide(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(CommonDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				CommonDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");
		}
		if(SharedDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				SharedDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
		}
		if(StandardDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				StandardDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
		}
		if(CommonDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				CommonDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
		}
		if(SharedDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				SharedDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, 
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
		}
		if(StandardDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				StandardDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");		
		}
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, StandardDocument[2],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");		
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, CommonDocument[2],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");		
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, SharedDocument[2],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
					}
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							StandardDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							CommonDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							SharedDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,
							StandardDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, CommonDocument[2],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, SharedDocument[2],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
					}
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							StandardDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							CommonDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							SharedDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, 
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the  document");	
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact2",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
		}

	@Test
	public void M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		SoftAssert saa = new SoftAssert();
		String[] stdPath = ExcelUtils
				.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath)
				.split(",");
		String[] cmnPath = ExcelUtils
				.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath)
				.split(",");
		String[] shdPath = ExcelUtils
				.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath)
				.split(",");
		String[] intPath = ExcelUtils
				.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath)
				.split(",");
		String[] step1of3 = { ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund2", excelLabel.Fund_Size),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund2", excelLabel.Fund_VintageYear),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund2", excelLabel.Fund_Contact),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund2", excelLabel.Fund_Phone),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund2", excelLabel.Fund_Email),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund2", excelLabel.Fund_Description) };
		String StdFromFolder = "UploadFiles\\Module12\\FWR\\M12Fund2\\Standard";
		String CommonFromFolder = "UploadFiles\\Module12\\FWR\\M12Fund2\\Common";
		String InternalFromFolder = "UploadFiles\\Module12\\FWR\\M12Fund2\\Internal";
		String SharedFromFolder = "UploadFiles\\Module12\\FWR\\M12Fund2\\Shared";
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName2)) {
				if (fp.buildWorkspace(step1of3, WorkSpaceAction.IMPORTFOLDERTEMPLATE, folderTemplateName, null,
						M12Institution1 , Workspace.FundraisingWorkspace, 60)) {
					appLog.info("Fundraising Workspace is created successfully");
				} else {
					appLog.info("Fundraising workspace is not created successfully");
					saa.assertTrue(false, " Fundraising workspace is not craeted successfully");
				}
				if (fp.inviteContact(environment, mode, M12Institution1, M12Contact1EmailId, null, FolderType.Standard,
						"Upload", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
			if (fp.inviteContact(environment, mode, null, M12Contact1EmailId, shdPath[0],
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.uploadFile(stdPath[0], M12Institution1, StdFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + stdPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + stdPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + stdPath[0] + "'");
				}
				StdFromFolder = "UploadFiles\\Module12\\FWR\\M12Fund2\\StandardSub";
				if (fp.uploadFile(stdPath[1], M12Institution1, StdFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + stdPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + stdPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + stdPath[1] + "'");
				}
				if (fp.uploadFile(cmnPath[0], null, CommonFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + cmnPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + cmnPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + cmnPath[0] + "'");
				}
				CommonFromFolder = CommonFromFolder+"Sub";
				if (fp.uploadFile(cmnPath[1], null, CommonFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + cmnPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + cmnPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + cmnPath[1] + "'");
				}
				if (fp.uploadFile(shdPath[0], null, SharedFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + shdPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + shdPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + shdPath[0] + "'");
				}
				SharedFromFolder = SharedFromFolder+"Sub";
				if (fp.uploadFile(shdPath[1], null, SharedFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + shdPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + shdPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + shdPath[1] + "'");
				}
				if (fp.uploadFile(intPath[0], null, InternalFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + intPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + intPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + intPath[0] + "'");
				}
				InternalFromFolder = InternalFromFolder+"Sub";
				if (fp.uploadFile(intPath[1], null, InternalFromFolder, null, UploadFileActions.Upload,
						Workspace.FundraisingWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + intPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + intPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + intPath[1] + "'");
				}				
			} else {
				appLog.info("Not able to click on created fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}
		} else {
			appLog.info("Not able to click on Funds tab so we cannot create workspace");
			saa.assertTrue(false, "Not able to click on Funds tab so we cannot create workspace");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();	
	}

	@Test
	public void M12tc013_1_ViewDownloadDocumentsFromInvestorSideForFund2(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName2, M12Contact1FirstName, M12Contact1LastName,
				Workspace.FundraisingWorkspace, "M12Contact1","M12Fund2");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		AllFirmsPageBusinesslayer afp = new AllFirmsPageBusinesslayer(driver);
		DisclaimerPageBussinessLayer dp = new DisclaimerPageBussinessLayer(driver);
		lp.investorLogin(M12Contact1EmailId, adminPassword);
		sa = new SoftAssert();
		int i = 0;
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact",
				excelLabel.UploadedFileStandard).split("<break>");
			ThreadSleep(3000);
			if(SharedDocument.length>1){
			if (dp.clickOnDocument("Potential Investment", M12FundName2, SharedDocument[0], 60, afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ SharedDocument[0] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ SharedDocument[0] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on  document");	
			}
			if(CommonDocument.length>1){
			if (dp.clickOnDocument("Potential Investment", M12FundName2, CommonDocument[0], 60, afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ CommonDocument[0] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ CommonDocument[0] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on  document");	
			}
			if(StandardDocument.length>1){
			if (dp.clickOnDocument("Potential Investment", M12FundName2, StandardDocument[0], 60,
					afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ StandardDocument[0] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ StandardDocument[0] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on  document");		
			}
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12ContactPageALertCount) + i;
		int FundAlertCount = Integer.parseInt(M12Funds2PageALertCount) + i;
		System.out.println(ContactAlertCount);
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact1",
				excelLabel.ContactPageALertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund2", excelLabel.FundsPageALertCount);
		lp.investorLogout();
		sa.assertAll();		
	}
	
	@Test
	public void M12tc013_2_VerifyCreatedAlertsAtHomeFundContactPage(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact",
				excelLabel.UploadedFileStandard).split("<break>");
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(CommonDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Fundraising",
				CommonDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
		}
		if(SharedDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Fundraising",
				SharedDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
		}
		if(StandardDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Fundraising",
				StandardDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
		}
		if(CommonDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Fundraising",
				CommonDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");	
		}
		if(SharedDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Fundraising",
				SharedDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");	
		}
		if(StandardDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Fundraising",
				StandardDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		}else{
			appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");		
		}
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName2)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, StandardDocument[0],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");		
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, CommonDocument[0],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");	
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, SharedDocument[0],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");	
					}
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							StandardDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");		
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							CommonDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");		
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							SharedDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");			
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund2", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,
							StandardDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");	
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, CommonDocument[0],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, SharedDocument[0],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
					}
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							StandardDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							CommonDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							SharedDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact1",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
		}
	
	@Test
	public void M12tc014_1_UploadDocumentFromInvestorSide(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1, M12Contact1FirstName, M12Contact1LastName,
				Workspace.FundraisingWorkspace, "M12Contact1","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		 lp = new LoginPageBusinessLayer(driver);
		InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
		SoftAssert saa = new SoftAssert();
		String 	date = getSystemDate("MM/dd/yyyy")+previousOrForwardDate(-1, "MM/dd/yyyy");
		String docpath = "UploadFiles\\Module12\\InvSide_Files";
		String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
				excelLabel.UploadedFileStandard);		
		String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,
				excelLabel.StandardPath);	
		int i=0;
		lp.investorLogin(M12Contact1EmailId, adminPassword);
		if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
			if(selectVisibleTextFromDropDown(driver, ifp.getPotentialAndCurrentInvestmentInvestmentDropdown(60), "Investment dropdown", M12FundName1)){
				if (ifp.uploadUpdateFileInvestorSide(stdPath, filesName, M12Institution1, null, FolderType.Standard, docpath, "No", 30,
					PageName.PotentialInvestmentPage, null, null, WorkSpaceAction.UPLOAD)) {				
				appLog.info("Upload Successful");				
				if(click(driver, ifp.getRefreshIcon(20), "Refresh Icon", action.SCROLLANDBOOLEAN)){	
					i++;
					saa = ifp.verifyContentGridInvestorSide(driver, PageName.PotentialInvestmentPage, filesName, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, date);
					sa.combineAssertions(saa);					
				}else{
					appLog.error("Not Able to Click Refresh Icon so Cannot check Upoaded File");
					sa.assertTrue(false, "Not Able to Click Refresh Icon so Cannot check Upoaded File");	
				}				
			}else{
				appLog.error("Upload Unsuccessful");
				sa.assertTrue(false, "Upload Unsuccessful");	
			}
			}else{
				appLog.info("Not able to select fund from the dropdown");
				sa.assertTrue(false, "Not able to select fund from the dropdown");
			}
		} else {
			appLog.info("Not able to click on PotentialInvestment tab");
			sa.assertTrue(false, "Not able to click on PotentialInvestment tab");
		}
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12ContactPageALertCount) + i;
		int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
		System.out.println(ContactAlertCount);
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact1",
				excelLabel.ContactPageALertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund1", excelLabel.FundsPageALertCount);
		lp.investorLogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();
	}
	
	@Test
	public void M12tc014_2_VerifyDocumentUploadedAlertAtHomeFundContactPage(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc014_1_UploadDocumentFromInvestorSide",
				excelLabel.UploadedFileStandard);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1, "Fundraising",
				StandardDocument, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Uploaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Uploaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Uploaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}	
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");

					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, StandardDocument,
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Uploaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Uploaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Uploaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}				
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Uploaded", null, null,
							StandardDocument, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Uploaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Uploaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Uploaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}					
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact1",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Test
	public void M12tc015_1_UpdateDocumentFromInvestorSide(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		String tc="M12tc014_1_UploadDocumentFromInvestorSide";
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1, M12Contact1FirstName, M12Contact1LastName,
				Workspace.FundraisingWorkspace, "M12Contact1","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
		sa = new SoftAssert();
		String docpath = "UploadFiles\\Module12\\InvSide_Files";
		String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, tc,
				excelLabel.UploadedFileStandard);		
		String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, tc,
				excelLabel.StandardPath);	
		int i=0;
		lp.investorLogin(M12Contact1EmailId, adminPassword);
		if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.PotentialInvestment)) {
			if(selectVisibleTextFromDropDown(driver, ifp.getPotentialAndCurrentInvestmentInvestmentDropdown(60), "Investment dropdown", M12FundName1)){
				if (ifp.uploadUpdateFileInvestorSide(stdPath, filesName, M12Institution1, null, FolderType.Standard, docpath, "No", 30,
					PageName.PotentialInvestmentPage, null, null, WorkSpaceAction.UPDATE)) {				
				appLog.info("Update Successful");				
				i++;				
			}else{
				appLog.error("Update Unsuccessful");
				sa.assertTrue(false, "Update Unsuccessful");	
			}
			}else{
				appLog.info("Not able to select fund from the dropdown");
				sa.assertTrue(false, "Not able to select fund from the dropdown");
			}
		} else {
			appLog.info("Not able to click on PotentialInvestment tab");
			sa.assertTrue(false, "Not able to click on PotentialInvestment tab");
		}
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12ContactPageALertCount) + i;
		int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
		System.out.println(ContactAlertCount);
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact1",
				excelLabel.ContactPageALertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund1", excelLabel.FundsPageALertCount);
		lp.investorLogout();
		sa.assertAll();
		}
	
	@Test
	public void M12tc015_2_VerifyDocumentUpdatedAlertAtHomeFundContactPage(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc014_1_UploadDocumentFromInvestorSide",
				excelLabel.UploadedFileStandard);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1, "Fundraising",
				StandardDocument, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Updated for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Updated for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Updated for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}	
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");

					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated", null, null, StandardDocument,
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Updated for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Updated for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Updated for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}				
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Updated", null, null,
							StandardDocument, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Updated for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Updated for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Updated for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}					
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact1",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
	}
	
	@Test
	public void M12tc016_VerifyFundDocumentContactHyperlinkInAlerts(){
	LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
	FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
	HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
	ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
	String commonFilePath[]=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, "M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileCommon).split("<break>");
	String SharedFilePath[]=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, "M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileShared).split("<break>");
	String StandardFilePath[]=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, "M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileStandard).split("<break>");
	SoftAssert sa =new SoftAssert();
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
	switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));
		if(bp.clickOnfundNameInAlert(M12FundName1, hp.getHomeAlertScrollBox(60))){
			appLog.info("Fund page is opening");			
		}else{
			appLog.info("Fund PAge is not opening");
			sa.assertTrue(false,"Fund PAge is not opening");
		}
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));
		if(bp.clickOnContactNameInAlert(M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, hp.getHomeAlertScrollBox(60),Workspace.FundraisingWorkspace)){
			appLog.info("Contact page is opening");			
		}else{
			appLog.info("Contact Page is not opening");
			sa.assertTrue(false,"Contact Page is not opening");
		}
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));	
		if(bp.clickOnDocumentNameInAlert(commonFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1, "Fundraising")){
				String ParentID = switchOnWindow(driver);
				if (ParentID != null) {
					if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
							"Document Close button") != null) {
						appLog.info("Document is open");
					} else {
						appLog.info("Document is not opening");
						sa.assertTrue(false, "Document is not opening");
					}
					driver.close();
					driver.switchTo().window(ParentID);
				}else {
				appLog.info("No new window is open");
				sa.assertTrue(false, "No new window is open");
			}
		}else{
			appLog.info("Document Page is not opening");
			sa.assertTrue(false,"Document Page is not opening");
		}
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));	
		if(bp.clickOnDocumentNameInAlert(SharedFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1, "Fundraising")){
			String ParentID = switchOnWindow(driver);
			if (ParentID != null) {
				if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
						"Document Close button") != null) {
					appLog.info("Document is open");
				} else {
					appLog.info("Document is not opening");
					sa.assertTrue(false, "Document is not opening");
				}
				driver.close();
				driver.switchTo().window(ParentID);
			}else {
			appLog.info("No new window is open");
			sa.assertTrue(false, "No new window is open");
		}	
		}else{
			appLog.info("Document Page is not opening");
			sa.assertTrue(false,"Document Page is not opening");
		}
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));	
		if(bp.clickOnDocumentNameInAlert(StandardFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1, "Fundraising")){
			String ParentID = switchOnWindow(driver);
			if (ParentID != null) {
				if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
						"Document Close button") != null) {
					appLog.info("Document is open");
				} else {
					appLog.info("Document is not opening");
					sa.assertTrue(false, "Document is not opening");
				}
				driver.close();
				driver.switchTo().window(ParentID);
			}else {
			appLog.info("No new window is open");
			sa.assertTrue(false, "No new window is open");
		}	
		}else{
			appLog.info("Document Page is not opening");
			sa.assertTrue(false,"Document Page is not opening");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));	
				if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
					if(bp.clickOnContactNameInAlert(M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName,bp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),Workspace.FundraisingWorkspace)){
						appLog.info("Contact page is opening");			
					}else{
						appLog.info("Contact Page is not opening");
						sa.assertTrue(false,"Contact Page is not opening");
					}
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
					switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));	
					if(bp.clickOnDocumentNameInAlert(commonFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, bp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
							if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
									"Document Close button") != null) {
								appLog.info("Document is open");
							} else {
								appLog.info("Document is not opening");
								sa.assertTrue(false, "Document is not opening");
							}
							driver.close();
							driver.switchTo().window(ParentID);
						}else {
						appLog.info("No new window is open");
						sa.assertTrue(false, "No new window is open");
					}	
					}else{
						appLog.info("Document Page is not opening");
						sa.assertTrue(false,"Document Page is not opening");
					}
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
					switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));	
					if(bp.clickOnDocumentNameInAlert(SharedFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, bp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
							if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
									"Document Close button") != null) {
								appLog.info("Document is open");
							} else {
								appLog.info("Document is not opening");
								sa.assertTrue(false, "Document is not opening");
							}
							driver.close();
							driver.switchTo().window(ParentID);
						}else {
						appLog.info("No new window is open");
						sa.assertTrue(false, "No new window is open");
					}	
					}else{
						appLog.info("Document Page is not opening");
						sa.assertTrue(false,"Document Page is not opening");
					}
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
					switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));	
					if(bp.clickOnDocumentNameInAlert(StandardFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, bp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
							if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
									"Document Close button") != null) {
								appLog.info("Document is open");
							} else {
								appLog.info("Document is not opening");
								sa.assertTrue(false, "Document is not opening");
							}
							driver.close();
							driver.switchTo().window(ParentID);
						}else {
						appLog.info("No new window is open");
						sa.assertTrue(false, "No new window is open");
					}
					}else{
						appLog.info("Document Page is not opening");
						sa.assertTrue(false,"Document Page is not opening");
					}
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
					switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));		
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}					
				}else{
			appLog.error("Not able to click on alert history link");
			sa.assertTrue(false, "Not able to click on alert history link");
				}	
			}else{
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}		
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
				switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));	
				if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
					if(bp.clickOnContactNameInAlert(M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName,bp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),Workspace.FundraisingWorkspace)){
						appLog.info("Contact page is opening");			
					}else{
						appLog.info("Contact Page is not opening");
						sa.assertTrue(false,"Contact Page is not opening");
					}
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
					switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));	
					if(bp.clickOnDocumentNameInAlert(commonFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, bp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.ContactsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
							if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
									"Document Close button") != null) {
								appLog.info("Document is open");
							} else {
								appLog.info("Document is not opening");
								sa.assertTrue(false, "Document is not opening");
							}
							driver.close();
							driver.switchTo().window(ParentID);
						}else {
						appLog.info("No new window is open");
						sa.assertTrue(false, "No new window is open");
					}	
					}else{
						appLog.info("Document Page is not opening");
						sa.assertTrue(false,"Document Page is not opening");
					}
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
					switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));	
					if(bp.clickOnDocumentNameInAlert(SharedFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, bp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.ContactsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
							if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
									"Document Close button") != null) {
								appLog.info("Document is open");
							} else {
								appLog.info("Document is not opening");
								sa.assertTrue(false, "Document is not opening");
							}
							driver.close();
							driver.switchTo().window(ParentID);
						}else {
						appLog.info("No new window is open");
						sa.assertTrue(false, "No new window is open");
					}		
					}else{
						appLog.info("Document Page is not opening");
						sa.assertTrue(false,"Document Page is not opening");
					}
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
					switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));	
					if(bp.clickOnDocumentNameInAlert(StandardFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, bp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.ContactsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
							if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
									"Document Close button") != null) {
								appLog.info("Document is open");
							} else {
								appLog.info("Document is not opening");
								sa.assertTrue(false, "Document is not opening");
							}
							driver.close();
							driver.switchTo().window(ParentID);
						}else {
						appLog.info("No new window is open");
						sa.assertTrue(false, "No new window is open");
					}		
					}else{
						appLog.info("Document Page is not opening");
						sa.assertTrue(false,"Document Page is not opening");
					}
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
					switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));		
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}					
				}else{
			appLog.error("Not able to click on alert history link");
			sa.assertTrue(false, "Not able to click on alert history link");
				}	
			}else{
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}		
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}
	
	@Test
	public void M12tc017_VerifyShowPicklistAtHomePage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		SoftAssert sa =new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropdown", "All Except Profile Updates")){
			if(bp.verifyAlerts("Contact Profile Updated",hp.getHomeAlertScrollBox(60))){
				appLog.info("Contact Profile Updated alerts are displaying");
				sa.assertTrue(false, "Contact Profile Updated alerts are displaying");
			}else{
				appLog.error("Contact Profile Updated alerts are not displaying");			
			}
			if(bp.verifyAlerts("Firm Profile Updated", hp.getHomeAlertScrollBox(60))){
				appLog.info("Firm Profile Updated alerts are displaying");
				sa.assertTrue(false, "Firm Profile Updated alerts are displaying");
			}else{
				appLog.error("Firm Profile Updated alerts are not displaying");			
			}	
		}else{
			appLog.error("Not able to select show dropdown value");
			sa.assertTrue(false, "Not able to select dropdown value");
		}
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropdown", "Document Viewed")){
			if(bp.verifyAlerts("Document Viewed",hp.getHomeAlertScrollBox(60))){
				appLog.info("Document Viewed alerts are displaying");
			}else{
				appLog.error("Document Viewed alerts are not displaying");		
				sa.assertTrue(false, "Document Viewed alerts are not displaying");
			}
			}else{
			appLog.error("Not able to select show dropdown value");
			sa.assertTrue(false, "Not able to select dropdown value");
		}
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropdown", "Document Downloaded")){
			if(bp.verifyAlerts("Document Downloaded",hp.getHomeAlertScrollBox(60))){
				appLog.info("Document Downloaded alerts are displaying");
			}else{
				appLog.error("Document Downloaded alerts are not displaying");		
				sa.assertTrue(false, "Document Downloaded alerts are not displaying");
			}
			}else{
			appLog.error("Not able to select show dropdown value");
			sa.assertTrue(false, "Not able to select dropdown value");
		}
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropdown", "Document Uploaded")){
			if(bp.verifyAlerts("Document Uploaded",hp.getHomeAlertScrollBox(60))){
				appLog.info("Document Uploaded alerts are displaying");
			}else{
				appLog.error("Document Uploaded alerts are not displaying");		
				sa.assertTrue(false, "Document Uploaded alerts are not displaying");
			}
			}else{
			appLog.error("Not able to select show dropdown value");
			sa.assertTrue(false, "Not able to select dropdown value");
		}
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropdown", "Document Updated")){
			if(bp.verifyAlerts("Document Updated",hp.getHomeAlertScrollBox(60))){
				appLog.info("Document Updated alerts are displaying");
			}else{
				appLog.error("Document Updated alerts are not displaying");		
				sa.assertTrue(false, "Document Updated alerts are not displaying");
			}
			}else{
			appLog.error("Not able to select show dropdown value");
			sa.assertTrue(false, "Not able to select dropdown value");
		}
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropdown", "Contact Profile Updated")){
			if(bp.verifyAlerts("Contact Profile Updated",hp.getHomeAlertScrollBox(60))){
				appLog.info("Contact Profile Updated alerts are displaying");
			}else{
				appLog.error("Contact Profile Updated alerts are not displaying");		
				sa.assertTrue(false, "Contact Profile Updated alerts are not displaying");
			}
			}else{
			appLog.error("Not able to select show dropdown value");
			sa.assertTrue(false, "Not able to select dropdown value");
		}
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropdown", "Firm Profile Updated")){
			if(bp.verifyAlerts("Firm Profile Updated",hp.getHomeAlertScrollBox(60))){
				appLog.info("Firm Profile Updated alerts are displaying");
			}else{
				appLog.error("Firm Profile Updated alerts are not displaying");		
				sa.assertTrue(false, "Firm Profile Updated alerts are not displaying");
			}
			}else{
			appLog.error("Not able to select show dropdown value");
			sa.assertTrue(false, "Not able to select dropdown value");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
		}
	
	@Test
	public void M12tc018_VerifyShowPicklistAtFundPage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert sa =new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
		if(fp.clickOnCreatedFund(M12FundName1)){
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
		switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));
		if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
			switchToDefaultContent(driver);
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
			switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "All Except Profile Updates")){
				if(bp.verifyAlerts("Contact Profile Updated",fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Contact Profile Updated alerts are displaying");
					sa.assertTrue(false, "Contact Profile Updated alerts are displaying");
				}else{
					appLog.error("Contact Profile Updated alerts are not displaying");			
				}
				if(bp.verifyAlerts("Firm Profile Updated", fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Firm Profile Updated alerts are displaying");
					sa.assertTrue(false, "Firm Profile Updated alerts are displaying");
				}else{
					appLog.error("Firm Profile Updated alerts are not displaying");			
				}	
			}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "Document Viewed")){
				if(bp.verifyAlerts("Document Viewed",fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Document Viewed alerts are displaying");
				}else{
					appLog.error("Document Viewed alerts are not displaying");		
					sa.assertTrue(false, "Document Viewed alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "Document Downloaded")){
				if(bp.verifyAlerts("Document Downloaded",fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Document Downloaded alerts are displaying");
				}else{
					appLog.error("Document Downloaded alerts are not displaying");		
					sa.assertTrue(false, "Document Downloaded alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "Document Uploaded")){
				if(bp.verifyAlerts("Document Uploaded",fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Document Uploaded alerts are displaying");
				}else{
					appLog.error("Document Uploaded alerts are not displaying");		
					sa.assertTrue(false, "Document Uploaded alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "Document Updated")){
				if(bp.verifyAlerts("Document Updated",fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Document Updated alerts are displaying");
				}else{
					appLog.error("Document Updated alerts are not displaying");		
					sa.assertTrue(false, "Document Updated alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(5000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "Contact Profile Updated")){
				if(bp.verifyAlerts("Contact Profile Updated",fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Contact Profile Updated alerts are displaying");
				}else{
					appLog.error("Contact Profile Updated alerts are not displaying");		
					sa.assertTrue(false, "Contact Profile Updated alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(5000);
			if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "Firm Profile Updated")){
				if(bp.verifyAlerts("Firm Profile Updated",fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Firm Profile Updated alerts are displaying");
				}else{
					appLog.error("Firm Profile Updated alerts are not displaying");		
					sa.assertTrue(false, "Firm Profile Updated alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
		
		if(click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN)){
			appLog.info("Clicked on alert history cross icon");
		}else{
			appLog.error("not able to click on alert history cross icon");
			sa.assertTrue(false, "Not able to click on alert history cross icon");
		}		
		}else{
			appLog.error("Not able to click on alert history link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}
	
	@Test
	public void M12tc019_VerifyShowPicklistAtContactPage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert sa =new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.ContactTab)){
		if(cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)){
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
		switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));
		if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
			switchToDefaultContent(driver);
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
			switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "All Except Profile Updates")){
				if(bp.verifyAlerts("Contact Profile Updated",fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Contact Profile Updated alerts are displaying");
					sa.assertTrue(false, "Contact Profile Updated alerts are displaying");
				}else{
					appLog.error("Contact Profile Updated alerts are not displaying");			
				}
				if(bp.verifyAlerts("Firm Profile Updated", fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Firm Profile Updated alerts are displaying");
					sa.assertTrue(false, "Firm Profile Updated alerts are displaying");
				}else{
					appLog.error("Firm Profile Updated alerts are not displaying");			
				}	
			}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "Document Viewed")){
				if(bp.verifyAlerts("Document Viewed",fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Document Viewed alerts are displaying");
				}else{
					appLog.error("Document Viewed alerts are not displaying");		
					sa.assertTrue(false, "Document Viewed alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "Document Downloaded")){
				if(bp.verifyAlerts("Document Downloaded",fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Document Downloaded alerts are displaying");
				}else{
					appLog.error("Document Downloaded alerts are not displaying");		
					sa.assertTrue(false, "Document Downloaded alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "Document Uploaded")){
				if(bp.verifyAlerts("Document Uploaded",fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Document Uploaded alerts are displaying");
				}else{
					appLog.error("Document Uploaded alerts are not displaying");		
					sa.assertTrue(false, "Document Uploaded alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "Document Updated")){
				if(bp.verifyAlerts("Document Updated",fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Document Updated alerts are displaying");
				}else{
					appLog.error("Document Updated alerts are not displaying");		
					sa.assertTrue(false, "Document Updated alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "Contact Profile Updated")){
				if(bp.verifyAlerts("Contact Profile Updated",fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Contact Profile Updated alerts are displaying");
				}else{
					appLog.error("Contact Profile Updated alerts are not displaying");		
					sa.assertTrue(false, "Contact Profile Updated alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "Firm Profile Updated")){
				ThreadSleep(3000);
				if(bp.verifyAlerts("Firm Profile Updated",fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60))){
					appLog.info("Firm Profile Updated alerts are displaying");
				}else{
					appLog.error("Firm Profile Updated alerts are not displaying");		
					sa.assertTrue(false, "Firm Profile Updated alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
		
		if(click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN)){
			appLog.info("Clicked on alert history cross icon");
		}else{
			appLog.error("not able to click on alert history cross icon");
			sa.assertTrue(false, "Not able to click on alert history cross icon");
		}		
		}else{
			appLog.error("Not able to click on alert history link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}
			}else{
				appLog.error("Not able to click on created Contact");
				sa.assertTrue(false, "Not able to click on created Contact");
			}
		}else{
			appLog.error("Not able to click on Contact tab");
			sa.assertTrue(false, "Not able to click on Contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();		
	}
	
	@Test
	public void M12tc020_VerifySortingAtHomePage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		SoftAssert saa=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));
		if(bp.getDateSortIcon(60)!=null){
			appLog.info("By dafault sort icon is dispalying at date label");
		}else{
			appLog.info("By deafult sort icon is not displaying at date label");
			saa.assertTrue(false, "By deafult sort icon is not displayibg at date label");
		}
		saa=bp.verifySortingOnAllPagesInALert(PageName.HomePage, null);
		sa.combineAssertions(saa);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropdown", "Document Viewed")){
			if(bp.getActivityTypeSortIcon(20)!=null){
				appLog.info("Sorting icon is displaying at activity type coloumn");
				if(bp.checkSorting(SortOrder.Decending, bp.getActivityTypeColumnValue(PageName.HomePage, null))){
					appLog.info("Activity type coloumn is displaying in descending order");
				}else{
					appLog.error("Activity type coloumn is not displaying in descending order");
					saa.assertTrue(false, "Activity type coloumn is not displaying in descending order");
				}
			}else{
				appLog.error("Sorting icon is not displaying at activity type coloumn");
				saa.assertTrue(false, "Sorting icon is not displaying at activity type coloumn");
			}			
		}else{
			appLog.info("Not able to select show dropodwn value");
			sa.assertTrue(false, "Not able to select show dropdown value ");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getRangeDropdownOnHomeAlert(60), "Range dropdown", "All Time")){
			if(bp.getActivityTypeSortIcon(20)!=null){
				appLog.info("Sorting icon is displaying at activity type coloumn");
				if(bp.checkSorting(SortOrder.Decending, bp.getActivityTypeColumnValue(PageName.HomePage, null))){
					appLog.info("Activity type coloumn is displaying in descending order");
				}else{
					appLog.error("Activity type coloumn is not displaying in descending order");
					saa.assertTrue(false, "Activity type coloumn is not displaying in descending order");
				}
			}else{
				appLog.error("Sorting icon is not displaying at activity type coloumn");
				saa.assertTrue(false, "Sorting icon is not displaying at activity type coloumn");
			}			
		}else{
			appLog.info("Not able to select range dropodwn value");
			sa.assertTrue(false, "Not able to select range dropdown value ");
		}
		if(click(driver, bp.getWorkspaceLabelOnHomePageAlert(60), "Workspace label", action.SCROLLANDBOOLEAN)){
			if(isDisplayed(driver, bp.getWorkspaceSortIconOnHomePageAlert(60), "Visibility", 20, "Workspace sort icon")==null){
				appLog.info("Sorting icon is not displaying on workspace label");
			}else{
				appLog.error("Sorting icon is  displaying on workspace label");
				saa.assertTrue(false, "Sorting icon is  displaying on workspace label");
			}			
		}else{
			appLog.info("Not able to click on workspace label");
			saa.assertTrue(false, "Not able to click on workspace label");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();		
	}
	
	@Test
	public void M12tc021_VerifySortingAtFundPage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert saa=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1)){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
				saa=bp.verifySortingOnAllPagesInALert(PageName.FundsPage, Workspace.FundraisingWorkspace);
				sa.combineAssertions(saa);
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "Document Viewed")){
					if(bp.getActivityTypeSortIcon(20)!=null){
						appLog.info("Sorting icon is displaying at activity type coloumn");
						if(bp.checkSorting(SortOrder.Decending, bp.getActivityTypeColumnValue(PageName.FundsPage, Workspace.FundraisingWorkspace))){
							appLog.info("Activity type coloumn is displaying in descending order");
						}else{
							appLog.error("Activity type coloumn is not displaying in descending order");
							saa.assertTrue(false, "Activity type coloumn is not displaying in descending order");
						}
					}else{
						appLog.error("Sorting icon is not displaying at activity type coloumn");
						saa.assertTrue(false, "Sorting icon is not displaying at activity type coloumn");
					}			
				}else{
					appLog.info("Not able to select show dropodwn value");
					sa.assertTrue(false, "Not able to select show dropdown value ");
				}
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupRangeDropdown(Workspace.FundraisingWorkspace, 60), "Range dropdown", "All Time")){
					if(bp.getActivityTypeSortIcon(20)!=null){
						appLog.info("Sorting icon is displaying at activity type coloumn");
						if(bp.checkSorting(SortOrder.Decending, bp.getActivityTypeColumnValue(PageName.FundsPage, Workspace.FundraisingWorkspace))){
							appLog.info("Activity type coloumn is displaying in descending order");
						}else{
							appLog.error("Activity type coloumn is not displaying in descending order");
							saa.assertTrue(false, "Activity type coloumn is not displaying in descending order");
						}
					}else{
						appLog.error("Sorting icon is not displaying at activity type coloumn");
						saa.assertTrue(false, "Sorting icon is not displaying at activity type coloumn");
					}			
				}else{
					appLog.info("Not able to select range dropodwn value");
					sa.assertTrue(false, "Not able to select range dropdown value ");
				}	
				if(click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN))	{
					appLog.info("CLicked on alert history cross icon");
				}else{
					appLog.error("Not able to click on alert history cross icon");
					saa.assertTrue(false, "Not able to click on alert history cross icon");
				}				
				}else{
					appLog.error("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}
			}else{
				appLog.error("Not able to click on created fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			saa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();	
	}
	
	@Test
	public void M12tc022_VerifySortingAtContactPage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert saa=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)){
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
				saa=bp.verifySortingOnAllPagesInALert(PageName.ContactsPage, Workspace.FundraisingWorkspace);
				sa.combineAssertions(saa);
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropdown", "Document Viewed")){
					if(bp.getActivityTypeSortIcon(20)!=null){
						appLog.info("Sorting icon is displaying at activity type coloumn");
						if(bp.checkSorting(SortOrder.Decending, bp.getActivityTypeColumnValue(PageName.ContactsPage, Workspace.FundraisingWorkspace))){
							appLog.info("Activity type coloumn is displaying in descending order");
						}else{
							appLog.error("Activity type coloumn is not displaying in descending order");
							saa.assertTrue(false, "Activity type coloumn is not displaying in descending order");
						}
					}else{
						appLog.error("Sorting icon is not displaying at activity type coloumn");
						saa.assertTrue(false, "Sorting icon is not displaying at activity type coloumn");
					}			
				}else{
					appLog.info("Not able to select show dropodwn value");
					sa.assertTrue(false, "Not able to select show dropdown value ");
				}
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupRangeDropdown(Workspace.FundraisingWorkspace, 60), "Range dropdown", "All Time")){
					if(bp.getActivityTypeSortIcon(20)!=null){
						appLog.info("Sorting icon is displaying at activity type coloumn");
						ThreadSleep(5000);
						if(bp.checkSorting(SortOrder.Decending, bp.getActivityTypeColumnValue(PageName.ContactsPage, Workspace.FundraisingWorkspace))){
							appLog.info("Activity type coloumn is displaying in descending order");
						}else{
							appLog.error("Activity type coloumn is not displaying in descending order");
							saa.assertTrue(false, "Activity type coloumn is not displaying in descending order");
						}
					}else{
						appLog.error("Sorting icon is not displaying at activity type coloumn");
						saa.assertTrue(false, "Sorting icon is not displaying at activity type coloumn");
					}			
				}else{
					appLog.info("Not able to select range dropodwn value");
					sa.assertTrue(false, "Not able to select range dropdown value ");
				}	
				if(click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN))	{
					appLog.info("CLicked on alert history cross icon");
				}else{
					appLog.error("Not able to click on alert history cross icon");
					saa.assertTrue(false, "Not able to click on alert history cross icon");
				}				
				}else{
					appLog.error("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}
			}else{
				appLog.error("Not able to click on created Contact");
				saa.assertTrue(false, "Not able to click on created Contact");
			}
		}else{
			appLog.error("Not able to click on Contacts tab");
			saa.assertTrue(false, "Not able to click on Contacts tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();	
	}
	
	@Test
	public void M12tc023_VerifySortingInContactProfileUpdatedFirmProfileUpdatedPopUpFromHomePage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		HomePageBusineesLayer	hp=new HomePageBusineesLayer(driver);
		SoftAssert saa=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
		if(bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName)){
			if(isDisplayed(driver, bp.getFieldLabelSortIconOnProfileUpdatedPopupAlert(60), "Visibility", 20, "field Label Sort Icon On Profile Updated Popup Alert ")!=null){
				appLog.info("field Label Sort Icon On Profile Updated Popup Alert  is displaying by default on field label");
			}else{
				appLog.error("field Label Sort Icon On Profile Updated Popup Alert is not displaying by default on field label ");
				saa.assertTrue(false, "field Label Sort Icon On Profile Updated Popup Alert is not displaying by default on field label");
			}
			saa=bp.verifySortingOnProfileUpdatedAlerts(PageName.HomePage, null,profileUpdatedAlert.ContactProfileUpdated);
			sa.combineAssertions(saa);
		}else{
			appLog.error("Not able to click on contact profile updated link");
			saa.assertTrue(false, "Not able to click on contact profile updtaed link");
		}
		if(click(driver, bp.getContactProfileUpdateCloseButton(null, PageName.HomePage, 60), "Contact Profile Update close button", action.SCROLLANDBOOLEAN)){
			appLog.info("Clicked on contact profile updated popup close button");
		}else{
			appLog.error("Not able to click on contact profile updated close button");
			saa.assertTrue(false, "Not able to click on contact profile updated close button");
		}
	}else{
		appLog.error("Not able to select value from the show dropdown");
		saa.assertTrue(false, "Not able to select value from the show dropdown");
	}
	if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
		if(bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName)){
			if(isDisplayed(driver, bp.getFieldLabelSortIconOnProfileUpdatedPopupAlert(60), "Visibility", 20, "field Label Sort Icon On Profile Updated Popup Alert ")!=null){
				appLog.info("field Label Sort Icon On Profile Updated Popup Alert  is displaying by default on field label");
			}else{
				appLog.error("field Label Sort Icon On Profile Updated Popup Alert is not displaying by default on field label ");
				saa.assertTrue(false, "field Label Sort Icon On Profile Updated Popup Alert is not displaying by default on field label");
			}
			saa=bp.verifySortingOnProfileUpdatedAlerts(PageName.HomePage, null,profileUpdatedAlert.FirmProfileUpdated);
			sa.combineAssertions(saa);
		}else{
			appLog.error("Not able to click on firm profile updated link");
			saa.assertTrue(false, "Not able to click on firm profile updtaed link");
		}
		if(click(driver, bp.getFirmProfileUpdateCloseButton(null, PageName.HomePage, 60), "firm Profile Update close button", action.SCROLLANDBOOLEAN)){
			appLog.info("Clicked on firm profile updated popup close button");
		}else{
			appLog.error("Not able to click on firm profile updated close button");
			saa.assertTrue(false, "Not able to click on firm profile updated close button");
		}
	}else{
		appLog.error("Not able to select value from the show dropdown");
		saa.assertTrue(false, "Not able to select value from the show dropdown");
	}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();
	}
	
	@Test
	public void M12tc024_VerifySortingInContactProfileUpdatedFirmProfileUpdatedPopUpFromFundPage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert saa=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1)){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
						if(bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName)){
							if(isDisplayed(driver, bp.getFieldLabelSortIconOnProfileUpdatedPopupAlert(60), "Visibility", 20, "field Label Sort Icon On Profile Updated Popup Alert ")!=null){
								appLog.info("field Label Sort Icon On Profile Updated Popup Alert  is displaying by default on field label");
							}else{
								appLog.error("field Label Sort Icon On Profile Updated Popup Alert is not displaying by default on field label ");
								saa.assertTrue(false, "field Label Sort Icon On Profile Updated Popup Alert is not displaying by default on field label");
							}
							saa=bp.verifySortingOnProfileUpdatedAlerts(PageName.FundsPage, Workspace.FundraisingWorkspace,profileUpdatedAlert.ContactProfileUpdated);
							sa.combineAssertions(saa);
						}else{
							appLog.error("Not able to click on contact profile updated link");
							saa.assertTrue(false, "Not able to click on contact profile updtaed link");
						}
						if(click(driver, bp.getContactProfileUpdateCloseButton(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "Contact Profile Update close button", action.SCROLLANDBOOLEAN)){
							appLog.info("Clicked on contact profile updated popup close button");
						}else{
							appLog.error("Not able to click on contact profile updated close button");
							saa.assertTrue(false, "Not able to click on contact profile updated close button");
						}
					}else{
						appLog.error("Not able to select value from the show dropdown");
						saa.assertTrue(false, "Not able to select value from the show dropdown");
					}
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName)){
						if(isDisplayed(driver, bp.getFieldLabelSortIconOnProfileUpdatedPopupAlert(60), "Visibility", 20, "field Label Sort Icon On Profile Updated Popup Alert ")!=null){
							appLog.info("field Label Sort Icon On Profile Updated Popup Alert  is displaying by default on field label");
						}else{
							appLog.error("field Label Sort Icon On Profile Updated Popup Alert is not displaying by default on field label ");
							saa.assertTrue(false, "field Label Sort Icon On Profile Updated Popup Alert is not displaying by default on field label");
						}
						saa=bp.verifySortingOnProfileUpdatedAlerts(PageName.FundsPage, Workspace.FundraisingWorkspace,profileUpdatedAlert.FirmProfileUpdated);
						sa.combineAssertions(saa);
					}else{
						appLog.error("Not able to click on firm profile updated link");
						saa.assertTrue(false, "Not able to click on firm profile updtaed link");
					}
					if(click(driver, bp.getFirmProfileUpdateCloseButton(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "firm Profile Update close button", action.SCROLLANDBOOLEAN)){
						appLog.info("Clicked on firm profile updated popup close button");
					}else{
						appLog.error("Not able to click on firm profile updated close button");
						saa.assertTrue(false, "Not able to click on firm profile updated close button");
					}
				}else{
					appLog.error("Not able to select value from the show dropdown");
					saa.assertTrue(false, "Not able to select value from the show dropdown");
				}
				if(click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN))	{
					appLog.info("CLicked on alert history cross icon");
				}else{
					appLog.error("Not able to click on alert history cross icon");
					saa.assertTrue(false, "Not able to click on alert history cross icon");
				}				
				}else{
					appLog.error("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}
			}else{
				appLog.error("Not able to click on created fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			saa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();	
	}
	
	@Test
	public void M12tc025_VerifySortingInContactProfileUpdatedFirmProfileUpdatedPopUpFromContactPage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		SoftAssert saa=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)){
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
						if(bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName)){
							if(isDisplayed(driver, bp.getFieldLabelSortIconOnProfileUpdatedPopupAlert(60), "Visibility", 20, "field Label Sort Icon On Profile Updated Popup Alert ")!=null){
								appLog.info("field Label Sort Icon On Profile Updated Popup Alert  is displaying by default on field label");
							}else{
								appLog.error("field Label Sort Icon On Profile Updated Popup Alert is not displaying by default on field label ");
								saa.assertTrue(false, "field Label Sort Icon On Profile Updated Popup Alert is not displaying by default on field label");
							}
							saa=bp.verifySortingOnProfileUpdatedAlerts(PageName.ContactsPage, Workspace.FundraisingWorkspace,profileUpdatedAlert.ContactProfileUpdated);
							sa.combineAssertions(saa);
						}else{
							appLog.error("Not able to click on contact profile updated link");
							saa.assertTrue(false, "Not able to click on contact profile updtaed link");
						}
						if(click(driver, bp.getContactProfileUpdateCloseButton(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60), "Contact Profile Update close button", action.SCROLLANDBOOLEAN)){
							appLog.info("Clicked on contact profile updated popup close button");
						}else{
							appLog.error("Not able to click on contact profile updated close button");
							saa.assertTrue(false, "Not able to click on contact profile updated close button");
						}
					}else{
						appLog.error("Not able to select value from the show dropdown");
						saa.assertTrue(false, "Not able to select value from the show dropdown");
					}
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName)){
						if(isDisplayed(driver, bp.getFieldLabelSortIconOnProfileUpdatedPopupAlert(60), "Visibility", 20, "field Label Sort Icon On Profile Updated Popup Alert ")!=null){
							appLog.info("field Label Sort Icon On Profile Updated Popup Alert  is displaying by default on field label");
						}else{
							appLog.error("field Label Sort Icon On Profile Updated Popup Alert is not displaying by default on field label ");
							saa.assertTrue(false, "field Label Sort Icon On Profile Updated Popup Alert is not displaying by default on field label");
						}
						saa=bp.verifySortingOnProfileUpdatedAlerts(PageName.ContactsPage, Workspace.FundraisingWorkspace,profileUpdatedAlert.FirmProfileUpdated);
						sa.combineAssertions(saa);
					}else{
						appLog.error("Not able to click on firm profile updated link");
						saa.assertTrue(false, "Not able to click on firm profile updtaed link");
					}
					if(click(driver, bp.getFirmProfileUpdateCloseButton(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60), "firm Profile Update close button", action.SCROLLANDBOOLEAN)){
						appLog.info("Clicked on firm profile updated popup close button");
					}else{
						appLog.error("Not able to click on firm profile updated close button");
						saa.assertTrue(false, "Not able to click on firm profile updated close button");
					}
				}else{
					appLog.error("Not able to select value from the show dropdown");
					saa.assertTrue(false, "Not able to select value from the show dropdown");
				}
				if(click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN))	{
					appLog.info("CLicked on alert history cross icon");
				}else{
					appLog.error("Not able to click on alert history cross icon");
					saa.assertTrue(false, "Not able to click on alert history cross icon");
				}				
				}else{
					appLog.error("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}
			}else{
				appLog.error("Not able to click on created contact");
				saa.assertTrue(false, "Not able to click on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");
			saa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();			
	}

	@Test
	public void M12tc026_DeleteContactUpdateEmailIdOfContactAndVerifyErrorMessage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert saa=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)){
		if(click(driver, bp.getEditButton(60), "Edit button", action.SCROLLANDBOOLEAN)){
			if(sendKeys(driver, cp.getEmailId(60), "test@gmail.com", "Contact1 email id", action.SCROLLANDBOOLEAN)){
				if(click(driver, bp.getSaveButton(60), "Save button", action.SCROLLANDBOOLEAN)){
					appLog.info("click on save button");
					if(cp.getEmailIdViewMode(60).getText().trim().contains("test@gmail.com")){
						appLog.info("Email id get changed successfully");
						switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
						scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
								Workspace.FundraisingWorkspace.toString() + " View.");
						if (bp.verifyErrorMessageOnPage(
								ContactPageErrorMessage.errorMessageAfterAdminAndCRMUserRegistrationFundraisingWorkspace,
								cp.getErrorMessageAfterAdminAndCRMUserRegistrationFundRaisingWorkspace(60),
								"Error Message after admin Registration on Contact page for fundraising Workspace")) {
							appLog.info("Error Message is verified  on Contact page for fundraising workspace");
						} else {
							saa.assertTrue(false,
									"Error Message is not verified on Contact page for fundraising workspace.Expected:"
											+ ContactPageErrorMessage.errorMessageAfterAdminAndCRMUserRegistrationFundraisingWorkspace
											+ " Actual"
											+ getText(driver,
													cp.getErrorMessageAfterAdminAndCRMUserRegistrationFundRaisingWorkspace(60),
													"Error Message before admin registration on contact page", action.BOOLEAN));
						}					
					}else{
						appLog.info("Email id does not get changed successfully");
						saa.assertTrue(false, "Email id does not get changed successfully");
					}	
				}else{
					appLog.info("Not able to click on save button");
					saa.assertTrue(false, "Not able to click on save button");
				}			
				}else{
					appLog.info("Not able to enter value in email text box");
					saa.assertTrue(false, "Not able to enter value in email tetx box");
				}		
		}else{
			appLog.error("Not able to click on edit icon");
			saa.assertTrue(false, "Not able to click on edit icon");
		}
		}else{
				appLog.error("Not able to click on created contact");
				saa.assertTrue(false, "Not able to click on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");
			saa.assertTrue(false, "Not able to click on contact tab");
		}
	switchToDefaultContent(driver);
	if(bp.clickOnTab(TabName.ContactTab)){
		if(cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)){
			if (fp.clickUsingCssSelectorPath("input[value=Delete]", "delete button")) {
			//if(click(driver,cp.getDeleteButtonContactsPage(60), "Delete button", action.SCROLLANDBOOLEAN)){
			switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
			ThreadSleep(3000);
			if(cp.verifyDeletedContact(M12Contact2FirstName+" "+M12Contact2LastName)){
				appLog.info("Contact get deleted successfully ");
			}else{
				appLog.error("Contact does not get deleted successfully ");
				saa.assertTrue(false, "Contact does not get deleted successfully ");
			}			
		}else{
			appLog.error("Not able to click on delete button");
			saa.assertTrue(false, "Not able to click on delete button");
		}		
		}else{
			appLog.error("Not able to click on created contact");
			saa.assertTrue(false, "Not able to click on created contact");
		}
	}else{
		appLog.error("Not able to click on contact tab");
		saa.assertTrue(false, "Not able to click on contact tab");
	}
	if(bp.clickOnTab(TabName.HomeTab)){
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));	
		//List<WebElement> ele=BaseLib.edriver.findElements(By.cssSelector("a[title='"+M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName+"']"));
		List<WebElement> ele=FindElements(driver, "//a[text()='"+M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName+"']", "Contact name");		
		//if(click(driver, ele.get(0), "Contact1 name", action.SCROLLANDBOOLEAN)){
		scrollDownThroughWebelement(driver, ele.get(0), "contact name");
		boolean flag=true;
		try {
			clickUsingJavaScript(driver, ele.get(0), "contact name");
		}
		catch(Exception e) {
			flag=false;
			e.printStackTrace();
		}
		if(flag){
			String errorMessage=switchToAlertAndGetMessage(driver, 60, action.GETTEXT);   
			if(errorMessage.contains(ContactPageErrorMessage.ContactemailChangedErrorMessage)){
				appLog.info("Error Message is verified");
			}else{
				appLog.info("Error Message is not verified");
				sa.assertTrue(false, "Error Message is not verified");
			}
			switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
			if(isAlertPresent(driver)){
				appLog.error("Alert popup is displaying");
				saa.assertTrue(false, "Alert popup is displaying");
			}else{
				appLog.info("ALert popup get closed successfully");
			}
		}else{
			appLog.error("Not able to click on contact name");
			saa.assertTrue(false, "Not able to click on contact name");
		}	
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			if(bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName)){
		//if (fp.clickUsingCssSelectorPath("div#InvestorAccountACTALT a[title='Go to Firm']", "go to firm")) {
			if (clickUsingJavaScript(driver, hp.getGoToFirmButton(PageName.HomePage,null,60), "go to firm")) {
			//	if(click(driver, hp.getGoToFirmButton(PageName.HomePage,null,60), "Go to firm button", action.SCROLLANDBOOLEAN)){
			String errorMessage=switchToAlertAndGetMessage(driver, 60, action.GETTEXT);   
			if(errorMessage.contains(ContactPageErrorMessage.ContactemailChangedErrorMessage)){
				appLog.info("Error Message is verified");
			}else{
				appLog.info("Error Message is not verified");
				sa.assertTrue(false, "Error Message is not verified");
			}
			switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
			if(isAlertPresent(driver)){
				appLog.error("Alert popup is displaying");
				saa.assertTrue(false, "Alert popup is displaying");
			}else{
				appLog.info("ALert popup get closed successfully");
			}
			if(click(driver, hp.getFirmProfileUpdateCloseButton(null, PageName.HomePage, 60), "CLose button", action.SCROLLANDBOOLEAN)){
				appLog.info("Clicked on firm profile updated popup close button");
			}else{
				appLog.error("Not able to click on firm profile updtaed popup close buton");
				saa.assertTrue(false, "Not able to click on firm profile updtaed popup close buton");
			}
		}else{
			appLog.error("Not able to click on go to firm button");
			saa.assertTrue(false, "Not able to click on go to firm button");
		}		
			}else{
				appLog.error("Not able to click on Firm profile updated link");
				saa.assertTrue(false, "Not able to click on Firm profile updated link");
			}
		}else{
			appLog.error("Not able to select value from the show dropdown");
			saa.assertTrue(false, "Not able to select value from the show dropdown");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			if(bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName)){
		//if (fp.clickUsingCssSelectorPath("div#IDInvestorContactACTALT a[title='Go to Contact']", "go to contact")) {
				if (clickUsingJavaScript(driver, hp.getGoToContactButton(PageName.HomePage,null,60), "Go to Contact button")) {
				//if(click(driver, hp.getGoToContactButton(PageName.HomePage,null,60), "Go to Contact button", action.SCROLLANDBOOLEAN)){
			String errorMessage=switchToAlertAndGetMessage(driver, 60, action.GETTEXT);   
			if(errorMessage.contains(ContactPageErrorMessage.ContactemailChangedErrorMessage)){
				appLog.info("Error Message is verified");
			}else{
				appLog.info("Error Message is not verified");
				sa.assertTrue(false, "Error Message is not verified");
			}
			switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
			if(isAlertPresent(driver)){
				appLog.error("Alert popup is displaying");
				saa.assertTrue(false, "Alert popup is displaying");
			}else{
				appLog.info("ALert popup get closed successfully");
			}
			if(click(driver, hp.getContactProfileUpdateCloseButton(null, PageName.HomePage, 60), "CLose button", action.SCROLLANDBOOLEAN)){
				appLog.info("Clicked on Contact profile updated popup close button");
			}else{
				appLog.error("Not able to click on Contact profile updtaed popup close buton");
				saa.assertTrue(false, "Not able to click on Contact profile updtaed popup close buton");
			}
		}else{
			appLog.error("Not able to click on go to Contact button");
			saa.assertTrue(false, "Not able to click on go to Contact button");
		}		
			}else{
				appLog.error("Not able to click on contact profile updated link");
				saa.assertTrue(false, "Not able to click on contact profile updated link");
			}
		}else{
			appLog.error("Not able to select value from the show dropdown");
			saa.assertTrue(false, "Not able to select value from the show dropdown");
		}	
	}else{
		appLog.error("Not ableot click on home tab");
		saa.assertTrue(false, "Not able to click on home tab");
	}
		switchToDefaultContent(driver);	
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1)){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					List<WebElement> ele=FindElements(driver, "//a[text()='"+M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName+"']", "Contact name");		
					//List<WebElement> ele=BaseLib.edriver.findElements(By.cssSelector("a[title='"+M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName+"']"));
					scrollDownThroughWebelement(driver, ele.get(0), "contact name");
					boolean flag=true;
					try {
					clickUsingJavaScript(driver, ele.get(0), "contact name");
					}
					catch(Exception e) {
						flag=false;
						e.printStackTrace();
					}
					if(flag){
						String errorMessage=switchToAlertAndGetMessage(driver, 60, action.GETTEXT);   
						if(errorMessage.contains(ContactPageErrorMessage.ContactemailChangedErrorMessage)){
							appLog.info("Error Message is verified");
						}else{
							appLog.info("Error Message is not verified");
							sa.assertTrue(false, "Error Message is not verified");
						}
						switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
						if(isAlertPresent(driver)){
							appLog.error("Alert popup is displaying");
							saa.assertTrue(false, "Alert popup is displaying");
						}else{
							appLog.info("ALert popup get closed successfully");
						}
					}else{
						appLog.error("Not able to click on contact name");
						saa.assertTrue(false, "Not able to click on contact name");
					}	
					if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
						if(bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName)){
							//if (fp.clickUsingCssSelectorPath("div#IDInvestorAccountACTALTFR a[title='Go to Firm']", "go to firm")) {
							if (clickUsingJavaScript(driver,  fp.getGoToFirmButton(PageName.FundsPage,Workspace.FundraisingWorkspace,60), "go to firm")) {
							//if(click(driver, fp.getGoToFirmButton(PageName.FundsPage,Workspace.FundraisingWorkspace,60), "Go to firm button", action.SCROLLANDBOOLEAN)){
						String errorMessage=switchToAlertAndGetMessage(driver, 60, action.GETTEXT);   
						if(errorMessage.contains(ContactPageErrorMessage.ContactemailChangedErrorMessage)){
							appLog.info("Error Message is verified");
						}else{
							appLog.info("Error Message is not verified");
							sa.assertTrue(false, "Error Message is not verified");
						}
						switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
						if(isAlertPresent(driver)){
							appLog.error("Alert popup is displaying");
							saa.assertTrue(false, "Alert popup is displaying");
						}else{
							appLog.info("ALert popup get closed successfully");
						}
						if(click(driver, hp.getFirmProfileUpdateCloseButton(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "CLose button", action.SCROLLANDBOOLEAN)){
							appLog.info("Clicked on firm profile updated popup close button");
						}else{
							appLog.error("Not able to click on firm profile updtaed popup close buton");
							saa.assertTrue(false, "Not able to click on firm profile updtaed popup close buton");
						}
					}else{
						appLog.error("Not able to click on go to firm button");
						saa.assertTrue(false, "Not able to click on go to firm button");
					}		
						}else{
							appLog.error("Not able to click on Firm profile updated link");
							saa.assertTrue(false, "Not able to click on Firm profile updated link");
						}
					}else{
						appLog.error("Not able to select value from the show dropdown");
						saa.assertTrue(false, "Not able to select value from the show dropdown");
					}
					if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
						if(bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName)){
							//if (fp.clickUsingCssSelectorPath("div#IDInvestorContactACTALTFR a[title='Go to Contact']", "go to contact")) {
							if (clickUsingJavaScript(driver, fp.getGoToContactButton(PageName.FundsPage,Workspace.FundraisingWorkspace,60), "go to contact")) {
							//if(click(driver, fp.getGoToContactButton(PageName.FundsPage,Workspace.FundraisingWorkspace,60), "Go to Contact button", action.SCROLLANDBOOLEAN)){
						String errorMessage=switchToAlertAndGetMessage(driver, 60, action.GETTEXT);   
						if(errorMessage.contains(ContactPageErrorMessage.ContactemailChangedErrorMessage)){
							appLog.info("Error Message is verified");
						}else{
							appLog.info("Error Message is not verified");
							sa.assertTrue(false, "Error Message is not verified");
						}
						switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
						if(isAlertPresent(driver)){
							appLog.error("Alert popup is displaying");
							saa.assertTrue(false, "Alert popup is displaying");
						}else{
							appLog.info("ALert popup get closed successfully");
						}
						if(click(driver, hp.getContactProfileUpdateCloseButton(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "CLose button", action.SCROLLANDBOOLEAN)){
							appLog.info("Clicked on Contact profile updated popup close button");
						}else{
							appLog.error("Not able to click on Contact profile updtaed popup close buton");
							saa.assertTrue(false, "Not able to click on Contact profile updtaed popup close buton");
						}
					}else{
						appLog.error("Not able to click on go to Contact button");
						saa.assertTrue(false, "Not able to click on go to Contact button");
					}		
						}else{
							appLog.error("Not able to click on contact profile updated link");
							saa.assertTrue(false, "Not able to click on contact profile updated link");
						}
					}else{
						appLog.error("Not able to select value from the show dropdown");
						saa.assertTrue(false, "Not able to select value from the show dropdown");
					}				
					if(click(driver, bp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN)){
						appLog.info("Clicked on alert history aross icon");
					}else{
						appLog.error("Not able to click on alert history cross icon");
						saa.assertTrue(false, "Not able to click on alert history cross icon");
					}				
				}else{
					appLog.error("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}				
			}else{
				appLog.error("Not able to click on fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}		
		}else{
			appLog.error("Not able ot click on funds tab");
			saa.assertTrue(false, "Not able ot click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)){
				if(click(driver, bp.getEditButton(60), "Edit button", action.SCROLLANDBOOLEAN)){
					if(sendKeys(driver, cp.getEmailId(60),M12Contact1EmailId, "Contact1 email id", action.SCROLLANDBOOLEAN)){
						if(click(driver, bp.getSaveButton(60), "Save button", action.SCROLLANDBOOLEAN)){
							appLog.info("click on save button");
							if(cp.getEmailIdViewMode(60).getText().trim().contains(M12Contact1EmailId)){
								appLog.info("Email id get changed successfully");
								}else{
								appLog.info("Email id does not get changed successfully");
								saa.assertTrue(false, "Email id does not get changed successfully");
							}	
						}else{
							appLog.info("Not able to click on save button");
							saa.assertTrue(false, "Not able to click on save button");
						}			
						}else{
							appLog.info("Not able to enter value in email text box");
							saa.assertTrue(false, "Not able to enter value in email tetx box");
						}		
				}else{
					appLog.error("Not able to click on edit icon");
					saa.assertTrue(false, "Not able to click on edit icon");
				}
				}else{
						appLog.error("Not able to click on created contact");
						saa.assertTrue(false, "Not able to click on created contact");
					}	
		}else{
			appLog.info("Not able ot click on contact tab");
			saa.assertTrue(false, "Not able ot click on contact tab");
		}
		if(bp.clickOnTab(TabName.HomeTab)){
			if(hp.restoreValuesFromRecycleBin(M12Contact2FirstName+" "+M12Contact2LastName)){
				appLog.info("Able to restore value from the recycle bin:"+M12Contact2FirstName+" "+M12Contact2LastName);
			}else{
				appLog.error("Not able to restore value from the recycle bin:"+M12Contact2FirstName+" "+M12Contact2LastName);
				saa.assertTrue(false,"Not able to restore value from the recycle bin:"+M12Contact2FirstName+" "+M12Contact2LastName);
			}			
		}else{
			appLog.info("Not able to click on home tab");
			saa.assertTrue(false, "Not able to click on home tab");
		}
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)){
				appLog.info("Contact get restored successfully");
			}else{			
				appLog.error("Contact does not restored");
				saa.assertTrue(false, "Contact does not get restore");
			}			
		}else{
			appLog.error("Not able to click on contact tab");
			saa.assertTrue(false, "Not able to click on contact tab");
		}
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();
	} 
	
	@Test
	public void M12tc027_DeleteDocumentFromCRMSideAndVerifyErrorMessage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert saa=new SoftAssert();
		String CommonfolderPath=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String SharedfolderPath=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String StandardfolderPath=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1)){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
		if(fp.verifyFolderPathdummy(CommonfolderPath, null, null, M12FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)){
			if(bp.verifyDeleteViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, CommonDocument[1], 60, "Yes")){
				appLog.info(CommonDocument[1]+" file get deleted successfully");				
			}else{
				appLog.error(CommonDocument[1]+" file does not get deleted successfully");
				saa.assertTrue(false, CommonDocument[1]+" file does not get deleted successfully");
			}			
		}else{
			appLog.error("Folder path not verified");
			saa.assertTrue(false, "Folder path not verified");
		}
		if(fp.verifyFolderPathdummy(SharedfolderPath, null, null, M12FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)){
			if(bp.verifyDeleteViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, SharedDocument[1], 60, "Yes")){
				appLog.info(SharedDocument[1]+" file get deleted successfully");				
			}else{
				appLog.error(SharedDocument[1]+" file does not get deleted successfully");
				saa.assertTrue(false, SharedDocument[1]+" file does not get deleted successfully");
			}			
		}else{
			appLog.error("Folder path not verified");
			saa.assertTrue(false, "Folder path not verified");
		}		
		if(fp.verifyFolderPathdummy(StandardfolderPath, M12Institution1, null, M12FundName1, PageName.FundsPage, Workspace.FundraisingWorkspace, 60)){
			if(bp.verifyDeleteViaDownArrow(PageName.FundsPage, Workspace.FundraisingWorkspace, StandardDocument[1], 60, "Yes")){
				appLog.info(StandardDocument[1]+" file get deleted successfully");				
			}else{
				appLog.error(StandardDocument[1]+" file does not get deleted successfully");
				saa.assertTrue(false, StandardDocument[1]+" file does not get deleted successfully");
			}			
		}else{
			appLog.error("Folder path not verified");
			saa.assertTrue(false, "Folder path not verified");
		}		
			}else{
				appLog.error("Not able to click on fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}		
		}else{
			appLog.error("Not able ot click on funds tab");
			saa.assertTrue(false, "Not able ot click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",CommonDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")){
				appLog.info("Document Viewed Alert is displaying for doc:"+CommonDocument[1]);				
			}else{
				appLog.error("Document Viewed Alert is not displaying for doc:"+CommonDocument[1]);
				saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+CommonDocument[1]);
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising", CommonDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")){
				appLog.info("Document Downloaded Alert is displaying for doc:"+CommonDocument[1]);				
			}else{
				appLog.error("Document Downloaded Alert is not displaying for doc:"+CommonDocument[1]);
				saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+CommonDocument[1]);
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising", SharedDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")){
				appLog.info("Document Viewed Alert is displaying for doc:"+SharedDocument[1]);				
			}else{
				appLog.error("Document Viewed Alert is not displaying for doc:"+SharedDocument[1]);
				saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+SharedDocument[1]);
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising", SharedDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")){
				appLog.info("Document Downloaded Alert is displaying for doc:"+SharedDocument[1]);				
			}else{
				appLog.error("Document Downloaded Alert is not displaying for doc:"+SharedDocument[1]);
				saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+SharedDocument[1]);
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising", StandardDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")){
				appLog.info("Document Viewed Alert is displaying for doc:"+StandardDocument[1]);				
			}else{
				appLog.error("Document Viewed Alert is not displaying for doc:"+StandardDocument[1]);
				saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+StandardDocument[1]);
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising", StandardDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")){
				appLog.info("Document Downloaded Alert is displaying for doc:"+StandardDocument[1]);				
			}else{
				appLog.error("Document Downloaded Alert is not displaying for doc:"+StandardDocument[1]);
				saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+StandardDocument[1]);
			}
			if(bp.clickOnDocumentNameInAlert(CommonDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1, "Fundraising")){
				String ParentID = switchOnWindow(driver);
				if (ParentID != null) {
				if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
						"File not found") != null) {
					appLog.info("Document not found error is displaying");
				} else {
					appLog.error("Document not found error message is not displaying");
				saa.assertTrue(false, "Document not found error message is not displaying");
				}
				driver.close();
				driver.switchTo().window(ParentID);
		} else {
			appLog.info("No new window is open");
		saa.assertTrue(false, "No new window is open");
		}
			}else{
				appLog.error("Not able to click on document");
				saa.assertTrue(false, "Not able to click on document");
			}
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));
			if(bp.clickOnDocumentNameInAlert(SharedDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1, "Fundraising")){
				String ParentID = switchOnWindow(driver);
				if (ParentID != null) {
				if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
						"File not found") != null) {
					appLog.info("Document not found error is displaying");
				} else {
					appLog.error("Document not found error message is not displaying");
				saa.assertTrue(false, "Document not found error message is not displaying");
				}
				driver.close();
				driver.switchTo().window(ParentID);
		} else {
			appLog.info("No new window is open");
		saa.assertTrue(false, "No new window is open");
		}
			}else{
				appLog.error("Not able to click on document");
				saa.assertTrue(false, "Not able to click on document");
			}
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));
			if(bp.clickOnDocumentNameInAlert(StandardDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1, "Fundraising")){
				String ParentID = switchOnWindow(driver);
				if (ParentID != null) {
				if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
						"File not found") != null) {
					appLog.info("Document not found error is displaying");
				} else {
					appLog.error("Document not found error message is not displaying");
				saa.assertTrue(false, "Document not found error message is not displaying");
				}
				driver.close();
				driver.switchTo().window(ParentID);
		} else {
			appLog.info("No new window is open");
		saa.assertTrue(false, "No new window is open");
		}
			}else{
				appLog.error("Not able to click on document");
				saa.assertTrue(false, "Not able to click on document");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			saa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1)){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null,CommonDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")){
						appLog.info("Document Viewed Alert is displaying for doc:"+CommonDocument[1]);				
					}else{
						appLog.error("Document Viewed Alert is not displaying for doc:"+CommonDocument[1]);
						saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+CommonDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,CommonDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")){
						appLog.info("Document Downloaded Alert is displaying for doc:"+CommonDocument[1]);				
					}else{
						appLog.error("Document Downloaded Alert is not displaying for doc:"+CommonDocument[1]);
						saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+CommonDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null,SharedDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")){
						appLog.info("Document Viewed Alert is displaying for doc:"+SharedDocument[1]);				
					}else{
						appLog.error("Document Viewed Alert is not displaying for doc:"+SharedDocument[1]);
						saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+SharedDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,SharedDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")){
						appLog.info("Document Downloaded Alert is displaying for doc:"+SharedDocument[1]);				
					}else{
						appLog.error("Document Downloaded Alert is not displaying for doc:"+SharedDocument[1]);
						saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+SharedDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null,StandardDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")){
						appLog.info("Document Viewed Alert is displaying for doc:"+StandardDocument[1]);				
					}else{
						appLog.error("Document Viewed Alert is not displaying for doc:"+StandardDocument[1]);
						saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+StandardDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,StandardDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")){
						appLog.info("Document Downloaded Alert is displaying for doc:"+StandardDocument[1]);				
					}else{
						appLog.error("Document Downloaded Alert is not displaying for doc:"+StandardDocument[1]);
						saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+StandardDocument[1]);
					}
					if(bp.clickOnDocumentNameInAlert(CommonDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
						if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
						saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}
					}else{
						appLog.error("Not able to click on document");
						saa.assertTrue(false, "Not able to click on document");
					}
					switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(bp.clickOnDocumentNameInAlert(SharedDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
						if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
						saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);
						} else {
							appLog.info("No new window is open");
							saa.assertTrue(false, "No new window is open");
						}
					}else{
						appLog.error("Not able to click on document");
						saa.assertTrue(false, "Not able to click on document");
					}
					switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(bp.clickOnDocumentNameInAlert(StandardDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
						if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
						saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}
					}else{
						appLog.error("Not able to click on document");
						saa.assertTrue(false, "Not able to click on document");
					}
					switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(click(driver, bp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN)){
						appLog.info("Clicked on alert history aross icon");
					}else{
						appLog.error("Not able to click on alert history cross icon");
						saa.assertTrue(false, "Not able to click on alert history cross icon");
					}				
				}else{
					appLog.error("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}				
			}else{
				appLog.error("Not able to click on fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}		
		}else{
			appLog.error("Not able to click on funds tab");
			saa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)){
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,CommonDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")){
						appLog.info("Document Viewed Alert is displaying for doc:"+CommonDocument[1]);				
					}else{
						appLog.error("Document Viewed Alert is not displaying for doc:"+CommonDocument[1]);
						saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+CommonDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,CommonDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")){
						appLog.info("Document Downloaded Alert is displaying for doc:"+CommonDocument[1]);				
					}else{
						appLog.error("Document Downloaded Alert is not displaying for doc:"+CommonDocument[1]);
						saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+CommonDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,SharedDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")){
						appLog.info("Document Viewed Alert is displaying for doc:"+SharedDocument[1]);				
					}else{
						appLog.error("Document Viewed Alert is not displaying for doc:"+SharedDocument[1]);
						saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+SharedDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,SharedDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")){
						appLog.info("Document Downloaded Alert is displaying for doc:"+SharedDocument[1]);				
					}else{
						appLog.error("Document Downloaded Alert is not displaying for doc:"+SharedDocument[1]);
						saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+SharedDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,StandardDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")){
						appLog.info("Document Viewed Alert is displaying for doc:"+StandardDocument[1]);				
					}else{
						appLog.error("Document Viewed Alert is not displaying for doc:"+StandardDocument[1]);
						saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+StandardDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,StandardDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")){
						appLog.info("Document Downloaded Alert is displaying for doc:"+StandardDocument[1]);				
					}else{
						appLog.error("Document Downloaded Alert is not displaying for doc:"+StandardDocument[1]);
						saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+StandardDocument[1]);
					}
					if(bp.clickOnDocumentNameInAlert(CommonDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
						if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
						saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}
					}else{
						appLog.error("Not able to click on document");
						saa.assertTrue(false, "Not able to click on document");
					}
					switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(bp.clickOnDocumentNameInAlert(SharedDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
						if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
						saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}
					}else{
						appLog.error("Not able to click on document");
						saa.assertTrue(false, "Not able to click on document");
					}
					switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(bp.clickOnDocumentNameInAlert(StandardDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
						if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
						saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}
					}else{
						appLog.error("Not able to click on document");
						saa.assertTrue(false, "Not able to click on document");
					}
					switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if(click(driver, bp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN)){
						appLog.info("Clicked on alert history aross icon");
					}else{
						appLog.error("Not able to click on alert history cross icon");
						saa.assertTrue(false, "Not able to click on alert history cross icon");
					}				
				}else{
					appLog.error("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}	
			}else{
				appLog.info("Not able ot click on created contact");
				saa.assertTrue(false,"Not able ot click on created contact");
			}					
		}else{
			appLog.error("Not able to click on contact tab");
			saa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		saa.assertAll();
	}

	@Test
	public void M12tc028_1_VerifyNoNewDocumentViewedAlertWhenInvestorTriesToAccessAlreadyDeleteddocument(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		SoftAssert saa=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		saa = bp.writeAlertCountInExcel(M12FundName1, M12Contact1FirstName, M12Contact1LastName,
				Workspace.FundraisingWorkspace, "M12Contact1","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(saa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		bp = new BasePageBusinessLayer(driver);
		InvestorProfileBusinessLayer ip = new InvestorProfileBusinessLayer(driver);
		InvestorFirmPageBusinesslayer ifp=new InvestorFirmPageBusinesslayer(driver);
		DisclaimerPageBussinessLayer dp=new DisclaimerPageBussinessLayer(driver);
		AllFirmsPageBusinesslayer ap=new AllFirmsPageBusinesslayer(driver);
		int i=0;
		lp.investorLogin(M12Contact1EmailId, adminPassword);
		ThreadSleep(3000);
		if(click(driver, ifp.getRecentActivitiesTab(60), "Recent activities tab", action.SCROLLANDBOOLEAN)){
			String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
					excelLabel.UploadedFileCommon).split("<break>");
			String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
					excelLabel.UploadedFileShared).split("<break>");
			String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
					excelLabel.UploadedFileStandard).split("<break>");
			if(dp.clickOnDocument("Potential Investment", M12FundName1, CommonDocument[1], 60, ap.getScrollBox(60))){
				appLog.info("Clicked on document:"+CommonDocument[1]);
				String ParentID = switchOnWindow(driver);
				if (ParentID != null) {
					if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
							saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);				
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}				
			}else{
				appLog.error("Not able to click on document:"+CommonDocument[1]);
				saa.assertTrue(false,"Not able to click on document:"+CommonDocument[1]);
			}
			if(dp.clickOnDocument("Potential Investment", M12FundName1, SharedDocument[1], 60, ap.getScrollBox(60))){
				appLog.info("Clicked on document:"+SharedDocument[1]);
				String ParentID = switchOnWindow(driver);
				if (ParentID != null) {
					if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
							saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);				
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}				
			}else{
				appLog.error("Not able to click on document:"+SharedDocument[1]);
				saa.assertTrue(false,"Not able to click on document:"+SharedDocument[1]);
			}
			if(dp.clickOnDocument("Potential Investment", M12FundName1, StandardDocument[1], 60, ap.getScrollBox(60))){
				appLog.info("Clicked on document:"+StandardDocument[1]);
				String ParentID = switchOnWindow(driver);
				if (ParentID != null) {
					if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
							saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);				
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}				
			}else{
				appLog.error("Not able to click on document:"+StandardDocument[1]);
				saa.assertTrue(false,"Not able to click on document:"+StandardDocument[1]);
			}		
		}else{
			appLog.error("Not able to click on recent activities tab");
			saa.assertTrue(false, "Not able to click on recent activities tab");
		}
		if (click(driver, ip.getProfileLink(60), "Profile link", action.SCROLLANDBOOLEAN)) {
			if (click(driver, ip.getEditIcon(60), "Edit icon	", action.SCROLLANDBOOLEAN)) {
				if (click(driver, ip.getDailyDigestRadiobuttonEditMode(60), "No email radio button",
						action.SCROLLANDBOOLEAN)) {
					appLog.info("Able to click on Daily Digest email radio buton");
				} else {
					appLog.info("Not abel to click on no email radio buton");
					sa.assertTrue(false, "Not able to click on no email radio button");
				}
				if (click(driver, ip.getSaveButtonMyProfilePage(60), "Save button", action.SCROLLANDBOOLEAN)) {
					appLog.info("Clicked on save button");
					} else {
					appLog.error("Not able to click on svae button");
					sa.assertTrue(false, "Not able to click on save button");
				}
			} else {
				appLog.info("Not able to click on edit icon");
				sa.assertTrue(false, "Not able to click on edit icon");
			}
		} else {
			appLog.info("Not able to click on profile link");
			sa.assertTrue(false, "Not able to lcick on profile link");
		}
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12ContactPageALertCount) + i;
		int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund1", excelLabel.FundsPageALertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName,
				"M12Contact1", excelLabel.ContactPageALertCount);
		lp.investorLogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();	
	}
	
	@Test
	public void M12tc028_2_VerifyNoNewDocumentViewedAlertWhenInvestorTriesToAccessAlreadyDeleteddocument(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
				if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
				if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact1",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Noit able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();		
	}
	
	@Test
	public void M12tc029_UpdateDocumentFromCRMSideAndVerifyOpeningOfUpdatedDocumentFromAlerts(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		String CommonPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
		String StdPath=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
		String SharedfileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileShared);
		String CommonfileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileCommon);
		String StandardfileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
		String[] update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split("<break>");
		SoftAssert saa=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1)){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");	
				if(fp.updateFile(CommonPath, CommonfileName, null, null, FolderType.Common,System.getProperty("user.dir")+"//UploadFiles/Module12/FWR/ExistingUpdate/Common//"+update_fileName[0], null, null, ContentGridArrowKeyFunctions.Update,20, PageName.FundsPage,"Yes",null, Workspace.FundraisingWorkspace)) {
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");	
					if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {
					List<String> returnlist = compareMultipleListOnBasisOfTitle(driver, update_fileName[0], fp.getContentGridDocNameListOnBasisOfTitle(Workspace.FundraisingWorkspace, PageName.FundsPage));
						if (returnlist.isEmpty()) {
							appLog.info("updated file "+update_fileName[0]+" is successfully found");
						}
						else {
							appLog.error("the updated file's name is not found on content grid");
							saa.assertTrue(false, "the updated file's name is not found on content grid");
						}
					}else{
							appLog.error("Not able to click on refresh button");
							saa.assertTrue(false, "Not able to click on refresh button");
						}
				}else{
					appLog.error("Common folder file is not updated");
					saa.assertTrue(false, "Common folder  file is not updated");
				}
						if(fp.updateFile(shdPath, SharedfileName, null, null, FolderType.Shared,System.getProperty("user.dir")+"//UploadFiles/Module12/FWR/ExistingUpdate/Shared//"+update_fileName[1], null, null, ContentGridArrowKeyFunctions.Update,20, PageName.FundsPage,"Yes",null, Workspace.FundraisingWorkspace)) {
							switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
							scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
									Workspace.FundraisingWorkspace.toString() + " View.");	
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {
							List<String> returnlist = compareMultipleListOnBasisOfTitle(driver, update_fileName[1], fp.getContentGridDocNameListOnBasisOfTitle(Workspace.FundraisingWorkspace, PageName.FundsPage));
								if (returnlist.isEmpty()) {
									appLog.info("updated file "+update_fileName[1]+" is successfully found");
								}
								else {
									appLog.error("the updated file's name is not found on content grid");
									saa.assertTrue(false, "the updated file's name is not found on content grid");
								}
							}else{
									appLog.error("Not able to click on refresh button");
									saa.assertTrue(false, "Not able to click on refresh button");
								}
						}else{
							appLog.error("Shared folder file is not updated");
							saa.assertTrue(false, "Shared folder  file is not updated");
						}
						if(fp.updateFile(StdPath, StandardfileName, M12Institution1, null, FolderType.Standard,System.getProperty("user.dir")+"//UploadFiles/Module12/FWR/ExistingUpdate/Standard//"+update_fileName[2], multiInstance.AllInvestor, null, ContentGridArrowKeyFunctions.Update,20, PageName.FundsPage,"Yes",null, Workspace.FundraisingWorkspace)) {
							switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
							scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
									Workspace.FundraisingWorkspace.toString() + " View.");	
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.FundraisingWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {
							List<String> returnlist = compareMultipleListOnBasisOfTitle(driver, update_fileName[2], fp.getContentGridDocNameListOnBasisOfTitle(Workspace.FundraisingWorkspace, PageName.FundsPage));
								if (returnlist.isEmpty()) {
									appLog.info("updated file "+update_fileName[2]+" is successfully found");
								}
								else {
									appLog.error("the updated file's name is not found on content grid");
									saa.assertTrue(false, "the updated file's name is not found on content grid");
								}
							}else{
									appLog.error("Not able to click on refresh button");
									saa.assertTrue(false, "Not able to click on refresh button");
								}
						}else{
							appLog.error("Standard folder file is not updated");
							saa.assertTrue(false, "Standard folder  file is not updated");
						}		
			}else{
				appLog.error("Not able to click on created fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			saa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);		
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
			if(bp.clickOnDocumentNameInAlert(CommonfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1, "Fundraising")){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid)  || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				      	 if (fileName.contains(update_fileName[0].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
			if(bp.clickOnDocumentNameInAlert(SharedfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1, "Fundraising")){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[1].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[1] +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[1] +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }  else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
			if(bp.clickOnDocumentNameInAlert(StandardfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1, "Fundraising")){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[2].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }  else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}
		}else{
			appLog.info("Not able to click on home tab");
			saa.assertTrue(false, "Not able to click on home tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
				if(bp.clickOnDocumentNameInAlert(CommonfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.FundsPage, null, null)){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[0].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[0] +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }  else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			if(bp.clickOnDocumentNameInAlert(SharedfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.FundsPage, null, null)){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[1].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }   else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			if(bp.clickOnDocumentNameInAlert(StandardfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.FundsPage, null, null)){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[2].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }   else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}		
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			if(click(driver, bp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN)){
				appLog.info("Clicked on alert history cross icon");
			}else{
				appLog.error("Not able to click on alert history cross icon");
				saa.assertTrue(false, "Not able to click on alert history cross icon");
			}		
			}else{
				appLog.error("Not able ot click on alert history link");
				saa.assertTrue(false, "Not able ot click on alert history link");
			}
			}else{
				appLog.error("Not able to click on created fund");
				saa.assertTrue(false, "Not able ot click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			saa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
				if(bp.clickOnDocumentNameInAlert(CommonfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.ContactsPage, null, null)){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[0].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }   else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			if(bp.clickOnDocumentNameInAlert(SharedfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.ContactsPage, null, null)){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[1].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }   else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			if(bp.clickOnDocumentNameInAlert(StandardfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), PageName.FundsPage, null, null)){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[2].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }   else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}		
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			if(click(driver, bp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN)){
				appLog.info("Clicked on alert history cross icon");
			}else{
				appLog.error("Not able to click on alert history cross icon");
				saa.assertTrue(false, "Not able to click on alert history cross icon");
			}		
			}else{
				appLog.error("Not able ot click on alert history link");
				saa.assertTrue(false, "Not able ot click on alert history link");
			}
			}else{
				appLog.error("Not able to click on created contact");
				saa.assertTrue(false, "Not able to click on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");
			saa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		saa.assertAll();
		}
	
	@Test
	public void M12tc030_1_VerifyDocumentiewedDocumentDownloadedAertForUpdatedFile(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1, M12Contact2FirstName, M12Contact2LastName,
				Workspace.FundraisingWorkspace, "M12Contact2","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		DisclaimerPageBussinessLayer dp=new DisclaimerPageBussinessLayer(driver);
		AllFirmsPageBusinesslayer ap=new AllFirmsPageBusinesslayer(driver);
		InvestorFirmPageBusinesslayer ifp=new InvestorFirmPageBusinesslayer(driver);
		 sa=new SoftAssert();
		 int i=0;
		String[] update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, "M12tc029_UpdateDocumentFromCRMSideAndVerifyOpeningOfUpdatedDocumentFromAlerts", excelLabel.KeyWord_For_Search).split("<break>");
	System.err.println(update_fileName[0]);
	System.err.println(update_fileName[1]);
	System.err.println(update_fileName[2]);
		lp.investorLogin(M12Contact2EmailId, adminPassword);
		if (click(driver, ifp.getRecentActivitiesTab(60), "Recent Activities tab", action.SCROLLANDBOOLEAN)) {
			ThreadSleep(3000);
		if(dp.clickOnDocument("Potential Investment", M12FundName1, update_fileName[0], 60, ap.getScrollBox(60))){
			String parentID = switchOnWindow(driver);
			if (parentID != null) {
				i++;
				if (click(driver, ap.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
					appLog.info("Clicked on download link");
					i++;
					bp.clickOnDownloadDocumentCancelButton();
				} else {
					appLog.info("Not able to click on download link");
					sa.assertTrue(false, "Not able to click on download ink");
				}
				driver.close();
				driver.switchTo().window(parentID);
			} else {
				appLog.error("No new window is opening after clicking on the document name link of '"
						+ update_fileName[0] + "'.");
				sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
						+ update_fileName[0] + "'.");
			}		
			}else{
				appLog.info("Not able to click on document name");
				sa.assertTrue(false, "Not able to click on document name");
			}
		if(dp.clickOnDocument("Potential Investment", M12FundName1, update_fileName[1], 60, ap.getScrollBox(60))){
			String parentID = switchOnWindow(driver);
			if (parentID != null) {
				i++;
				if (click(driver, ap.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
					appLog.info("Clicked on download link");
					i++;
					bp.clickOnDownloadDocumentCancelButton();
				} else {
					appLog.info("Not able to click on download link");
					sa.assertTrue(false, "Not able to click on download ink");
				}
				driver.close();
				driver.switchTo().window(parentID);
			} else {
				appLog.error("No new window is opening after clicking on the document name link of '"
						+ update_fileName[1] + "'.");
				sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
						+ update_fileName[1] + "'.");
			}			
			}else{
				appLog.info("Not able to click on document name");
				sa.assertTrue(false, "Not able to click on document name");
			}
		ThreadSleep(2000);
		if(dp.clickOnDocument("Potential Investment", M12FundName1, update_fileName[2], 60, ap.getScrollBox(60))){
			String parentID = switchOnWindow(driver);
			if (parentID != null) {
				i++;
				if (click(driver, ap.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
					appLog.info("Clicked on download link");
					i++;
					bp.clickOnDownloadDocumentCancelButton();
				} else {
					appLog.info("Not able to click on download link");
					sa.assertTrue(false, "Not able to click on download ink");
				}
				driver.close();
				driver.switchTo().window(parentID);
			} else {
				appLog.error("No new window is opening after clicking on the document name link of '"
						+ update_fileName[2] + "'.");
				sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
						+ update_fileName[2] + "'.");
			}			
			}else{
				appLog.info("Not able to click on document name");
				sa.assertTrue(false, "Not able to click on document name");
			}
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12Contact2PageAlertCount) + i;
		int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
		System.out.println(ContactAlertCount);
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact2",
				excelLabel.ContactPageALertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund1", excelLabel.FundsPageALertCount);
		}else{
			appLog.error("Not able to click on recent activities tab");
			sa.assertTrue(false, "Not able to click on recent activities tab");
		}
		lp.investorLogout();
		sa.assertAll();			
		}
		
	@Test
	public void M12tc030_2_VerifyDocumentAlertForUpdatedFileAndCheckImpactCRMSIde(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String[] update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, "M12tc029_UpdateDocumentFromCRMSideAndVerifyOpeningOfUpdatedDocumentFromAlerts", excelLabel.KeyWord_For_Search).split("<break>");
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				update_fileName[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				update_fileName[1], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1, "Fundraising",
				update_fileName[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				update_fileName[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				update_fileName[1], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, 
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1, "Fundraising",
				update_fileName[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, 
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");

					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, update_fileName[0],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, update_fileName[1],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, update_fileName[2],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							update_fileName[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							update_fileName[1], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							update_fileName[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
						Workspace.FundraisingWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,
							update_fileName[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, update_fileName[1],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, update_fileName[2],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							update_fileName[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							update_fileName[1], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							update_fileName[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact2",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.FundraisingWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();			
	}

	@Test
	public void M12tc031_UpdateContactNameAndAccountNameFromCRMSideAndVerifyAlerts(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		InstitutionPageBusinessLayer ip=new InstitutionPageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if (bp.clickOnTab(TabName.ContactTab)) {
			appLog.info("Clicked on COntact Tab");
		if(cp.clickOnCreatedContact(M12Contact1FirstName, M12Contact1LastName, null)){
			if(click(driver, bp.getEditButton(60), "Edit button", action.SCROLLANDBOOLEAN)){
				if(sendKeys(driver, cp.getContactFirstName(60), M12Contact1FirstName+"FNNP", "Contact 1 first name", action.SCROLLANDBOOLEAN)){
				if(sendKeys(driver, cp.getContactLastName(60), M12Contact1LastName+"LNNP", "COntact1 last name", action.SCROLLANDBOOLEAN)){
					if(click(driver, bp.getSaveButton(60), "Save button", action.SCROLLANDBOOLEAN)){
						if(cp.getContactFullNameInViewMode(60).getText().trim().contains(M12Contact1FirstName+"FNNP"+" "+M12Contact1LastName+"LNNP")){
							appLog.info("Contact details updtaed successfully");
						}else{
							appLog.info("Contact details does not updtae successfully");
							sa.assertTrue(false, "Contact details does not updtae successfully");
						}					
					}else{
						appLog.info("Not able to click on save button");
						sa.assertTrue(false, "Not able to click on save button");
					}				
				}else{
					appLog.info("Not able to enter value in contact first name textbox");
					sa.assertTrue(false, "Not able to enter value in contact first name textbox");
				}				
				}else{
					appLog.info("Not able to enter value in contact first name textbox");
					sa.assertTrue(false, "Not able to enter value in contact first name textbox");
				}
			}else{
				appLog.info("Not able to lcik on edit button");
				sa.assertTrue(false, "Not able to click on edit button");
			}
			
		}else{
			appLog.info("Not able to click on created contact");
			sa.assertTrue(false, "Not able to click on created contact");
		}
		}else{
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		
		if(bp.clickOnTab(TabName.InstituitonsTab)){
			if(ip.clickOnCreatedInstitution(M12Institution1)){
				if(click(driver, bp.getEditButton(60), "Edit button", action.SCROLLANDBOOLEAN)){
					if(sendKeys(driver, ip.getLegalNameTextBox(60), M12Institution1+"NUP", "Institution name", action.SCROLLANDBOOLEAN)){
						if(click(driver, bp.getSaveButton(60), "Save buton", action.SCROLLANDBOOLEAN)){
							if(ip.getLegalNameLabelTextbox(60).getText().trim().contains(M12Institution1+"NUP")){
								appLog.info("Institution details get updtaed successfully");
							}else{
								appLog.info("Institution fdetails does not updated successfully");
								sa.assertTrue(false, "Institution details does not updtaed successfully");
							}							
						}else{
							appLog.info("Not able to click on save button");
							sa.assertTrue(false, "Not able to click on save button");
						}						
					}else{
						appLog.info("Not able to enter value in legal name text box");
						sa.assertTrue(false, "Not able to enter value in legal name text bo");
					}				
				}else{
					appLog.info("Not able to click on edit button");
					sa.assertTrue(false, "Not able to click on edit button");
				}			
			}else{
				appLog.info("Not able to click on craeted institution");
				sa.assertTrue(false, "Not able to click on created institution");
			}		
		}else{
			appLog.info("Not able to click on institutions tab");
			sa.assertTrue(false, "Not able o click on institutions tab");
		}
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1)){
			if(click(driver, bp.getEditButton(60), "Edit button", action.SCROLLANDBOOLEAN)){
					if(sendKeys(driver, fp.getFundName(60), M12FundName1+"NUP", "Fund name 1", action.SCROLLANDBOOLEAN)){
						if(click(driver, bp.getSaveButton(60), "Save button", action.SCROLLANDBOOLEAN)){
							if(fp.getFundNameInViewMode(60).getText().trim().contains(M12FundName1+"NUP")){
								appLog.info("Fund NAme get updated successfully");
							}else{
								appLog.info("Fund name does not get updated successfully");
								sa.assertTrue(false, "Fund Anme does not get updated successfully");
							}			
						}else{
							appLog.info("Not able to click on save button");
							sa.assertTrue(false, "Not able to click on save buton");
						}			
					}else{
						appLog.info("Not able to enter value in fund name text box");
						sa.assertTrue(false, "Not able to enter value in fund name text box");
					}				
						}	else{
							appLog.info("Not able to click on edit button");
							sa.assertTrue(false, "Not able to click on edit icon");				
						}
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				if (click(driver, fp.getInvestmentInfo(Workspace.FundraisingWorkspace), "Investment info",
						action.SCROLLANDBOOLEAN)) {
					if (click(driver, fp.getInvestmentInfoEdit(60), "investment info edit button",
							action.SCROLLANDBOOLEAN)) {
						if (sendKeys(driver, fp.getInvestmentInfoFundNameTxtbox(60), M12FundName1+"UP","Fund name text box",
								action.BOOLEAN)) {
							if (click(driver, fp.getInvestmentInfoSaveBtn(40), "Investment Info save button",
									action.SCROLLANDBOOLEAN)) {
								System.out.println(">>>>>>>>>>>>>>>>>>>>"+fp.getFirmName(60).getText());
								if (getText(driver, fp.getFirmName(60), "Fund Name", action.SCROLLANDBOOLEAN).trim()
										.contains(M12FundName1+"UP")) {
									appLog.info("Fund Name is successfully updated and verfied.");
								} else {
									appLog.error("Fund Name is not Updated.");
									sa.assertTrue(false, "Fund Name is not Updated.");
								}
							} else {
								appLog.error("Save button is not clicked so ,Updated fund name is not able to save.");
								sa.assertTrue(false,"Save button is not clicked so ,Updated fund name is not able to save.");
							}
						} else {
							appLog.error(
									"fund name text box is not visible on Investment Info edit mode so, not able to enter value.");
							sa.assertTrue(false,"fund name text box is not visible on Investment Info edit mode so, not able to enter value.");
						}
					} else {
						appLog.error("Investment Info edit button is not clickable so, not able to enter value.");
						sa.assertTrue(false,"Investment Info edit button is not clickable so, not able to enter value.");
					}
					if(click(driver, fp.getInvestmentInfoCancelButton(60), "Investment info cancel button", action.SCROLLANDBOOLEAN)){
						appLog.info("Clicked on cancel button");
					}else{
						appLog.info("Not able to click on cancel button");
						sa.assertTrue(false, "Not able to click on cancel button");						
					}
				} else {
					appLog.info("Not able to click on investment info link");
					sa.assertTrue(false, "Not able to click on investment info link");
				}
				switchToDefaultContent(driver);
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
			ThreadSleep(2000);
			SoftAssert saa1=bp.verifyUpdatedNameinALerts(PageName.HomePage, M12FundName1+"UP",columnName.fundName, null);
			sa.combineAssertions(saa1);	
			ThreadSleep(2000);
			WebElement ele =FindElement(driver, "//span[text()='Contact']", "contact column", action.SCROLLANDBOOLEAN, 30);
			if(click(driver, ele, "", action.BOOLEAN));
			ThreadSleep(5000);
			SoftAssert saa2=bp.verifyUpdatedNameinALerts(PageName.HomePage,M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName,columnName.contactName, null);
			sa.combineAssertions(saa2);	
			ThreadSleep(2000);
			 ele =FindElement(driver, "//span[text()='Firm']", "firm column", action.SCROLLANDBOOLEAN, 30);
			if(click(driver, ele, "", action.BOOLEAN));
			ThreadSleep(5000);
			SoftAssert saa3=bp.verifyUpdatedNameinALerts(PageName.HomePage,M12Contact1UpdatedFirmName,columnName.institutionName, null);
			sa.combineAssertions(saa3);	
		}else{
			appLog.error("Not able to click on home tab");
			sa.assertTrue(false, "Not able to click on home tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
					ThreadSleep(2000);
					switchToDefaultContent(driver);
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Home Page alert Frame");
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					ThreadSleep(2000);
					WebElement ele =FindElement(driver, "//span[text()='Contact']", "contact column", action.SCROLLANDBOOLEAN, 30);
					if(click(driver, ele, "", action.BOOLEAN));
					SoftAssert saa2=bp.verifyUpdatedNameinALerts(PageName.FundsPage,M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName,columnName.contactName, Workspace.FundraisingWorkspace);
					sa.combineAssertions(saa2);	
					ThreadSleep(2000);
					 ele =FindElement(driver, "//span[text()='Firm']", "firm column", action.SCROLLANDBOOLEAN, 30);
					if(click(driver, ele, "", action.BOOLEAN));
					SoftAssert saa3=bp.verifyUpdatedNameinALerts(PageName.FundsPage,M12Contact1UpdatedFirmName,columnName.institutionName, Workspace.FundraisingWorkspace);
					sa.combineAssertions(saa3);		
					
				}else{
					appLog.error("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}				
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}			
		}else{
			appLog.error("Not able ot click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP",M12Contact1LastName+"LNNP", null)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
					ThreadSleep(2000);
					switchToDefaultContent(driver);
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					ThreadSleep(2000);
					WebElement ele =FindElement(driver, "//span[text()='Contact']", "contact column", action.SCROLLANDBOOLEAN, 30);
					if(click(driver, ele, "", action.BOOLEAN));
					SoftAssert saa2=bp.verifyUpdatedNameinALerts(PageName.ContactsPage,M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName,columnName.contactName, Workspace.FundraisingWorkspace);
					sa.combineAssertions(saa2);	
					ThreadSleep(2000);
					 ele =FindElement(driver, "//span[text()='Firm']", "firm column", action.SCROLLANDBOOLEAN, 30);
					if(click(driver, ele, "", action.BOOLEAN));
					SoftAssert saa3=bp.verifyUpdatedNameinALerts(PageName.ContactsPage,M12Contact1UpdatedFirmName,columnName.institutionName, Workspace.FundraisingWorkspace);
					sa.combineAssertions(saa3);						
				}else{
					appLog.error("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}				
			}else{
				appLog.error("Not able to click on created Contact");
				sa.assertTrue(false, "Not able to click on created Contact");
			}			
		}else{
			appLog.error("Not able ot click on Contact tab");
			sa.assertTrue(false, "Not able to click on Contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();		
	}	
		
	@Test
	public void M12tc032_VerifyRemovalOfContactProfileUpdateAndFirmProfileUpdatedAlertAfterRemovingCompleteAccess(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert sa=new SoftAssert();
		String[] Document = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",excelLabel.UploadedFileStandard).split("<break>");
		WebElement ele=null;
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.ContactTab)){
		if(cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contacts Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
		if(click(driver, cp.getRemoveContactAccessButton(Workspace.FundraisingWorkspace, 60), "Remove contact access button", action.SCROLLANDBOOLEAN)){
			if (fp.clickUsingCssSelectorPath("a[title=Remove]", "remove button")) {	
			//ele=FindElement(driver,"//label[text()='"+M12FundName1+"UP"+"']/../..//a[@title='Remove']", "Fund 1 Remove link", action.SCROLLANDBOOLEAN, 60);
				//if(click(driver, ele, "Remove Link", action.SCROLLANDBOOLEAN)){
				String ParentID=switchOnWindow(driver);
				if(ParentID!=null){
					ThreadSleep(5000);
					switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
					driver.switchTo().window(ParentID);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 30));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30), "Fundraising Workspace Section view");
					if(click(driver, cp.getRemoveContactAccessButton(Workspace.FundraisingWorkspace, 60), "Remove contact access close button", action.SCROLLANDBOOLEAN)){
						List<WebElement> listOfWorkspace=FindElements(driver, "//span[contains(@id,'ContactDetail_grid1-cell-1-')]//label", "WorkspacesName");
						if(listOfWorkspace.contains(M12FundName1+"UP")){
							appLog.info("Contact access does not remove for fund "+M12FundName1+"UP");
							sa.assertTrue(false, "Contact access does not remove for fund "+M12FundName1+"UP");					
						}else{
							appLog.info("Contact access successfully remove for fund "+M12FundName1+"UP");
						}
						if(click(driver, cp.getRemoveContactAccessPopupCloseButton(Workspace.FundraisingWorkspace, 60), "Close button", action.SCROLLANDBOOLEAN)){
							appLog.info("Clicked on close button");
						}else{
							appLog.info("Not able to click on close button");
							sa.assertTrue(false, "Not able to click on close button");
						}
					}else{
						appLog.info("Not able to clcik on remove contact access close button");
						sa.assertTrue(false, "Not able to click on remove contact access close button");
					}	
			}else{
					appLog.info("No new window to switch");
					sa.assertTrue(false, "No new window to switch");
				}
				}else{
					appLog.info("Not bale ot click on remove link");
					sa.assertTrue(false, "Not able to click on remove link");
				}
		}else{
			appLog.error("Not able to clcik on remove contact access button");
			sa.assertTrue(false, "Not able to clcik on remove contact access button");
		}		
		}else{
			appLog.error("Not able to click on created contact");
			sa.assertTrue(false, "Not able ot click on created contact");
		}
		}else{
			appLog.error("Not able to click on contact tab so cannot remove contact access");
			sa.assertTrue(false, "Not able to click on contact tab so cannot remove contact access");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			if(hp.verifyAlertOnHomePage("Contact Profile Updated", M12FundName1+"UP", "Fundraising", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact2 is displaying");
				sa.assertTrue(false, "Contact profile related alert for contact2 is displaying");				
			}else{
				appLog.error("Contact profile related alert for contact2 is not displaying");
			}		
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			if(hp.verifyAlertOnHomePage("Firm Profile Updated", M12FundName1+"UP", "Fundraising", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact2 is displaying");
				sa.assertTrue(false, "Firm profile related alert for contact2 is displaying");				
			}else{
				appLog.error("Firm profile related alert for contact2 is not displaying");
			}		
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Document Viewed")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Fundraising", Document[2], M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, M12Contact2UpdatedFirmName, hp.getHomeAlertScrollBox(60), "date")){
				appLog.error("Document Viewed related alert for contact2 is displaying");
			}else{
				appLog.error("Document Viewed related alert for contact2 is not displaying");
				sa.assertTrue(false, "Document Viewed related alert for contact2 is not displaying");		
			}				
		}else{
			appLog.error("Not able to select Document Viewed option");
			sa.assertTrue(false, "Not able to select Document Viewed option");
		}
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Document Downloaded")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Fundraising", Document[2], M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, M12Contact2UpdatedFirmName, hp.getHomeAlertScrollBox(60), "date")){
				appLog.error("Document Downloaded related alert for contact2 is displaying");
			}else{
				appLog.error("Document Downloaded related alert for contact2 is not displaying");
				sa.assertTrue(false, "Document Downloaded related alert for contact2 is not displaying");		
			}				
		}else{
			appLog.error("Not able to select Document Viewed option");
			sa.assertTrue(false, "Not able to select Document Viewed option");
		}
		}else{
			appLog.error("Not able to clcik on home tab");
			sa.assertTrue(false, "Not able to click on tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Home Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "ALert history link", action.SCROLLANDBOOLEAN)){
					switchToDefaultContent(driver);
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Funds Page alert Frame");
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact2 is displaying");
					sa.assertTrue(false, "Contact profile related alert for contact2 is displaying");				
				}else{
					appLog.error("Contact profile related alert for contact2 is not displaying");
				}				
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
					ThreadSleep(3000);
					if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
						if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
							appLog.error("Firm profile related alert for contact 2 is displaying");
							sa.assertTrue(false, "Firm profile related alert for contact 2 is displaying");				
						}else{
							appLog.error("Firm profile related alert for contact 2 is not displaying");
						}				
					}else{
						appLog.error("Not able to select contact profile updtaed option");
						sa.assertTrue(false, "Not able to select contact profile updtaed option");
					}
					ThreadSleep(3000);
					if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Document Viewed")){
						if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, Document[2], M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, M12Contact2UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "date")){
							appLog.error("Document Viewed related alert for contact2 is displaying");
						}else{
							appLog.error("Document Viewed related alert for contact2 is not displaying");
							sa.assertTrue(false, "Document Viewed related alert for contact2 is not displaying");		
						}				
					}else{
						appLog.error("Not able to select Document Viewed option");
						sa.assertTrue(false, "Not able to select Document Viewed option");
					}
					ThreadSleep(3000);
					if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Document Downloaded")){
						if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, Document[2], M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, M12Contact2UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "date")){
							appLog.error("Document Downloaded related alert for contact2 is displaying");
						}else{
							appLog.error("Document Downloaded related alert for contact2 is not displaying");
							sa.assertTrue(false, "Document Downloaded related alert for contact2 is not displaying");		
						}				
					}else{
						appLog.error("Not able to select Document Downloaded option");
						sa.assertTrue(false, "Not able to select Document Downloaded option");
					}
				}else{
					appLog.error("Not able ot click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				if (bp.verifyErrorMessageOnPage(ContactPageErrorMessage.errorMessageAfterAdminAndCRMUserRegistrationFundraisingWorkspace,
						cp.getErrorMessageAfterAdminAndCRMUserRegistrationFundRaisingWorkspace(60),"Error Message after admin Registration on Contact page for fundraising Workspace")) {
					appLog.info("Error Message is verified  on Contact page for fundraising workspace");
				} else {
					sa.assertTrue(false,"Error Message is not verified on Contact page for fundraising workspace.Expected:"+ ContactPageErrorMessage.errorMessageAfterAdminAndCRMUserRegistrationFundraisingWorkspace
									+ " Actual"+ getText(driver,cp.getErrorMessageAfterAdminAndCRMUserRegistrationFundRaisingWorkspace(60),	"Error Message before admin registration on contact page", action.BOOLEAN));
				}				
			}else{
				appLog.error("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}				
		}else{
			appLog.error("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
		}

	@Test
	public void M12tc033_RemoveContactsPartialAccessAndVerifyAlerts(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert sa=new SoftAssert();
		WebElement ele=null;
		String[] docNameFund1=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileShared).split("<break>");
		String[] docNameFund2=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileShared).split("<break>");
		String docNameFR=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc014_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.ContactTab)){
		if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contacts Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
		if(click(driver, cp.getRemoveContactAccessButton(Workspace.FundraisingWorkspace, 60), "Remove contact access button", action.SCROLLANDBOOLEAN)){
				//ele=FindElement(driver,"//label[text()='"+M12FundName2+"']/../..//a[@title='Remove']", "Fund 2 Remove link", action.SCROLLANDBOOLEAN, 60);
				//if(click(driver, ele, "Remove Link", action.SCROLLANDBOOLEAN)){
			if (fp.clickUsingCssSelectorPath("a[title=Remove]", "remove button")) {	
					
			String ParentID=switchOnWindow(driver);
				if(ParentID!=null){
					ThreadSleep(5000);
					switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
					driver.switchTo().window(ParentID);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 30));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30), "Fundraising Workspace Section view");
					if(click(driver, cp.getRemoveContactAccessButton(Workspace.FundraisingWorkspace, 60), "Remove contact access close button", action.SCROLLANDBOOLEAN)){
						List<WebElement> listOfWorkspace=FindElements(driver, "//span[contains(@id,'ContactDetail_grid1-cell-1-')]//label", "WorkspacesName");
						if(listOfWorkspace.contains(M12FundName2)){
							appLog.info("Contact access does not remove for fund "+M12FundName2);
							sa.assertTrue(false, "Contact access does not remove for fund "+M12FundName2);					
						}else{
							appLog.info("Contact access successfully remove for fund "+M12FundName2);
							}											
						if(click(driver, cp.getRemoveContactAccessPopupCloseButton(Workspace.FundraisingWorkspace, 60), "Close button", action.SCROLLANDBOOLEAN)){
							appLog.info("Clicked on close button");
						}else{
							appLog.info("Not able to click on close button");
							sa.assertTrue(false, "Not able to click on close button");
						}
					}else{
						appLog.info("Not able to clcik on remove contact access close button");
						sa.assertTrue(false, "Not able to click on remove contact access close button");
					}	
			}else{
					appLog.info("No new window to switch");
					sa.assertTrue(false, "No new window to switch");
				}
				}else{
					appLog.info("Not bale ot click on remove link");
					sa.assertTrue(false, "Not able to click on remove link");
				}
		}else{
			appLog.error("Not able to clcik on remove contact access button");
			sa.assertTrue(false, "Not able to clcik on remove contact access button");
		}		
		}else{
			appLog.error("Not able to click on created contact");
			sa.assertTrue(false, "Not able ot click on created contact");
		}
		}else{
			appLog.error("Not able to click on contact tab so cannot remove contact access");
			sa.assertTrue(false, "Not able to click on contact tab so cannot remove contact access");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 30));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.FundraisingWorkspace, 30), "Fundraising Workspace Section view");
				if(fp.clickOnInstituionFolder(M12Institution1, Workspace.FundraisingWorkspace, 60)){
					if(fp.revokeContactAccess(M12Contact1EmailId, Workspace.FundraisingWorkspace)){
						appLog.info("Remove contact access of contact1 successfully");					
					}else{
						appLog.error("Not able to remove contact access of contact1");
						sa.assertTrue(false, "Not able to remove contact access of contact1");
					}			
				}else{
					appLog.error("Not able to cick on institution name so cannot remove contact access");
					sa.assertTrue(false, "Not able to cick on institution name so cannot remove contact access");
				}
			}else{
				appLog.error("Not ableto click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");
				sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
			}	
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 1 is not displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
			}
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Document Viewed")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 1");
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Fundraising", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 and fund 2");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 and fund 2");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 2");
			}		
		}else{
			appLog.error("Not able to select Document Viewed option");
			sa.assertTrue(false, "Not able to select Document Viewed option");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Document Downloaded")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document Downloaded alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 and fund 1");
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Fundraising", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 and fund 2");
			}else{
				appLog.error("Document Downloaded alerts are not displaying for contact 1 and fund 2");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 and fund 2");
			}					
		}else{
			appLog.error("Not able to select Document Downloaded option");
			sa.assertTrue(false, "Not able to select Document Downloaded option");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Document Uploaded")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UP", "Fundraising", docNameFR, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 and fund 1");
			}
		}else{
			appLog.error("Not able to select Document Uploaded option");
			sa.assertTrue(false, "Not able to select Document Uploaded option");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Document Updated")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UP", "Fundraising", docNameFR, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 and fund 1");
			}				
		}else{
			appLog.error("Not able to select Document Updated option");
			sa.assertTrue(false, "Not able to select Document Updated option");
		}
		}else{
			appLog.error("Not able to click on home tab");
			sa.assertTrue(false, "Not able to click on home tab");
		}		
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
				switchToDefaultContent(driver);
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Contact profile related alert for contact 1 is displaying");
					}else{
						appLog.error("Contact profile related alert for contact 1 is not displaying");
						sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
					}	
				}else{
					appLog.error("Not able to select contact profile updtaed option");
					sa.assertTrue(false, "Not able to select contact profile updtaed option");
				}
				if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}						
				}else{
					appLog.error("Not able to select Firm profile updtaed option");
					sa.assertTrue(false, "Not able to select Firm profile updtaed option");
				}		
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Document Viewed")){
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
						appLog.info("Document alerts are displaying for contact 1 and fund 1");
					}else{
						appLog.error("Document alerts are not displaying for contact 1 and fund 1");
						sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 1");
					}								
				}else{
					appLog.error("Not able to select Document Viewed option");
					sa.assertTrue(false, "Not able to select Document Viewed option");
				}	
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Document Downloaded")){
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
						appLog.info("Document Downloaded alerts are displaying for contact 1 and fund 1");
					}else{
						appLog.error("Document Downloaded alerts are not displaying for contact 1 and fund 1");
						sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 and fund 1");
					}								
				}else{
					appLog.error("Not able to select Document Downloaded option");
					sa.assertTrue(false, "Not able to select Document Downloaded option");
				}
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Document Updated")){
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated", null,null, docNameFR, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
						appLog.info("Document Updated alerts are displaying for contact 1 and fund 1");
					}else{
						appLog.error("Document Updated alerts are not displaying for contact 1 and fund 1");
						sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 and fund 1");
					}								
				}else{
					appLog.error("Not able to select Document Updated option");
					sa.assertTrue(false, "Not able to select Document Updated option");
				}
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Document Uploaded")){
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null,null, docNameFR, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
						appLog.info("Document Uploaded alerts are displaying for contact 1 and fund 1");
					}else{
						appLog.error("Document Uploaded alerts are not displaying for contact 1 and fund 1");
						sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 and fund 1");
					}								
				}else{
					appLog.error("Not able to select Document Uploaded option");
					sa.assertTrue(false, "Not able to select Document Uploaded option");
				}
			}else{
				appLog.error("Not able to click on alert history link");
				sa.assertTrue(false, "Not able to click on alert history link");
			}				
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName2)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
				switchToDefaultContent(driver);
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
						String errMsg = hp.getErrorMessage(60).getText().trim();
						if (errMsg.equalsIgnoreCase(HomePageErrorMessage.nodataToDisplayErroMessage)) {
							appLog.info("Contact profile related alerts are not displaying");
						} else {
							appLog.info("Contact profile related alerts are  displaying");
							sa.assertTrue(false, "Contact profile related alerts are  displaying");
						}
				}else{
					appLog.error("Not able to select contact profile updtaed option");
					sa.assertTrue(false, "Not able to select contact profile updtaed option");
				}
				if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
						String errMsg = hp.getErrorMessage(60).getText().trim();
						if (errMsg.equalsIgnoreCase(HomePageErrorMessage.nodataToDisplayErroMessage)) {
							appLog.info("Firm profile related alerts are not displaying");
						} else {
							appLog.info("Firm profile related alerts are  displaying");
							sa.assertTrue(false, "Firm profile related alerts are  displaying");
						}					
				}else{
					appLog.error("Not able to select Firm profile updtaed option");
					sa.assertTrue(false, "Not able to select Firm profile updtaed option");
				}		
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Document Viewed")){
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
						appLog.info("Document alerts are displaying for contact 1 and fund 2");
					}else{
						appLog.error("Document alerts are not displaying for contact 1 and fund 2");
						sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 2");
					}								
				}else{
					appLog.error("Not able to select Document viewed option");
					sa.assertTrue(false, "Not able to select Document viewed option");
				}
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Document Downloaded")){
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null,null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
						appLog.info("Document Downloaded alerts are displaying for contact 1 and fund 2");
					}else{
						appLog.error("Document Downloaded alerts are not displaying for contact 1 and fund 2");
						sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 and fund 2");
					}								
				}else{
					appLog.error("Not able to select Document Downloaded option");
					sa.assertTrue(false, "Not able to select Document Downloaded option");
				}
			}else{
				appLog.error("Not able to click on alert history link");
				sa.assertTrue(false, "Not able to click on alert history link");
			}				
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
				switchToDefaultContent(driver);
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Contact profile related alert for contact 1 is displaying");
					}else{
						appLog.error("Contact profile related alert for contact 1 is not displaying");
						sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
					}	
				}else{
					appLog.error("Not able to select contact profile updtaed option");
					sa.assertTrue(false, "Not able to select contact profile updtaed option");
				}
				if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}		
				}else{
					appLog.error("Not able to select Firm profile updtaed option");
					sa.assertTrue(false, "Not able to select Firm profile updtaed option");
				}		
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Document Viewed")){
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
						appLog.info("Document alerts are displaying for contact 1 and fund 1");
					}else{
						appLog.error("Document alerts are not displaying for contact 1 and fund 1");
						sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 1");
					}	
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
						appLog.info("Document alerts are displaying for contact 1 and fund 2");
					}else{
						appLog.error("Document alerts are not displaying for contact 1 and fund 2");
						sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 2");
					}	
				}else{
					appLog.error("Not able to select Document Viewed option");
					sa.assertTrue(false, "Not able to select Document Viewed option");
				}	
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Document Downloaded")){
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
						appLog.info("Document Downloaded alerts are displaying for contact 1 and fund 1");
					}else{
						appLog.error("Document Downloaded alerts are not displaying for contact 1 and fund 1");
						sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 1");
					}	
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null,null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
						appLog.info("Document Downloaded alerts are displaying for contact 1 and fund 2");
					}else{
						appLog.error("Document Downloaded alerts are not displaying for contact 1 and fund 2");
						sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 and fund 2");
					}	
				}else{
					appLog.error("Not able to select Document Downloaded option");
					sa.assertTrue(false, "Not able to select Document Downloaded option");
				}	
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Document Uploaded")){
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null,null, docNameFR, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
						appLog.info("Document Uploaded alerts are displaying for contact 1 and fund 1");
					}else{
						appLog.error("Document Uploaded alerts are not displaying for contact 1 and fund 1");
						sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 and fund 1");
					}	
				}else{
					appLog.error("Not able to select Document Uploaded option");
					sa.assertTrue(false, "Not able to select Document Uploaded option");
				}	
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Document Updated")){
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated", null,null, docNameFR, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
						appLog.info("Document Updated alerts are displaying for contact 1 and fund 1");
					}else{
						appLog.error("Document Updated alerts are not displaying for contact 1 and fund 1");
						sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 and fund 1");
					}	
				}else{
					appLog.error("Not able to select Document Updated option");
					sa.assertTrue(false, "Not able to select Document Updated option");
				}	
			}else{
				appLog.error("Not able to click on alert history link");
				sa.assertTrue(false, "Not able to click on alert history link");
			}				
			}else{
				appLog.error("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
	}
	
	@Test
	public void M12tc034_DeleteLastInvitedFolderAndVerifyAlerts(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		SoftAssert sa=new SoftAssert();
		String[] docNameFund1=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc014_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			if(click(driver, fp.getManageFolderIcon(Workspace.FundraisingWorkspace, 60), "Manage folder icon", action.SCROLLANDBOOLEAN)){
				String id=fp.getCreatedFolderId(shdPath, PageName.FundsPage,60);
				if(id!=null) {
					if(fp.clickOnDeleteFolderButton(id)) {
						ThreadSleep(2000);
						if(click(driver, fp.getFolderDeleteYesBtn(Workspace.FundraisingWorkspace,PageName.ContactsPage, 60), "folder delete yes button", action.SCROLLANDBOOLEAN)) {
							appLog.info("clicked on "+shdPath+" folder delete yes button");
							if(click(driver, fp.getManageFolderCloseButton(Workspace.FundraisingWorkspace, 30), "manage folder close icon", action.SCROLLANDBOOLEAN)) {
								appLog.info("clicked on manage folder close icon");
							}else {
								appLog.error("Not able to click on manage folder close icon");
								sa.assertTrue(false, "Not able to click on manage folder close icon");
							}
						}else {
							appLog.error("Not able to click on folder delete Yes button so cannot delete foler: "+shdPath);
							sa.assertTrue(false, "Not able to click on folder delete Yes button so cannot delete foler: "+shdPath);
						}
					}else {
						appLog.error("Not able to click on folder : "+shdPath+" delete icon so cannot delete folder in fundraising workspace");
						sa.assertTrue(false, "Not able to click on folder : "+shdPath+" delete icon so cannot delete folder in fundraising workspace");
					}
				}else {
					appLog.error("Not able to get child folder: "+shdPath+" id cannot delete it");
					sa.assertTrue(false, "Not able to get child folder: "+shdPath+" id cannot delete it");
				}			
			}else{
				appLog.error("Not able to click on manage folder icon");
				sa.assertTrue(false, "Not able to click on manage folder icon");
			}	
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on craeted fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
			switchToDefaultContent(driver);
			if(bp.clickOnTab(TabName.HomeTab)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
			if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
				if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 1 is displaying");
					sa.assertTrue(false, "Contact profile related alert for contact 1 is  displaying");
				}else{
					appLog.error("Contact profile related alert for contact 1 is not displaying");				
				}	
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
				if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Firm profile related alert for contact 1 is displaying");
					sa.assertTrue(false, "Firm profile related alert for contact 1 is displaying");
				}else{
					appLog.error("Firm profile related alert for contact 1 is not displaying");					
				}
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Fundraising", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
					appLog.info("Document alerts are displaying for contact 1");
				}else{
					appLog.error("Document alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document alerts are not  displaying for contact 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Fundraising", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1");
				}else{
					appLog.error("Document Downloaded alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1");
				}
				if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UP", "Fundraising", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UP", "Fundraising", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1");
				}			
			}else{
				appLog.error("Not able to select Document Viewed option");
				sa.assertTrue(false, "Not able to select Document Viewed option");
			}		
			}else{
				appLog.error("Not ableot click on home tab");
				sa.assertTrue(false, "Not able to click on home tabs");
			}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
		if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 1 is displaying");
					sa.assertTrue(false, "Contact profile related alert for contact 1 is  displaying");
				}else{
					appLog.error("Contact profile related alert for contact 1 is not displaying");				
				}	
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
				if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Firm profile related alert for contact 1 is displaying");
					sa.assertTrue(false, "Firm profile related alert for contact 1 is  displaying");
				}else{
					appLog.error("Firm profile related alert for contact 1 is not displaying");				
				}	
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
	}
	
	@Test
	public void M12tc035_AgainInviteContactAndVerifyAlerts(){
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		SoftAssert sa=new SoftAssert();
		String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		String[] docNameFund1=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc014_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				ThreadSleep(5000);
				if(click(driver, fp.getManageFolderIcon(Workspace.FundraisingWorkspace, 60), "Manage folder", action.SCROLLANDBOOLEAN)){
					if(click(driver, fp.getAllFolderAddIcon(Workspace.FundraisingWorkspace, 30), "Add folder button", action.BOOLEAN)){
					if(click(driver, fp.getFolderTypeRadioButton(FolderType.Shared, Workspace.FundraisingWorkspace, PageName.ManageFolderPopUp, 30),"Shared radio button",action.BOOLEAN)) {
						appLog.info("Shared folder radio button is verified.");
					if(sendKeys(driver, fp.getParentFolderNameTextBox(Workspace.FundraisingWorkspace, PageName.ManageFolderPopUp, 30), shdPath.split("\\(")[0], "Parent folder name text box", action.BOOLEAN)){
							if(click(driver, fp.getParentFolderSaveButton(Workspace.FundraisingWorkspace, PageName.ManageFolderPopUp, 30), "Save button", action.BOOLEAN)){
							if (click(driver, fp.getManageFolderCloseButton(Workspace.FundraisingWorkspace, 30), "close button on manage folder window", action.SCROLLANDBOOLEAN)) {
								appLog.info("close button on manage folder window is clicked");
									}else {
										appLog.error("close button is not clickable");
										sa.assertTrue(false, "close button is not clickable");
									}
								}else {
									appLog.error("save button on manage approvals window is not clickable");
									sa.assertTrue(false, "save button on manage approvals window is not clickable");
								}
							}else {
							appLog.error("folder name text box is not visible on manage folder window");
							sa.assertTrue(false, "folder name text box is not visible on manage folder window");
						}
						}else {
							appLog.error("radio button for Shared folder is not clickable");
							sa.assertTrue(false, "radio button for Shared folder is not clickable");
						}
					}else {
						appLog.error("add icon for all folders is not clickable");
						sa.assertTrue(false, "add icon for all folders is not clickable");
					}
				}else{
					appLog.error("Not able to click on mange folder");
					sa.assertTrue(false, "Not able to cretaed shared folder");
				}
				switchToDefaultContent(driver);
				if (fp.inviteContact(environment, mode, M12Institution1, M12Contact1EmailId, shdPath,
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution2, M12Contact2EmailId, shdPath,
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				}else{
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");			
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");			
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 1 is not  displaying");
			}	
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 2 is displaying");			
			}else{
				appLog.error("Contact profile related alert for contact 2 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 2 is not  displaying");
			}
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 1 is not displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
			}
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 2 is not displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
			}
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Fundraising", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 2");
			}	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Fundraising", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document Downloaded alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 2");
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UP", "Fundraising", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund 1");
			}	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UP", "Fundraising", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1" );
				sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 for fund 1");
			}			
		}else{
			appLog.error("Not able to select All Alerts option");
			sa.assertTrue(false, "Not able to select All Alerts option");
		}		
		}else{
			appLog.error("Not able to click on home tab");
			sa.assertTrue(false, "Not able to click on home tabs");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
		if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 1 is displaying");
				}else{
					appLog.error("Contact profile related alert for contact 1 is not displaying");	
					sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
				}				
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 2 is displaying");
				}else{
					appLog.error("Contact profile related alert for contact 2 is not displaying");	
					sa.assertTrue(false, "Contact profile related alert for contact 2 is not displaying");
				}
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 2 is displaying");
					}else{
						appLog.error("Firm profile related alert for contact 2 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
					}
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
		if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contacts Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Contact profile related alert for contact 1 is displaying");
					}else{
						appLog.error("Contact profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
					}							
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}				
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1");
				}
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1");
				}
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}				
			}else{
				appLog.error("Not able to clcik on created contact");
				sa.assertTrue(false, "Not able to clcik on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");			
			sa.assertTrue(false, "Not able to click on contact tab");			
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
		}
	
	@Test
	public void M12tc036_CloseWorkspaceAndVerifyAlerts(){
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		SoftAssert sa=new SoftAssert();
		lp.CRMLogin(superAdminUserName, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				String expandIcon = getAttribute(driver, bp.getWorkspaceExpandIcon(60), "WorkspaceIcon", "title");
				if (expandIcon.equalsIgnoreCase("Show Section - Workspace")) {
					if (click(driver, bp.getWorkspaceExpandIcon(60), "Workspace Expand Icon",
							action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on workspace expand icon");
					} else {
						appLog.info("Not able to click on workspace expand icon");
						sa.assertTrue(false, "Not able to click on workspace expand icon");
					}
				} else {
					appLog.info("Workspace is in expanded form");
				}
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				ThreadSleep(5000);
		if(fp.closeWorkSpace(Workspace.FundraisingWorkspace, 60)){
			appLog.error("Workspace get closed successfully");
		}else{
			appLog.error("Not able to close the workspace");
			sa.assertTrue(false, "Not able to close the workspace");
		}
		}else{
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");			
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		driver.close();
		config(browserToLaunch);
		 fp=new FundsPageBusinessLayer(driver);
		 bp=new BasePageBusinessLayer(driver);
		 hp=new HomePageBusineesLayer(driver);
		 lp=new LoginPageBusinessLayer(driver);
		 sa=new SoftAssert();
		 lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String[] docNameFund1=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc014_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");
				sa.assertTrue(false, "Contact profile related alert for contact 1 is  displaying");
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");				
			}	
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 2 is displaying");
				sa.assertTrue(false, "Contact profile related alert for contact 2 is  displaying");
			}else{
				appLog.error("Contact profile related alert for contact 2 is not displaying");				
			}	
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 1 is displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 1 is not displaying");					
			}
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 2 is displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 2 is not displaying");					
			}
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Fundraising", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 and fund 2");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 and fund 2");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 2");
			}	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 and fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Fundraising", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 and fund 2");
			}else{
				appLog.error("Document Downloaded alerts are not displaying for contact 1 and fund 2");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 and fund 2");
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UP", "Fundraising", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 and fund 1");
			}	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UP", "Fundraising", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Updated alerts are  displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document Updated alerts are  not displaying for contact 1 and fund 1");
			}			
		}else{
			appLog.error("Not able to select All Alerts option");
			sa.assertTrue(false, "Not able to select All Alerts option");
		}		
		switchToDefaultContent(driver);
	if(bp.clickOnTab(TabName.FundsTab)){
		if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
	if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
		if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");
				sa.assertTrue(false, "Contact profile related alert for contact 1 is  displaying");
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");				
			}
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 2 is displaying");
					sa.assertTrue(false, "Contact profile related alert for contact 2 is  displaying");
				}else{
					appLog.error("Contact profile related alert for contact 2 is not displaying");				
				}
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
			if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 1 is displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 1 is not displaying");					
			}
			if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 2 is displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 2 is not displaying");					
			}
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "All Alerts")){
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 1");
			}								
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Uploaded alerts are not  displaying for contact 1 for fund 1");
			}	
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 for fund 1");
			}			
		}else{
			appLog.error("Not able to select All ALerts option");
			sa.assertTrue(false, "Not able to select All ALerts  option");
		}				
	}else{
		appLog.error("Not able to click on alert histoy link");
		sa.assertTrue(false, "Not able to click on alert history link");
	}
		}else{
			appLog.error("Not able to click on created fund");
			sa.assertTrue(false, "Not able to click on created fund");
		}
	}else{
		appLog.error("Not able to click on funds tab");
		sa.assertTrue(false, "Not able to click on funds tab");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();			
	}
	
	@Test
	public void M12tc037_AgainInviteContactAfterCloseWorkspaceAndVerifyAlerts(){
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		SoftAssert sa=new SoftAssert();
		String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		String[] docNameFund1=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc014_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				if (fp.inviteContact(environment, mode, M12Institution2, M12Contact2EmailId, shdPath,
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution1, M12Contact1EmailId, null, FolderType.Standard,
						"Upload", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution2, M12Contact2EmailId, null, FolderType.Standard,
						"Upload", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
					sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact2FirstName + " "
						+ M12Contact2LastName + "'.");
				}
				}else{
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");			
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");			
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 1 is not  displaying");
			}	
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 2 is displaying");			
			}else{
				appLog.error("Contact profile related alert for contact 2 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 2 is not  displaying");
			}
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 1 is not displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
			}
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 2 is not displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
			}
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Fundraising", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document alerts are not  displaying for contact 1 for fund 2");
			}	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Fundraising", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document Downloaded alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 2");
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UP", "Fundraising", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1 ");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund 1");
			}	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UP", "Fundraising", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Updated alerts are not  displaying for contact 1 for fund 1");
			}			
		}else{
			appLog.error("Not able to select All Alerts option");
			sa.assertTrue(false, "Not able to select All Alerts option");
		}		
		}else{
			appLog.error("Not ableot click on home tab");
			sa.assertTrue(false, "Not able to click on home tabs");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
		if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 1 is displaying ");
				}else{
					appLog.error("Contact profile related alert for contact 1 is not displaying");	
					sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
				}
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 2 is displaying ");
				}else{
					appLog.error("Contact profile related alert for contact 2 is not displaying");	
					sa.assertTrue(false, "Contact profile related alert for contact 2 is not displaying");
				}
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 2 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 2 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
					}			
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact  1 for fund 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Updated alerts are not  displaying for contact 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
		if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Contact profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Contact profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
					}			
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}	
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 for fund 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}				
			}else{
				appLog.error("Not able to clcik on created contact");
				sa.assertTrue(false, "Not able to clcik on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");			
			sa.assertTrue(false, "Not able to click on contact tab");			
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
	}

	@Test
	public void M12tc038_RemoveInvestorFromManageInvestorAndVerifyAlerts(){
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		SoftAssert sa=new SoftAssert();
		String[] docNameFund1=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc014_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
		if(click(driver, fp.getManageInvestorIcon(Workspace.FundraisingWorkspace, 60), "Mange investor", action.SCROLLANDBOOLEAN)){
		WebElement	ele = FindElement(driver, "//div[@title='" + M12Institution1 + "']/../..//input",
					"Institution 1 checkbox", action.SCROLLANDBOOLEAN, 60);
			if (click(driver, ele, "Instituition 1 checkbox", action.SCROLLANDBOOLEAN)) {
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				if (click(driver,fp.getManageInvestorDeletedPopupCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on Cross icon");
						ThreadSleep(2000);
						if(click(driver, fp.getManageInvestorDoneButton(Workspace.FundraisingWorkspace, 60), "Done button", action.SCROLLANDBOOLEAN)){
							appLog.info("Clicked on done button");
						}else{
							appLog.error("Not able to click on done button");
							sa.assertTrue(false, "Not able to click on done button");
						}
					} else {
						appLog.info("Not able to click on Cross icon");
						sa.assertTrue(false, "Not able to click on Cross icon");
					}
				} else {
					appLog.info("Not able to click on institution1 checkbox");
					sa.assertTrue(false, "Not able to click on institution1 checkbox");
				}
		}else{
			appLog.error("Not able to click on manage investor icon");
			sa.assertTrue(false, "Not able to click on manage investor icon");
		}
			}else{
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");			
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");
				sa.assertTrue(false, "Contact profile related alert for contact 1 is  displaying");
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");				
			}	
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact 2 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 2 is not displaying");
			}
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 1 is displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 1 is not displaying");					
			}
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 2 is not displaying");	
				sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
			}
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund1");
			}				
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Fundraising", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 2");
			}	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund1");
			}				
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Fundraising", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document Downloaded alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 2" );
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UP", "Fundraising", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 for fund1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund1");
				sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund1");
			}	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UP", "Fundraising", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 for fund1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 for fund1");
				sa.assertTrue(false, "Document Updated alerts are  not displaying for contact 1 for fund1");
			}			
		}else{
			appLog.error("Not able to select All Alerts option");
			sa.assertTrue(false, "Not able to select All Alerts option");
		}		
		}else{
			appLog.error("Not able to click on home tab");
			sa.assertTrue(false, "Not able to click on home tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
	if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
		if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
			if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");
				sa.assertTrue(false, "Contact profile related alert for contact 1 is  displaying");
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");				
			}	
			if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact 2 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 2 is not displaying");
			}	
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		ThreadSleep(2000);
		if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
			ThreadSleep(2000);
			if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Firm profile related alert for contact 1 is displaying");
					sa.assertTrue(false, "Firm profile related alert for contact 1 is  displaying");
				}else{
					appLog.error("Firm profile related alert for contact 1 is not displaying");				
				}	
				if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
					appLog.error("Firm profile related alert for contact 2 is displaying");
				}else{
					appLog.error("Firm profile related alert for contact 2 is not displaying");		
					sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
				}	
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		ThreadSleep(2000);
		if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "All Alerts")){
			ThreadSleep(3000);
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 1");
			}								
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Uploaded alerts are not  displaying for contact 1 for fund 1");
			}	
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 for fund 1");
			}			
		}else{
			appLog.error("Not able to select All ALerts option");
			sa.assertTrue(false, "Not able to select All ALerts  option");
		}				
	}else{
		appLog.error("Not able to click on alert histoy link");
		sa.assertTrue(false, "Not able to click on alert history link");
	}
		}else{
			appLog.error("Not able to click on created fund");
			sa.assertTrue(false, "Not able to click on created fund");
		}			
		}else{
			appLog.error("Not able to click on fund tab");
			sa.assertTrue(false, "Not able to click on fund tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();		
	}
	
	@Test
	public void M12tc039_AgainAddInvestorThroughManageInvestorInTheContactAndVerifyAlerts(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		SoftAssert sa=new SoftAssert();
		String[] docNameFund1=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc014_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
		if(click(driver, fp.getManageInvestorIcon(Workspace.FundraisingWorkspace, 60), "Mange investor", action.SCROLLANDBOOLEAN)){
		WebElement	ele = FindElement(driver, "//div[@title='" + M12Institution1+"NUP" + "']/../..//input",
					"Institution 1 checkbox", action.SCROLLANDBOOLEAN, 60);
			if (click(driver, ele, "Instituition 1 checkbox", action.SCROLLANDBOOLEAN)) {
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				if (click(driver,fp.getManageInvestorAddedPopupCrossIcon(Workspace.FundraisingWorkspace, 60),
							"Cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on Cross icon");
						ThreadSleep(2000);
						if(click(driver, fp.getManageInvestorDoneButton(Workspace.FundraisingWorkspace, 60), "Done button", action.SCROLLANDBOOLEAN)){
							appLog.info("Clicked on done button");
							switchToDefaultContent(driver);
							if (fp.inviteContact(environment, mode, M12Institution1+"NUP", M12Contact1EmailId, null, FolderType.Standard,"Upload", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
								appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "+ M12Contact1LastName + "'.");
							} else {
								appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "+ M12Contact1LastName + "'.");
								sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "+ M12Contact1LastName + "'.");
							}		
						}else{
							appLog.error("Not able to click on done button");
							sa.assertTrue(false, "Not able to click on done button");
						}
					} else {
						appLog.info("Not able to click on Cross icon");
						sa.assertTrue(false, "Not able to click on Cross icon");
					}
				} else {
					appLog.info("Not able to click on institution1 checkbox");
					sa.assertTrue(false, "Not able to click on institution1 checkbox");
				}
		}else{
			appLog.error("Not able to click on manage investor icon");
			sa.assertTrue(false, "Not able to click on manage investor icon");
		}
			}else{
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");			
		}		
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");			
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 1 is not  displaying");
			}	
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 2 is displaying");			
			}else{
				appLog.error("Contact profile related alert for contact 2 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 2 is not  displaying");
			}
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 1 is not displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 1 is  not displaying");
			}
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 2 is not displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
			}
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Fundraising", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document alerts are not   displaying for contact 1 for fund 2");
			}	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Fundraising", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document Downloaded alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document Downloaded alerts are  not displaying for contact 1 for fund 2");
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UP", "Fundraising", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Uploaded alerts are  not displaying for contact 1 for fund 1");
			}	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UP", "Fundraising", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 for fund 1");
			}			
		}else{
			appLog.error("Not able to select All Alerts option");
			sa.assertTrue(false, "Not able to select All Alerts option");
		}		
		}else{
			appLog.error("Not ableot click on home tab");
			sa.assertTrue(false, "Not able to click on home tabs");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
		if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
			if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 1 is displaying ");
				}else{
					appLog.error("Contact profile related alert for contact 1 is not displaying");	
					sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
				}
			if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 2 is displaying ");
			}else{
				appLog.error("Contact profile related alert for contact 2 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 2 is not displaying");
			}
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			ThreadSleep(2000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}
				if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
					appLog.error("Firm profile related alert for contact 2 is displaying ");
				}else{
					appLog.error("Firm profile related alert for contact 2 is not displaying");	
					sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
				}
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}	
			ThreadSleep(2000);
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact  1 for fund 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
		if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Contact profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Contact profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
					}					
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}	
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}
			ThreadSleep(2000);
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Viewed alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Viewed  alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Viewed alerts are not displaying for contact 1 for fund 1");
				}
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
				}
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 for fund 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}				
			}else{
				appLog.error("Not able to clcik on created contact");
				sa.assertTrue(false, "Not able to clcik on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");			
			sa.assertTrue(false, "Not able to click on contact tab");			
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();		
	}
	
	@Test
	public void M12tc040_ClearWorkspaceAndVerifyAlerts() {
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(superAdminUserName, adminPassword);
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1 + "NUP")) {
				String expandIcon = getAttribute(driver, bp.getWorkspaceExpandIcon(60), "WorkspaceIcon", "title");
				if (expandIcon.equalsIgnoreCase("Show Section - Workspace")) {
					if (click(driver, bp.getWorkspaceExpandIcon(60), "Workspace Expand Icon",
							action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on workspace expand icon");
					} else {
						appLog.info("Not able to click on workspace expand icon");
						sa.assertTrue(false, "Not able to click on workspace expand icon");
					}
				} else {
					appLog.info("Workspace is in expanded form");
				}
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				ThreadSleep(5000);
				click(driver, fp.getWorkSpaceClearBtn(Workspace.FundraisingWorkspace, 10), "workspace clear button", action.SCROLLANDBOOLEAN);
					
				String parentID=switchOnWindow(driver);
				if(parentID!=null) {
					if (fp.clickUsingCssSelectorPath("#create_savebtn a[title=Yes]", "yes button")) {
					//if(click(driver, getCloseAndClearWorkSpaceYesBtn(timeOut), "workspace clear pop up Yes button ", action.SCROLLANDBOOLEAN)) {
						ThreadSleep(8000);
						if (isAlertPresent(driver)) {
							appLog.info("workspace has been successfully clear");
							String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
							switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
							if(msg.contains(FundsPageErrorMessage.clearWorkSpaceMsg)) {
								appLog.info(FundsPageErrorMessage.clearWorkSpaceMsg);
								driver.switchTo().window(parentID);
							}else {
								appLog.error("clear Workspace Error Message is not matched. Expected: "+FundsPageErrorMessage.closeWorkspaceMsg);
							}
							driver.switchTo().window(parentID);
						} else {
							driver.close();
							appLog.error(" clear Workspace alert message is not displayed");
							driver.switchTo().window(parentID);
						}
					}else {
						driver.close();
						appLog.error("Not able to click on clear workspace Yes button so cannot clear workspace");
						driver.switchTo().window(parentID);
					}
					driver.navigate().refresh();
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					if (isDisplayed(driver, fp.getBuildFundraisinWorkspaceButton(60), "Visibility", 60,
							"Build fundraising workspace button") != null) {
						appLog.info("workspace get cleared successfully");
					} else {
						appLog.error("Workspace not get cleared successfully");
						sa.assertTrue(false, "Workspace not get cleared successfully");
					}
				} else {
					appLog.error("Not able to clear the workspace");
					sa.assertTrue(false, "Not able to clear the workspace");
				}
			} else {
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		} else {
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName2)) {
				String expandIcon = getAttribute(driver, bp.getWorkspaceExpandIcon(60), "WorkspaceIcon", "title");
				if (expandIcon.equalsIgnoreCase("Show Section - Workspace")) {
					if (click(driver, bp.getWorkspaceExpandIcon(60), "Workspace Expand Icon",
							action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on workspace expand icon");
					} else {
						appLog.info("Not able to click on workspace expand icon");
						sa.assertTrue(false, "Not able to click on workspace expand icon");
					}
				} else {
					appLog.info("Workspace is in expanded form");
				}
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				ThreadSleep(8000);
				click(driver, fp.getWorkSpaceClearBtn(Workspace.FundraisingWorkspace, 10), "workspace clear button", action.SCROLLANDBOOLEAN);
				
				String parentID=switchOnWindow(driver);
				if(parentID!=null) {
					if (fp.clickUsingCssSelectorPath("#create_savebtn a[title=Yes]", "yes button")) {
					//if(click(driver, getCloseAndClearWorkSpaceYesBtn(timeOut), "workspace clear pop up Yes button ", action.SCROLLANDBOOLEAN)) {
						ThreadSleep(5000);
						if (isAlertPresent(driver)) {
							appLog.info("workspace has been successfully clear");
							String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
							switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
							if(msg.contains(FundsPageErrorMessage.clearWorkSpaceMsg)) {
								appLog.info(FundsPageErrorMessage.clearWorkSpaceMsg);
								driver.switchTo().window(parentID);
							}else {
								appLog.error("clear Workspace Error Message is not matched. Expected: "+FundsPageErrorMessage.closeWorkspaceMsg);
							}
							driver.switchTo().window(parentID);
						} else {
							driver.close();
							appLog.error(" clear Workspace alert message is not displayed");
							driver.switchTo().window(parentID);
						}
					}else {
						driver.close();
						appLog.error("Not able to click on clear workspace Yes button so cannot clear workspace");
						driver.switchTo().window(parentID);
					}
				
				
					driver.navigate().refresh();
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					if (isDisplayed(driver, fp.getBuildFundraisinWorkspaceButton(60), "Visibility", 60,
							"Build fundraising workspace button") != null) {
						appLog.info("workspace get cleared successfully");
					} else {
						appLog.error("Workspace not get cleared successfully");
						sa.assertTrue(false, "Workspace not get cleared successfully");
					}
				} else {
					appLog.error("Not able to clear the workspace");
					sa.assertTrue(false, "Not able to clear the workspace");
				}
			} else {
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		} else {
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		driver.close();
		config(browserToLaunch);
		;
		lp = new LoginPageBusinessLayer(driver);
		bp = new BasePageBusinessLayer(driver);
		sa = new SoftAssert();
		HomePageBusineesLayer hp = new HomePageBusineesLayer(driver);
		String[] docNameFund1 = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
				"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2 = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
				"M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard)
				.split("<break>");
		String uploadedDoc = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
				"M12tc014_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn",
				"Contact Profile Updated")) {
				if (hp.verifyAlertOnHomePage("Contact Profile Updated", null, null, null, M12Contact1UpdatedFirmName,
						M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
					appLog.error("Contact profile related alert for contact 1 is displaying");
					sa.assertTrue(false, "Contact profile related alert for contact 1 is  displaying");
				} else {
					appLog.error("Contact profile related alert for contact 1 is not displaying");
				}
				if (hp.verifyAlertOnHomePage("Contact Profile Updated", null, null, null, M12Contact2UpdatedFirmName,
						M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, "date")) {
					appLog.error("Contact profile related alert for contact 2 is displaying");
					sa.assertTrue(false, "Contact profile related alert for contact 2 is  displaying");
				} else {
					appLog.error("Contact profile related alert for contact 2 is not displaying");
				}			
		} else {
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		if (selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn",
				"Firm Profile Updated")) {
				if (hp.verifyAlertOnHomePage("Firm Profile Updated", null, null, null, M12Contact1UpdatedFirmName,
						M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
					appLog.error("Firm profile related alert for contact 1 is displaying");
					sa.assertTrue(false, "Firm profile related alert for contact 1 is displaying");
				} else {
					appLog.error("Firm profile related alert for contact 1 is not displaying");
				}
				if (hp.verifyAlertOnHomePage("Firm Profile Updated", null, null, null, M12Contact2UpdatedFirmName,
						M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, "date")) {
					appLog.error("Firm profile related alert for contact 2 is displaying");
					sa.assertTrue(false, "Firm profile related alert for contact 2 is  displaying");
				} else {
					appLog.error("Firm profile related alert for contact 2 is not displaying");
				}
		} else {
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}
		if (selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")) {
				if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1 + "UP", "Fundraising",
						docNameFund1[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
						M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
					appLog.info("Document Viewed alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Viewed alerts are  displaying for contact 1 for fund 1");
				} else {
					appLog.error("Document Viewed alerts are not displaying for contact 1 for fund 1");
				}
				if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Fundraising",
						docNameFund2[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
						M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
					appLog.info("Document Viewed alerts are displaying for contact 1 for fund 2");
					sa.assertTrue(false, "Document  Viewed alerts are  displaying for contact 1 for fund 2");
				} else {
					appLog.error("Document alerts are not displaying for contact 1 for fund 2");
				}
				if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1 + "UP",
						"Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
						M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Downloaded alerts are displaying for contact 1 for fund 1");
				} else {
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				}
				if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Fundraising",
						docNameFund2[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
						M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 2");
					sa.assertTrue(false, "Document Downloaded alerts are  displaying for contact 1 for fund 2");
				} else {
					appLog.error("Document Downloaded alerts are not displaying for contact 1 for fund 2");
				}
				if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1 + "UP", "Fundraising",
						uploadedDoc, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
						M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
					appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Uploaded alerts are  displaying for contact 1 for fund 1");
				} else {
					appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}
				if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1 + "UP", "Fundraising",
						uploadedDoc, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
						M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
					appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Updated alerts are  displaying for contact 1 for fund 1");
				} else {
					appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
				}
		} else {
			appLog.error("Not able to select All Alerts option");
			sa.assertTrue(false, "Not able to select All Alerts option");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
	}
	
	@Test
	public void M12tc041_BuildWorkspaceAgainAndInviteContactAndVerifyAlerts(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		HomePageBusineesLayer hp = new HomePageBusineesLayer(driver);
		String[] docNameFund1 = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,"M12tc003_BuildWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2 = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,"M12tc012_CreateFundraisingWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,	"M12tc014_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		SoftAssert saa = new SoftAssert();
		String[] shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath).split(",");
		String[] step1of3 = { ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Size),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_VintageYear),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Contact),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Phone),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Email),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Description) };
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1+"NUP")) {
				if (fp.buildWorkspace(step1of3, WorkSpaceAction.IMPORTFOLDERTEMPLATE, folderTemplateName, null,
						M12Institution1+"NUP" + "<break>" + M12Institution2, Workspace.FundraisingWorkspace, 60)) {
					appLog.info("Fundraising Workspace is created successfully");
				} else {
					appLog.info("Fundraising workspace is not created successfully");
					saa.assertTrue(false, " Fundraising workspace is not craeted successfully");
				}
				if (fp.inviteContact(environment, mode, M12Institution1+"NUP", M12Contact1EmailId, null, FolderType.Standard,
						"Upload", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution2, M12Contact2EmailId, null, FolderType.Standard,
						"Upload", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution1+"NUP", M12Contact1EmailId, shdPath[0],
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution2, M12Contact2EmailId, shdPath[0],
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.FundraisingWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}		
			}else{
				appLog.error("Not able to click on created fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able ot click on funds tab");
			saa.assertTrue(false, "Not able ot click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
			if (selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn",
					"Contact Profile Updated")) {
					if (hp.verifyAlertOnHomePage("Contact Profile Updated", null, null, null, M12Contact1UpdatedFirmName,
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
						appLog.error("Contact profile related alert for contact 1 is displaying");
					} else {
						appLog.error("Contact profile related alert for contact 1 is not displaying");
						saa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
					}
					if (hp.verifyAlertOnHomePage("Contact Profile Updated", null, null, null, M12Contact2UpdatedFirmName,
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, "date")) {
						appLog.error("Contact profile related alert for contact 2 is displaying");
					} else {
						appLog.error("Contact profile related alert for contact 2 is not displaying");
						saa.assertTrue(false, "Contact profile related alert for contact 2 is not displaying");
					}
			} else {
				appLog.error("Not able to select contact profile updtaed option");
				saa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if (selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn",
					"Firm Profile Updated")) {
					if (hp.verifyAlertOnHomePage("Firm Profile Updated", null, null, null, M12Contact1UpdatedFirmName,
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
						appLog.error("Firm profile related alert for contact 1 is displaying");
					} else {
						appLog.error("Firm profile related alert for contact 1 is not displaying");
						saa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}
					if (hp.verifyAlertOnHomePage("Firm Profile Updated", null, null, null, M12Contact2UpdatedFirmName,
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, "date")) {
						appLog.error("Firm profile related alert for contact 2 is displaying");
					} else {
						appLog.error("Firm profile related alert for contact 2 is not displaying");
						saa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
					}
			} else {
				appLog.error("Not able to select Firm profile updtaed option");
				saa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}
			if (selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")) {
					if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1 + "UP", "Fundraising",
							docNameFund1[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
						appLog.info("Document Viewed alerts are displaying for contact 1 for fund 1");
						saa.assertTrue(false, "Document Viewed alerts are  displaying for contact 1 for fund 1");
					} else {
						appLog.error("Document Viewed alerts are not displaying for contact 1 for fund 1");
					}
					if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Fundraising",
							docNameFund2[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
						appLog.info("Document Viewed alerts are displaying for contact 1 for fund 2");
						saa.assertTrue(false, "Document  Viewed alerts are  displaying for contact 1 for fund 2");
					} else {
						appLog.error("Document alerts are not displaying for contact 1 for fund 2");
					}
					if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1 + "UP",
							"Fundraising", docNameFund1[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
						appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
						saa.assertTrue(false, "Document Downloaded alerts are displaying for contact 1 for fund 1");
					} else {
						appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
					}
					if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Fundraising",
							docNameFund2[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
						appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 2");
						saa.assertTrue(false, "Document Downloaded alerts are  displaying for contact 1 for fund 2");
					} else {
						appLog.error("Document Downloaded alerts are not displaying for contact 1 for fund 2");
					}
					if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1 + "UP", "Fundraising",
							uploadedDoc, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
						appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
						saa.assertTrue(false, "Document Uploaded alerts are  displaying for contact 1 for fund 1");
					} else {
						appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
					}
					if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1 + "UP", "Fundraising",
							uploadedDoc, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
						appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
						saa.assertTrue(false, "Document Updated alerts are  displaying for contact 1 for fund 1");
					} else {
						appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
					}
			} else {
				appLog.error("Not able to select All Alerts option");
				saa.assertTrue(false, "Not able to select All Alerts option");
			}
		}else{
			appLog.error("Not able ot click on home tab");
			saa.assertTrue(false, "Not able to click on home tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
		if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 1 is displaying ");
				}else{
					appLog.error("Contact profile related alert for contact 1 is not displaying");	
					saa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
				}
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 2 is displaying ");
				}else{
					appLog.error("Contact profile related alert for contact 2 is not displaying");	
					saa.assertTrue(false, "Contact profile related alert for contact 2 is not displaying");
				}
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				saa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						saa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 2 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 2 is not displaying");	
						saa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
					}
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				saa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 for fund 1");
					saa.assertTrue(false, "Document alerts are displaying for contact  1 for fund 1");
				}else{
					appLog.error("Document alerts are not displaying for contact 1 for fund 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
					saa.assertTrue(false, "Document Downloaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
					saa.assertTrue(false, "Document Uploaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
					saa.assertTrue(false, "Document Updated alerts are displaying for contact 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				saa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			saa.assertTrue(false, "Not able to click on alert history link");
		}
		}else{
				appLog.error("Not able ot click on creted fund");
				saa.assertTrue(false, "Not able ot click on creted fund");
			}
		}else{
			appLog.error("Not able ot click on funds tab");
			saa.assertTrue(false, "Not able ot click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
		if(click(driver, bp.getAlertHistoryLink(Workspace.FundraisingWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Fund Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Contact profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Contact profile related alert for contact 1 is not displaying");	
						saa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
					}			
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				saa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						saa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				saa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.FundraisingWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 for fund 1");
					saa.assertTrue(false, "Document alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document alerts are not displaying for contact 1 for fund 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
					saa.assertTrue(false, "Document Downloaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
					saa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.FundraisingWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
					saa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				saa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			saa.assertTrue(false, "Not able to click on alert history link");
		}				
			}else{
				appLog.error("Not able to clcik on created contact");
				saa.assertTrue(false, "Not able to clcik on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");			
			saa.assertTrue(false, "Not able to click on contact tab");			
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		driver.close();
		config(browserToLaunch);
		lp=new LoginPageBusinessLayer(driver);
		bp=new BasePageBusinessLayer(driver);
		fp=new FundsPageBusinessLayer(driver);
		lp.CRMLogin(superAdminUserName, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				ThreadSleep(5000);
		if(fp.closeWorkSpace(Workspace.FundraisingWorkspace, 60)){
			appLog.error("Workspace get closed successfully");
		}else{
			appLog.error("Not able to close the workspace");
			sa.assertTrue(false, "Not able to close the workspace");
		}
		}else{
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");			
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();			
	}

	@Test
	public void M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		HomePageBusineesLayer hp = new HomePageBusineesLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		SoftAssert saa = new SoftAssert();
		String[] stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath).split(",");
		String[] cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath).split(",");
		String[] shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath).split(",");
		String[] intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath).split(",");
		String[] step1of3 = { ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Size),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_VintageYear),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Contact),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Phone),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Email),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Description) };
		String StdFromFolder = "UploadFiles\\Module12\\INV\\Standard";
		String CommonFromFolder = "UploadFiles\\Module12\\INV\\Common";
		String InternalFromFolder = "UploadFiles\\Module12\\INV\\Internal";
		String SharedFromFolder = "UploadFiles\\Module12\\INV\\Shared";
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1)) {
				if (fp.buildWorkspace(step1of3, WorkSpaceAction.IMPORTFOLDERTEMPLATE, folderTemplateName, null,
						M12Institution1+"NUP"+"/"+M12LimitedPartner1 + "<break>" + M12Institution2+"/"+M12LimitedPartner2, Workspace.InvestorWorkspace, 60)) {
					appLog.info("Investor Workspace is created successfully");
				} else {
					appLog.info("Investor workspace is not created successfully");
					saa.assertTrue(false, " Investor workspace is not craeted successfully");
				}
				if (fp.inviteContact(environment, mode, M12Institution1+"NUP", M12Contact1EmailId, null, FolderType.Standard,
						"Upload", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution2, M12Contact2EmailId, null, FolderType.Standard,
						"Upload", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution1+"NUP", M12Contact1EmailId, shdPath[0],
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution2, M12Contact2EmailId, shdPath[0],
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.uploadFile(stdPath[0], M12Institution1+"NUP"+"/"+M12LimitedPartner1+"<break>"+M12Institution2+"/"+M12LimitedPartner2, StdFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + stdPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + stdPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + stdPath[0] + "'");
				}
				StdFromFolder = "UploadFiles\\Module12\\INV\\StandardSub";
				if (fp.uploadFile(stdPath[1], M12Institution1+"NUP"+"/"+M12LimitedPartner1+"<break>"+M12Institution2+"/"+M12LimitedPartner2, StdFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + stdPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + stdPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + stdPath[1] + "'");
				}
				if (fp.uploadFile(cmnPath[0], null, CommonFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + cmnPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + cmnPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + cmnPath[0] + "'");
				}
				CommonFromFolder = CommonFromFolder + "Sub";
				if (fp.uploadFile(cmnPath[1], null, CommonFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + cmnPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + cmnPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + cmnPath[1] + "'");
				}
				if (fp.uploadFile(shdPath[0], null, SharedFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + shdPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + shdPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + shdPath[0] + "'");
				}
				SharedFromFolder = SharedFromFolder + "Sub";
				if (fp.uploadFile(shdPath[1], null, SharedFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + shdPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + shdPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + shdPath[1] + "'");
				}
				if (fp.uploadFile(intPath[0], null, InternalFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + intPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + intPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + intPath[0] + "'");
				}
				InternalFromFolder = InternalFromFolder + "Sub";
				if (fp.uploadFile(intPath[1], null, InternalFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + intPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + intPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + intPath[1] + "'");
				}
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
				SoftAssert	saa1 = fp.verifyALertHistoryUI(Workspace.InvestorWorkspace);
				sa.combineAssertions(saa1);
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						saa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}
		} else {
			appLog.info("Not able to click on Funds tab so we cannot create workspace");
			saa.assertTrue(false, "Not able to click on Funds tab so we cannot create workspace");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, cp.getContactsTab(60), "Contact tab");
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					SoftAssert	saa2 = fp.verifyALertHistoryUI(Workspace.InvestorWorkspace);
					sa.combineAssertions(saa2);
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						saa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on contact tab");
				saa.assertTrue(false, "Not able to click on contact tab");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			saa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			ThreadSleep(5000);
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
			if (hp.getShowDropDownLabelONHomeAlert(60).getText().trim().equalsIgnoreCase("Show:")) {
				appLog.info("Show Drop Down Label is Displayed");
			} else {
				appLog.info("Show Drop Down Label is not Displayed");
				sa.assertTrue(false, "Show Drop Down Label is not Displayed");
			}
			if (hp.getRangeDropDownLabelONHomeAlert(60).getText().trim().equalsIgnoreCase("Range:")) {
				appLog.info("Range Drop Down Label is Displayed");
			} else {
				appLog.info("Range Drop Down Label is not Displayed");
				sa.assertTrue(false, "Range Drop Down Label is not Displayed");
			}
			String dropdownvalue = getSelectedOptionOfDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropdown ",
					"value");
			if (dropdownvalue.equalsIgnoreCase("All Alerts")) {
				appLog.info("Default All Alerts Drop Down value is selected in Show.");
			} else {
				appLog.info("Default All Alerts Drop Down value is not selected in Show");
				sa.assertTrue(false, "Default All Alerts Drop Down value is not selected in Show");
			}
			dropdownvalue = getSelectedOptionOfDropDown(driver, hp.getRangeDropdownOnHomeAlert(60), "Range dropdown",
					"text");
			if (dropdownvalue.equalsIgnoreCase("Last 7 Days")) {
				appLog.info("Default Last 7 Days value is selected in Range.");
			} else {
				appLog.info("Default Last 7 Days value is not selected in Range.");
				sa.assertTrue(false, "Default Last 7 Days  value is not selected in Range.");
			}
			List<WebElement> columnValue = hp.getColumnTextonHomeAlert(30);
			String[] ExpectedColumnText = { "Activity Type", "Fund", "Workspace", "Document ", "Firm", "Contact", "Date" };
			String[] actColumnText = new String[columnValue.size()];
			int i = 0;
			for (WebElement webElement : columnValue) {
				actColumnText[i] = webElement.getText().trim();
				i++;
			}
			for (int j = 0; j < actColumnText.length; j++) {
				if (ExpectedColumnText[j].contains(actColumnText[j])) {
					appLog.info("Column Verified : " + ExpectedColumnText[j]);
				} else {
					appLog.info("Column not Verified : " + "\tActual: " + actColumnText[j] + "\tExpected: "
							+ ExpectedColumnText[j]);
					sa.assertTrue(false, "Column not Verified : " + "\tActual: " + actColumnText[j] + "\tExpected: "
							+ ExpectedColumnText[j]);
				}
			}
			List<WebElement> showOptions = allOptionsInDropDrop(driver, hp.getShowDropdownOnHomeAlert(60),
					"Show Drop Down");

			String[] expectedResult = { "All Alerts", "All Except Profile Updates", "Document Viewed",
					"Document Downloaded", "Document Uploaded", "Document Updated", "Contact Profile Updated",
					"Firm Profile Updated" };

			List<String> showOptions1 = new ArrayList<String>();
			for (WebElement showlist : showOptions) {
				showOptions1.add(showlist.getText().trim());
			}
			for (int k = 0; k < expectedResult.length; k++) {
				if (showOptions1.get(k).equalsIgnoreCase(expectedResult[k])) {
					appLog.info("Show Drop Down Value matched : " + expectedResult[k]);
				} else {
					appLog.info("Show Drop Down Value not matched : " + expectedResult[k]);
					sa.assertTrue(false, "Show Drop Down Value not matched : " + expectedResult[k]);
				}
			}
			List<WebElement> rangeOptions = allOptionsInDropDrop(driver, hp.getRangeDropdownOnHomeAlert(60),
					"Show Drop Down");
			String[] expectedResult1 = { "All Time", "Today", "Last 7 Days", "Last 30 Days", "Last 60 Days", "Last 90 Days",
					"Year to Date" };

			List<String> rangeOptions1 = new ArrayList<String>();
			for (WebElement rangelist : rangeOptions) {

				rangeOptions1.add(rangelist.getText().trim());
			}
			for (int p = 0; p < expectedResult1.length; p++) {
				if (rangeOptions1.get(p).equalsIgnoreCase(expectedResult1[p])) {
					appLog.info("Range Drop Down Value matched : " + expectedResult1[p]);
				} else {
					appLog.info("Range Drop Down Value not matched : " + expectedResult1[p]);
					sa.assertTrue(false, "Range Drop Down Value not matched : " + expectedResult1[p]);
				}
			}
		}else{
			appLog.error("Not able ot click on home tab");
			saa.assertTrue(false, "Not able ot click on home tab");
		}
		switchToDefaultContent(driver);		
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();	
	}

	@Test
	public void M12tc043_1_ViewDownloadDocumentFromAllFirms(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1+"NUP", M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP",
				Workspace.InvestorWorkspace, "M12Contact1","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		AllFirmsPageBusinesslayer afp = new AllFirmsPageBusinesslayer(driver);
		DisclaimerPageBussinessLayer dp = new DisclaimerPageBussinessLayer(driver);
		lp.investorLogin(M12Contact1EmailId, adminPassword);
		sa = new SoftAssert();
		int i = 0;
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		if (selectVisibleTextFromDropDown(driver, afp.getFirmNameDropdown(60), "Firm Name dropdown", "All Firms")) {
			ThreadSleep(3000);
			if(SharedDocument.length>1){
			if (dp.clickOnDocument("Current Investment", M12FundName1+"UP", SharedDocument[1], 60, afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ SharedDocument[1] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ SharedDocument[1] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to to click on the document");
			}
			if(CommonDocument.length>1){
			if (dp.clickOnDocument("Current Investment", M12FundName1+"UP", CommonDocument[1], 60, afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ CommonDocument[1] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ CommonDocument[1] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to to click on the document");
			}
			if(StandardDocument.length>1){
			if (dp.clickOnDocument("Current Investment", M12FundName1+"UP", StandardDocument[1], 60,
					afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ StandardDocument[1] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ StandardDocument[1] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to to click on the document");
			}
		} else {
			appLog.info("Not able to select firm name ");
			sa.assertTrue(false, "Not able to select firm name ");
		}
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12ContactPageALertCount) + i;
		int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact1",
				excelLabel.ContactPageALertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund1", excelLabel.FundsPageALertCount);
		lp.investorLogout();
		sa.assertAll();
		}

	@Test
	public void M12tc043_2_VerifyDocumentViewedDocumentDownloadedAlertAtCRMSide(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
	if(CommonDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
				CommonDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
	}else{
		appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
		sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
	}
	if(SharedDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
				SharedDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
	}else{
		appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
		sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
	}
	if(StandardDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
				StandardDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
	}else{
		appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
		sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
	}
	if(CommonDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
				CommonDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
	}else{
		appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
		sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
	}
	if(SharedDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
				SharedDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
	}else{
		appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
		sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
	}
	if(StandardDocument.length>1){
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
				StandardDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
	}else{
		appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
		sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
	}
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1+"NUP")) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, StandardDocument[1],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, CommonDocument[1],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, SharedDocument[1],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");	
					}
					if(StandardDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							StandardDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");	
					}
					if(CommonDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							CommonDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");	
					}
					if(SharedDocument.length>1){
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							SharedDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					}else{
						appLog.error("Since files not uploaded successfully so not able to verify alert of the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to verify alert of the document");
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.InvestorWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,
							StandardDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, CommonDocument[1],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, SharedDocument[1],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							StandardDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							CommonDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							SharedDocument[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact1",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.InvestorWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
	}
	
	@Test
	public void M12tc044_1_ViewDownloadDcumentFromPEFirmAllDocuments(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1+"NUP", M12Contact2FirstName, M12Contact2LastName,
				Workspace.InvestorWorkspace, "M12Contact2","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		AllFirmsPageBusinesslayer afp = new AllFirmsPageBusinesslayer(driver);
		DisclaimerPageBussinessLayer dp = new DisclaimerPageBussinessLayer(driver);
		lp.investorLogin(M12Contact2EmailId, adminPassword);
		sa = new SoftAssert();
		int i = 0;
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		if(SharedDocument.length>1){
		if (dp.clickOnDocument("Current Investment", M12FundName1+"UP", SharedDocument[0], 60, afp.getAllDocumentsScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ SharedDocument[0] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ SharedDocument[0] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
		}else{
			appLog.error("Since files not uploaded successfully so not able to click on the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");
		}
		if(CommonDocument.length>1){
			if (dp.clickOnDocument("Current Investment", M12FundName1+"UP", CommonDocument[0], 60, afp.getAllDocumentsScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ CommonDocument[0] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ CommonDocument[0] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
		}else{
			appLog.error("Since files not uploaded successfully so not able to click on the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");
		}
		if(StandardDocument.length>1){
			if (dp.clickOnDocument("Current Investment", M12FundName1+"UP", StandardDocument[0], 60,
					afp.getAllDocumentsScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ StandardDocument[0] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ StandardDocument[0] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
		}else{
			appLog.error("Since files not uploaded successfully so not able to click on the document");
			sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");
		}
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12Contact2PageAlertCount) + i;
		int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
		System.out.println(ContactAlertCount);
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact2",
				excelLabel.ContactPageALertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund1", excelLabel.FundsPageALertCount);
		lp.investorLogout();
		sa.assertAll();		
	}

	@Test
	public void M12tc044_2_VerifyDocumentViewedDocumentDownloadedAlertAtCRMSide(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
				CommonDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
				SharedDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
				StandardDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
				CommonDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
				SharedDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
				StandardDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60), "date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1+"NUP")) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");

					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, StandardDocument[0],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, CommonDocument[0],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, SharedDocument[0],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							StandardDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							CommonDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							SharedDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.InvestorWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,
							StandardDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, CommonDocument[0],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, SharedDocument[0],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							StandardDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							CommonDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							SharedDocument[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact2",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.InvestorWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
	}

	@Test
	public void M12tc045_1_ViewDownloadDocumentFromPEFirmRecentDocuments(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1+"NUP", M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP",
				Workspace.InvestorWorkspace, "M12Contact1","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		AllFirmsPageBusinesslayer afp = new AllFirmsPageBusinesslayer(driver);
		InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
		DisclaimerPageBussinessLayer dp = new DisclaimerPageBussinessLayer(driver);
		lp.investorLogin(M12Contact1EmailId, adminPassword);
		sa = new SoftAssert();
		int i = 0;
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		if (click(driver, ifp.getRecentActivitiesTab(60), "Recent Activities tab", action.SCROLLANDBOOLEAN)) {
			ThreadSleep(3000);
			if(SharedDocument.length>1){
			if (dp.clickOnDocument("Current Investment", M12FundName1+"UP", SharedDocument[3], 60, afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ SharedDocument[3] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ SharedDocument[3] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");
			}
			if(CommonDocument.length>1){
			if (dp.clickOnDocument("Current Investment", M12FundName1+"UP", CommonDocument[3], 60, afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ CommonDocument[3] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ CommonDocument[3] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");	
			}
			if(StandardDocument.length>1){
			if (dp.clickOnDocument("Current Investment", M12FundName1+"UP", StandardDocument[3], 60,
					afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ StandardDocument[3] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ StandardDocument[3] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");	
			}
		} else {
			appLog.info("Not able to click on recent activity tab ");
			sa.assertTrue(false, "Not able to click on recent activity tab");
		}
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12ContactPageALertCount) + i;
		int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact1",
				excelLabel.ContactPageALertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund1", excelLabel.FundsPageALertCount);
		lp.investorLogout();
		sa.assertAll();		
	}

	@Test
	public void M12tc045_2_VerifyDocumentViewedDocumentDownloadedAlertAtCRMSide(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
				CommonDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
				SharedDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
				StandardDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
				CommonDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
				SharedDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
				StandardDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1+"NUP")) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");

					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, StandardDocument[3],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, CommonDocument[3],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, SharedDocument[3],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							StandardDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							CommonDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							SharedDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.InvestorWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,
							StandardDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, CommonDocument[3],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, SharedDocument[3],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							StandardDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							CommonDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							SharedDocument[3], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact1",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.InvestorWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
	}
	
	@Test
	public void M12tc046_1_ViewDownloadDocumentFromPEFirmCurrentInvestment(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1+"NUP", M12Contact2FirstName, M12Contact2LastName,
				Workspace.InvestorWorkspace, "M12Contact2","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		AllFirmsPageBusinesslayer afp = new AllFirmsPageBusinesslayer(driver);
		InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
		DisclaimerPageBussinessLayer dp = new DisclaimerPageBussinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		lp.investorLogin(M12Contact2EmailId, adminPassword);
		sa = new SoftAssert();
		int i = 0;
		String stdfolderPath=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
		String CommonfolderPath=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
		String SharedfolderPath=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		if(ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)){
			if(selectVisibleTextFromDropDown(driver, ifp.getPotentialAndCurrentInvestmentInvestmentDropdown(60), "Investment dropdown", M12FundName1+"UP")){
				if(fp.verifyFolderPathdummy(CommonfolderPath, null, null, null, PageName.CurrentInvestmentPgae, null, 60)){
			if(CommonDocument.length>1){
					if(dp.clickOnDocumentInWorkspaceContentGrid(CommonDocument[2])){
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ CommonDocument[2] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ CommonDocument[2] + "'.");
				}		
				}else{
					appLog.info("Not able to click on document name");
					sa.assertTrue(false, "Not able to click on document name");
				}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");	
			}
				}else{
					appLog.info("Folder path is not verified");
					sa.assertTrue(false, "Folder path is not verified");
				}
				if(fp.verifyFolderPathdummy(SharedfolderPath, null, null, null, PageName.CurrentInvestmentPgae, null, 60)){
					if(SharedDocument.length>1){
					if(dp.clickOnDocumentInWorkspaceContentGrid(SharedDocument[2])){
						String parentID = switchOnWindow(driver);
						if (parentID != null) {
							i++;
							if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
								appLog.info("Clicked on download link");
								i++;
								bp.clickOnDownloadDocumentCancelButton();
							} else {
								appLog.info("Not able to click on download link");
								sa.assertTrue(false, "Not able to click on download ink");
							}
							driver.close();
							driver.switchTo().window(parentID);
						} else {
							appLog.error("No new window is opening after clicking on the document name link of '"
									+ SharedDocument[2] + "'.");
							sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
									+ SharedDocument[2] + "'.");
						}		
						}else{
							appLog.info("Not able to click on document name");
							sa.assertTrue(false, "Not able to click on document name");
						}
					}else{
						appLog.error("Since files not uploaded successfully so not able to click on the document");
						sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");	
					}
						}else{
							appLog.info("Folder path is not verified");
							sa.assertTrue(false, "Folder path is not verified");
						}
				if(fp.verifyFolderPathdummy(stdfolderPath, M12Institution2, M12LimitedPartner2, null, PageName.CurrentInvestmentPgae, null, 60)){
				if(StandardDocument.length>1){
					if(dp.clickOnDocumentInWorkspaceContentGrid(StandardDocument[2])){
						String parentID = switchOnWindow(driver);
						if (parentID != null) {
							i++;
							if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
								appLog.info("Clicked on download link");
								i++;
								bp.clickOnDownloadDocumentCancelButton();
							} else {
								appLog.info("Not able to click on download link");
								sa.assertTrue(false, "Not able to click on download ink");
							}
							driver.close();
							driver.switchTo().window(parentID);
						} else {
							appLog.error("No new window is opening after clicking on the document name link of '"
									+ StandardDocument[2] + "'.");
							sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
									+ StandardDocument[2] + "'.");
						}		
						}else{
							appLog.info("Not able to click on document name");
							sa.assertTrue(false, "Not able to click on document name");
						}
				}else{
					appLog.error("Since files not uploaded successfully so not able to click on the document");
					sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");	
				}
						}else{
							appLog.info("Folder path is not verified");
							sa.assertTrue(false, "Folder path is not verified");
						}
				int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
				int ContactAlertCount = Integer.parseInt(M12Contact2PageAlertCount) + i;
				int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
				System.out.println(ContactAlertCount);
				ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
				ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact2",
						excelLabel.ContactPageALertCount);
				ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
						"M12Fund1", excelLabel.FundsPageALertCount);
			}else{
					appLog.info("Not able to select fund value from invest,ment dropdown");
					sa.assertTrue(false, "Not able to select fund value from invest,ment dropdown");
				}
		}else{
			appLog.info("Not able to click on potential investment tab");
			sa.assertTrue(false, "Not able to click on potential investment tab");
		}
		lp.investorLogout();
		sa.assertAll();	
		}
	
	@Test
	public void M12tc046_2_VerifyDocumentViewedDocumentDownloadedAlertAtCRMSide(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,
				"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
				CommonDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
				SharedDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
				StandardDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
				CommonDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
				SharedDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, 
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
				StandardDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
				M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
					+ M12Contact2UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
					+ " " + M12Contact2UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
		}
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1+"NUP")) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");

					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, StandardDocument[2],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, CommonDocument[2],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, SharedDocument[2],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							StandardDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							CommonDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							SharedDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.InvestorWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,
							StandardDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, CommonDocument[2],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, SharedDocument[2],
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							StandardDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							CommonDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							SharedDocument[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, 
							M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact2",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.InvestorWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();		
	}
	
	@Test
	public void M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		SoftAssert saa = new SoftAssert();
		String[] stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath).split(",");
		String[] cmnPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath).split(",");
		String[] shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath).split(",");
		String[] intPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.InternalPath).split(",");
		String[] step1of3 = { ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund2", excelLabel.Fund_Size),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund2", excelLabel.Fund_VintageYear),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund2", excelLabel.Fund_Contact),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund2", excelLabel.Fund_Phone),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund2", excelLabel.Fund_Email),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund2", excelLabel.Fund_Description) };
		String StdFromFolder = "UploadFiles\\Module12\\INV\\M12Fund2\\Standard";
		String CommonFromFolder = "UploadFiles\\Module12\\INV\\M12Fund2\\Common";
		String InternalFromFolder = "UploadFiles\\Module12\\INV\\M12Fund2\\Internal";
		String SharedFromFolder = "UploadFiles\\Module12\\INV\\M12Fund2\\Shared";
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName2)) {
				if (fp.buildWorkspace(step1of3, WorkSpaceAction.IMPORTFOLDERTEMPLATE, folderTemplateName, null,
						M12Institution1+"NUP"+"/"+M12LimitedPartner1 , Workspace.InvestorWorkspace, 60)) {
					appLog.info("Investor Workspace is created successfully");
				} else {
					appLog.info("Investor workspace is not created successfully");
					saa.assertTrue(false, " Investor workspace is not craeted successfully");
				}
				if (fp.inviteContact(environment, mode, M12Institution1+"NUP", M12Contact1EmailId, null, FolderType.Standard,
						"Upload", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
			if (fp.inviteContact(environment, mode, null, M12Contact1EmailId, shdPath[0],
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					saa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.uploadFile(stdPath[0], M12Institution1+"NUP"+"/"+M12LimitedPartner1, StdFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + stdPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + stdPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + stdPath[0] + "'");
				}
				StdFromFolder = "UploadFiles\\Module12\\INV\\M12Fund2\\StandardSub";
				if (fp.uploadFile(stdPath[1], M12Institution1+"NUP"+"/"+M12LimitedPartner1, StdFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + stdPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + stdPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + stdPath[1] + "'");
				}
				if (fp.uploadFile(cmnPath[0], null, CommonFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + cmnPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + cmnPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + cmnPath[0] + "'");
				}
				CommonFromFolder = CommonFromFolder+"Sub";
				if (fp.uploadFile(cmnPath[1], null, CommonFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + cmnPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + cmnPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + cmnPath[1] + "'");
				}
				if (fp.uploadFile(shdPath[0], null, SharedFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + shdPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + shdPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + shdPath[0] + "'");
				}
				SharedFromFolder = SharedFromFolder+"Sub";
				if (fp.uploadFile(shdPath[1], null, SharedFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + shdPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + shdPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + shdPath[1] + "'");
				}
				if (fp.uploadFile(intPath[0], null, InternalFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + intPath[0] + "'");
				} else {
					appLog.error("Not able to upload files in '" + intPath[0] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + intPath[0] + "'");
				}
				InternalFromFolder = InternalFromFolder+"Sub";
				if (fp.uploadFile(intPath[1], null, InternalFromFolder, null, UploadFileActions.Upload,
						Workspace.InvestorWorkspace, PageName.FundsPage, 30)) {
					appLog.info("Successfully uploaded files in '" + intPath[1] + "'");
				} else {
					appLog.error("Not able to upload files in '" + intPath[1] + "'");
					saa.assertTrue(false, "Not able to upload files in '" + intPath[1] + "'");
				}				
			} else {
				appLog.info("Not able to click on created fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}
		} else {
			appLog.info("Not able to click on Funds tab so we cannot create workspace");
			saa.assertTrue(false, "Not able to click on Funds tab so we cannot create workspace");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();		
	}
	
	@Test
	public void M12tc048_1_ViewDownloadDocumentsFromInvestorSideForFund2(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName2, M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP",
				Workspace.InvestorWorkspace, "M12Contact1","M12Fund2");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		AllFirmsPageBusinesslayer afp = new AllFirmsPageBusinesslayer(driver);
		DisclaimerPageBussinessLayer dp = new DisclaimerPageBussinessLayer(driver);
		lp.investorLogin(M12Contact1EmailId, adminPassword);
		sa = new SoftAssert();
		int i = 0;
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact",excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact",excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact",excelLabel.UploadedFileStandard).split("<break>");
			ThreadSleep(3000);
			if(SharedDocument.length>1){
			if (dp.clickOnDocument("Current Investment", M12FundName2, SharedDocument[0], 60, afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ SharedDocument[0] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ SharedDocument[0] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");
			}
			if(CommonDocument.length>1){
			if (dp.clickOnDocument("Current Investment", M12FundName2, CommonDocument[0], 60, afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ CommonDocument[0] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ CommonDocument[0] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");
			}
			if(StandardDocument.length>1){
			if (dp.clickOnDocument("Current Investment", M12FundName2, StandardDocument[0], 60,
					afp.getScrollBox(60))) {
				String parentID = switchOnWindow(driver);
				if (parentID != null) {
					i++;
					if (click(driver, afp.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on download link");
						i++;
						bp.clickOnDownloadDocumentCancelButton();
					} else {
						appLog.info("Not able to click on download link");
						sa.assertTrue(false, "Not able to click on download ink");
					}
					driver.close();
					driver.switchTo().window(parentID);
				} else {
					appLog.error("No new window is opening after clicking on the document name link of '"
							+ StandardDocument[0] + "'.");
					sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
							+ StandardDocument[0] + "'.");
				}
			} else {
				appLog.error("Not able to click on document");
				sa.assertTrue(false, "Not able to click on document");
			}
			}else{
				appLog.error("Since files not uploaded successfully so not able to click on the document");
				sa.assertTrue(false, "Since files not uploaded successfully so not able to click on the document");
			}
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12ContactPageALertCount) + i;
		int FundAlertCount = Integer.parseInt(M12Funds2PageALertCount) + i;
		System.out.println(ContactAlertCount);
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact1",
				excelLabel.ContactPageALertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund2", excelLabel.FundsPageALertCount);
		lp.investorLogout();
		sa.assertAll();		
	}

	@Test
	public void M12tc048_2_VerifyCreatedAlertsAtHomeFundContactPage(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact",excelLabel.UploadedFileCommon).split("<break>");
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact",excelLabel.UploadedFileShared).split("<break>");
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact",excelLabel.UploadedFileStandard).split("<break>");
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Investor",
				CommonDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Investor",
				SharedDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Investor",
				StandardDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Investor",
				CommonDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Investor",
				SharedDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Investor",
				StandardDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName2)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");

					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, StandardDocument[0],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, CommonDocument[0],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, SharedDocument[0],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							StandardDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							CommonDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
							SharedDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund2", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.InvestorWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,
							StandardDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, CommonDocument[0],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, SharedDocument[0],
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							StandardDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							CommonDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
							SharedDocument[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact1",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.InvestorWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
	}

	@Test
	public void M12tc049_1_UploadDocumentFromInvestorSide(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1+"NUP", M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP",
				Workspace.InvestorWorkspace, "M12Contact1","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		 lp = new LoginPageBusinessLayer(driver);
		InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
		SoftAssert saa = new SoftAssert();
		String 	date = getSystemDate("MM/dd/yyyy");
		String docpath = "UploadFiles\\Module12\\InvSide_Files";
		String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,excelLabel.UploadedFileStandard);		
		String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC,excelLabel.StandardPath);	
		int i=0;
		lp.investorLogin(M12Contact1EmailId, adminPassword);
		if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
			if(selectVisibleTextFromDropDown(driver, ifp.getPotentialAndCurrentInvestmentInvestmentDropdown(60), "Investment dropdown", M12FundName1+"UP")){
				if (ifp.uploadUpdateFileInvestorSide(stdPath, filesName, M12Institution1+"NUP"+"/"+M12LimitedPartner1, null, FolderType.Standard, docpath, "No", 30,
					PageName.CurrentInvestmentPgae, null, null, WorkSpaceAction.UPLOAD)) {				
				appLog.info("Upload Successful");				
				if(click(driver, ifp.getRefreshIcon(20), "Refresh Icon", action.SCROLLANDBOOLEAN)){	
					i++;
					saa = ifp.verifyContentGridInvestorSide(driver, PageName.CurrentInvestmentPgae, filesName, M12Contact1UpdatedFirstName+ " " + M12Contact1UpdatedLastName, date);
					sa.combineAssertions(saa);					
				}else{
					appLog.error("Not Able to Click Refresh Icon so Cannot check Upoaded File");
					sa.assertTrue(false, "Not Able to Click Refresh Icon so Cannot check Upoaded File");	
				}				
			}else{
				appLog.error("Upload Unsuccessful");
				sa.assertTrue(false, "Upload Unsuccessful");	
			}
			}else{
				appLog.info("Not able to select fund from the dropdown");
				sa.assertTrue(false, "Not able to select fund from the dropdown");
			}
		} else {
			appLog.info("Not able to click on PotentialInvestment tab");
			sa.assertTrue(false, "Not able to click on PotentialInvestment tab");
		}
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12ContactPageALertCount) + i;
		int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
		System.out.println(ContactAlertCount);
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact1",
				excelLabel.ContactPageALertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund1", excelLabel.FundsPageALertCount);
		lp.investorLogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();
	}
	
	@Test
	public void M12tc049_2_verifyDocumentUploadedAlertAtHomeFundContactPage(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc049_1_UploadDocumentFromInvestorSide",
				excelLabel.UploadedFileStandard);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UP", "Investor",
				StandardDocument, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Uploaded for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Uploaded for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Uploaded for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}	
		if (bp.matchALertRecordCOunt(ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1+"NUP")) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");

					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, StandardDocument,
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Uploaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Uploaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Uploaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}				
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.InvestorWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Uploaded", null, null,
							StandardDocument, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, 
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Uploaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Uploaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Uploaded for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}					
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact1",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.InvestorWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();		
	}
	
	@Test
	public void M12tc050_1_UpdateDocumentFromInvestorSide(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		String tc="M12tc049_1_UploadDocumentFromInvestorSide";
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1+"NUP", M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP",
				Workspace.InvestorWorkspace, "M12Contact1","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		InvestorFirmPageBusinesslayer ifp = new InvestorFirmPageBusinesslayer(driver);
		sa = new SoftAssert();
		String docpath = "UploadFiles\\Module12\\InvSide_Files";
		String filesName =ExcelUtils.readData("filepath", excelLabel.TestCases_Name, tc,excelLabel.UploadedFileStandard);		
		String stdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, tc,	excelLabel.StandardPath);	
		int i=0;
		lp.investorLogin(M12Contact1EmailId, adminPassword);
		if (ifp.clickOnInvestmentsTab(investorSideWorkSpace.CurrentInvestment)) {
			if(selectVisibleTextFromDropDown(driver, ifp.getPotentialAndCurrentInvestmentInvestmentDropdown(60), "Investment dropdown", M12FundName1+"UP")){
				if (ifp.uploadUpdateFileInvestorSide(stdPath, filesName, M12Institution1+"NUP"+"/"+M12LimitedPartner1, null, FolderType.Standard, docpath, "No", 30,
					PageName.CurrentInvestmentPgae, null, null, WorkSpaceAction.UPDATE)) {				
				appLog.info("Update Successful");				
				i++;				
			}else{
				appLog.error("Update Unsuccessful");
				sa.assertTrue(false, "Update Unsuccessful");	
			}
			}else{
				appLog.info("Not able to select fund from the dropdown");
				sa.assertTrue(false, "Not able to select fund from the dropdown");
			}
		} else {
			appLog.info("Not able to click on Current investment tab");
			sa.assertTrue(false, "Not able to click on Current investment tab");
		}
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12ContactPageALertCount) + i;
		int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
		System.out.println(ContactAlertCount);
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact1",
				excelLabel.ContactPageALertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund1", excelLabel.FundsPageALertCount);
		lp.investorLogout();
		sa.assertAll();		
	}
		
	@Test
	public void M12tc050_2_VerifyDocumentUpdatedAlertAtHomeFundContactPage(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc049_1_UploadDocumentFromInvestorSide",excelLabel.UploadedFileStandard);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UP", "Investor",
				StandardDocument, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
				M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
			appLog.info("Grid data is verified for Document Updated for contact " + M12Contact1UpdatedFirstName + " "
					+ M12Contact1UpdatedLastName);
		} else {
			appLog.error("Grid data is not verified for Document Updated for contact " + M12Contact1UpdatedFirstName
					+ " " + M12Contact1UpdatedLastName);
			sa.assertTrue(false, "Grid data is not verified for Document Updated for contact "
					+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
		}	
		if (bp.matchALertRecordCOunt(
				ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
						"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
				PageName.HomePage, null)) {
			appLog.info("Record count get matched at home page");
		} else {
			appLog.info("Record count not match at home page");
			sa.assertTrue(false, "Recoord count not matched at home page");
		}
		switchToDefaultContent(driver);
		scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1+"NUP")) {
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");

					if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated", null, null, StandardDocument,
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Updated for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Updated for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Updated for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}				
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.FundName,
									"M12Fund1", excelLabel.FundsPageALertCount),
							PageName.FundsPage, Workspace.InvestorWorkspace)) {
						appLog.info("Record count get matched at fund page");
					} else {
						appLog.info("Record count not match at fund page");
						sa.assertTrue(false, "Recoord count not matched at fund page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created tab");
			}
		} else {
			appLog.info("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to lcick on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.ContactTab)) {
			if (cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)) {
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60),
						"ALert history link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Updated", null, null,
							StandardDocument, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
						appLog.info("Grid data is verified for Document Updated for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					} else {
						appLog.error("Grid data is not verified for Document Updated for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
						sa.assertTrue(false, "Grid data is not verified for Document Updated for contact "
								+ M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName);
					}					
					if (bp.matchALertRecordCOunt(
							ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact1",
									excelLabel.ContactPageALertCount),
							PageName.ContactsPage, Workspace.InvestorWorkspace)) {
						appLog.info("Record count get matched at Contact page");
					} else {
						appLog.info("Record count not match at Contact page");
						sa.assertTrue(false, "Recoord count not matched at Contact page");
					}
					if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
							"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on alert history cross icon");
					} else {
						appLog.info("Not able to click on alert history cross icon");
						sa.assertTrue(false, "Not able to click on alert history cross icon");
					}
				} else {
					appLog.info("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			} else {
				appLog.info("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		} else {
			appLog.info("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();			
	}
	
	@Test
	public void M12tc051_VerifyFundDocumentContactHyperlinkInAlerts(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		String commonFilePath[]=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, "M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileCommon).split("<break>");
		String SharedFilePath[]=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, "M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileShared).split("<break>");
		String StandardFilePath[]=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, "M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileStandard).split("<break>");
		SoftAssert sa =new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
				if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
					switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));	
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor Section view");
					if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
						if(bp.clickOnContactNameInAlert(M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName,bp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),Workspace.InvestorWorkspace)){
							appLog.info("Contact page is opening");			
						}else{
							appLog.info("Contact Page is not opening");
							sa.assertTrue(false,"Contact Page is not opening");
						}
						switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));	
						scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"Investor Section view");
						if(bp.clickOnDocumentNameInAlert(commonFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, bp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.FundsPage, null, null)){
							String ParentID = switchOnWindow(driver);
							if (ParentID != null) {
								if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
										"Document Close button") != null) {
									appLog.info("Document is open");
								} else {
									appLog.info("Document is not opening");
									sa.assertTrue(false, "Document is not opening");
								}
								driver.close();
								driver.switchTo().window(ParentID);
							}else {
							appLog.info("No new window is open");
							sa.assertTrue(false, "No new window is open");
						}	
						}else{
							appLog.info("Document Page is not opening");
							sa.assertTrue(false,"Document Page is not opening");
						}
						switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));	
						scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"Investor Section view");	
						if(bp.clickOnDocumentNameInAlert(SharedFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, bp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.FundsPage, null, null)){
							String ParentID = switchOnWindow(driver);
							if (ParentID != null) {
								if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
										"Document Close button") != null) {
									appLog.info("Document is open");
								} else {
									appLog.info("Document is not opening");
									sa.assertTrue(false, "Document is not opening");
								}
								driver.close();
								driver.switchTo().window(ParentID);
							}else {
							appLog.info("No new window is open");
							sa.assertTrue(false, "No new window is open");
						}	
						}else{
							appLog.info("Document Page is not opening");
							sa.assertTrue(false,"Document Page is not opening");
						}
						switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));	
						scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"Investor Section view");
						if(bp.clickOnDocumentNameInAlert(StandardFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, bp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.FundsPage, null, null)){
							String ParentID = switchOnWindow(driver);
							if (ParentID != null) {
								if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
										"Document Close button") != null) {
									appLog.info("Document is open");
								} else {
									appLog.info("Document is not opening");
									sa.assertTrue(false, "Document is not opening");
								}
								driver.close();
								driver.switchTo().window(ParentID);
							}else {
							appLog.info("No new window is open");
							sa.assertTrue(false, "No new window is open");
						}
						}else{
							appLog.info("Document Page is not opening");
							sa.assertTrue(false,"Document Page is not opening");
						}
						switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));	
						scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"Investor Section view");	
						if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
								"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
							appLog.info("Clicked on alert history cross icon");
						} else {
							appLog.info("Not able to click on alert history cross icon");
							sa.assertTrue(false, "Not able to click on alert history cross icon");
						}					
					}else{
				appLog.error("Not able to click on alert history link");
				sa.assertTrue(false, "Not able to click on alert history link");
					}	
				}else{
					appLog.info("Not able to click on created fund");
					sa.assertTrue(false, "Not able to click on created fund");
				}		
			}else{
				appLog.error("Not able to click on funds tab");
				sa.assertTrue(false, "Not able to click on funds tab");
			}
			switchToDefaultContent(driver);
			if(bp.clickOnTab(TabName.ContactTab)){
				if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
					switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));	
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
							"Investor Section view");
					if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
						if(bp.clickOnContactNameInAlert(M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName,bp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),Workspace.InvestorWorkspace)){
							appLog.info("Contact page is opening");			
						}else{
							appLog.info("Contact Page is not opening");
							sa.assertTrue(false,"Contact Page is not opening");
						}
						switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));	
						scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"Investor Section view");	
						if(bp.clickOnDocumentNameInAlert(commonFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, bp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.ContactsPage, null, null)){
							String ParentID = switchOnWindow(driver);
							if (ParentID != null) {
								if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
										"Document Close button") != null) {
									appLog.info("Document is open");
								} else {
									appLog.info("Document is not opening");
									sa.assertTrue(false, "Document is not opening");
								}
								driver.close();
								driver.switchTo().window(ParentID);
							}else {
							appLog.info("No new window is open");
							sa.assertTrue(false, "No new window is open");
						}	
						}else{
							appLog.info("Document Page is not opening");
							sa.assertTrue(false,"Document Page is not opening");
						}
						switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));	
						scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"Investor Section view");
						if(bp.clickOnDocumentNameInAlert(SharedFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, bp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.ContactsPage, null, null)){
							String ParentID = switchOnWindow(driver);
							if (ParentID != null) {
								if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
										"Document Close button") != null) {
									appLog.info("Document is open");
								} else {
									appLog.info("Document is not opening");
									sa.assertTrue(false, "Document is not opening");
								}
								driver.close();
								driver.switchTo().window(ParentID);
							}else {
							appLog.info("No new window is open");
							sa.assertTrue(false, "No new window is open");
						}		
						}else{
							appLog.info("Document Page is not opening");
							sa.assertTrue(false,"Document Page is not opening");
						}
						switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));	
						scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"Investor Section view");	
						if(bp.clickOnDocumentNameInAlert(StandardFilePath[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, bp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.ContactsPage, null, null)){
							String ParentID = switchOnWindow(driver);
							if (ParentID != null) {
								if (isDisplayed(driver, bp.getDocumentCloseBtn(60), "Visiility", 60,
										"Document Close button") != null) {
									appLog.info("Document is open");
								} else {
									appLog.info("Document is not opening");
									sa.assertTrue(false, "Document is not opening");
								}
								driver.close();
								driver.switchTo().window(ParentID);
							}else {
							appLog.info("No new window is open");
							sa.assertTrue(false, "No new window is open");
						}		
						}else{
							appLog.info("Document Page is not opening");
							sa.assertTrue(false,"Document Page is not opening");
						}
						switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));	
						scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30),
								"Investor Section view");		
						if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
								"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
							appLog.info("Clicked on alert history cross icon");
						} else {
							appLog.info("Not able to click on alert history cross icon");
							sa.assertTrue(false, "Not able to click on alert history cross icon");
						}					
					}else{
						appLog.error("Not able to click on alert history link");
						sa.assertTrue(false, "Not able to click on alert history link");
					}	
				}else{
					appLog.info("Not able to click on created fund");
					sa.assertTrue(false, "Not able to click on created fund");
				}		
			}else{
				appLog.error("Not able to click on funds tab");
				sa.assertTrue(false, "Not able to click on funds tab");
			}
			switchToDefaultContent(driver);
			lp.CRMlogout();
			sa.assertAll();		
	}
	
	@Test
	public void M12tc052_VerifyShowPicklistAtFundPage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert sa =new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
		if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
		switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));
		scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace view");
		if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
			switchToDefaultContent(driver);
			switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace view");
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "All Except Profile Updates")){
				if(bp.verifyAlerts("Contact Profile Updated",fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Contact Profile Updated alerts are displaying");
					sa.assertTrue(false, "Contact Profile Updated alerts are displaying");
				}else{
					appLog.error("Contact Profile Updated alerts are not displaying");			
				}
				if(bp.verifyAlerts("Firm Profile Updated", fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Firm Profile Updated alerts are displaying");
					sa.assertTrue(false, "Firm Profile Updated alerts are displaying");
				}else{
					appLog.error("Firm Profile Updated alerts are not displaying");			
				}	
			}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "Document Viewed")){
				ThreadSleep(3000);
				if(bp.verifyAlerts("Document Viewed",fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Document Viewed alerts are displaying");
				}else{
					appLog.error("Document Viewed alerts are not displaying");		
					sa.assertTrue(false, "Document Viewed alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "Document Downloaded")){
				ThreadSleep(3000);
				if(bp.verifyAlerts("Document Downloaded",fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Document Downloaded alerts are displaying");
				}else{
					appLog.error("Document Downloaded alerts are not displaying");		
					sa.assertTrue(false, "Document Downloaded alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "Document Uploaded")){
				ThreadSleep(3000);
				if(bp.verifyAlerts("Document Uploaded",fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Document Uploaded alerts are displaying");
				}else{
					appLog.error("Document Uploaded alerts are not displaying");		
					sa.assertTrue(false, "Document Uploaded alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "Document Updated")){
				ThreadSleep(3000);
				if(bp.verifyAlerts("Document Updated",fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Document Updated alerts are displaying");
				}else{
					appLog.error("Document Updated alerts are not displaying");		
					sa.assertTrue(false, "Document Updated alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "Contact Profile Updated")){
				ThreadSleep(3000);
				if(bp.verifyAlerts("Contact Profile Updated",fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Contact Profile Updated alerts are displaying");
				}else{
					appLog.error("Contact Profile Updated alerts are not displaying");		
					sa.assertTrue(false, "Contact Profile Updated alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "Firm Profile Updated")){
				ThreadSleep(3000);
				if(bp.verifyAlerts("Firm Profile Updated",fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Firm Profile Updated alerts are displaying");
				}else{
					appLog.error("Firm Profile Updated alerts are not displaying");		
					sa.assertTrue(false, "Firm Profile Updated alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
		
		if(click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN)){
			appLog.info("Clicked on alert history cross icon");
		}else{
			appLog.error("not able to click on alert history cross icon");
			sa.assertTrue(false, "Not able to click on alert history cross icon");
		}		
		}else{
			appLog.error("Not able to click on alert history link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();
		}
	
	@Test
	public void M12tc053_VerifyShowPicklistAtContactPage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert sa =new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.ContactTab)){
		if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
		switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));
		scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Contact Page Investor section view");
		if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
			switchToDefaultContent(driver);
			switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Contact Page Investor section view");
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "All Except Profile Updates")){
				ThreadSleep(3000);
				if(bp.verifyAlerts("Contact Profile Updated",fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Contact Profile Updated alerts are displaying");
					sa.assertTrue(false, "Contact Profile Updated alerts are displaying");
				}else{
					appLog.error("Contact Profile Updated alerts are not displaying");			
				}
				if(bp.verifyAlerts("Firm Profile Updated", fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Firm Profile Updated alerts are displaying");
					sa.assertTrue(false, "Firm Profile Updated alerts are displaying");
				}else{
					appLog.error("Firm Profile Updated alerts are not displaying");			
				}	
			}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "Document Viewed")){
				ThreadSleep(3000);
				if(bp.verifyAlerts("Document Viewed",fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Document Viewed alerts are displaying");
				}else{
					appLog.error("Document Viewed alerts are not displaying");		
					sa.assertTrue(false, "Document Viewed alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "Document Downloaded")){
				ThreadSleep(3000);
				if(bp.verifyAlerts("Document Downloaded",fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Document Downloaded alerts are displaying");
				}else{
					appLog.error("Document Downloaded alerts are not displaying");		
					sa.assertTrue(false, "Document Downloaded alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "Document Uploaded")){
				ThreadSleep(3000);
				if(bp.verifyAlerts("Document Uploaded",fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Document Uploaded alerts are displaying");
				}else{
					appLog.error("Document Uploaded alerts are not displaying");		
					sa.assertTrue(false, "Document Uploaded alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "Document Updated")){
				ThreadSleep(3000);
				if(bp.verifyAlerts("Document Updated",fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Document Updated alerts are displaying");
				}else{
					appLog.error("Document Updated alerts are not displaying");		
					sa.assertTrue(false, "Document Updated alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "Contact Profile Updated")){
				ThreadSleep(3000);
				if(bp.verifyAlerts("Contact Profile Updated",fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Contact Profile Updated alerts are displaying");
				}else{
					appLog.error("Contact Profile Updated alerts are not displaying");		
					sa.assertTrue(false, "Contact Profile Updated alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
			ThreadSleep(3000);
			if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "Firm Profile Updated")){
				ThreadSleep(3000);
				if(bp.verifyAlerts("Firm Profile Updated",fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60))){
					appLog.info("Firm Profile Updated alerts are displaying");
				}else{
					appLog.error("Firm Profile Updated alerts are not displaying");		
					sa.assertTrue(false, "Firm Profile Updated alerts are not displaying");
				}
				}else{
				appLog.error("Not able to select show dropdown value");
				sa.assertTrue(false, "Not able to select dropdown value");
			}
		
		if(click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN)){
			appLog.info("Clicked on alert history cross icon");
		}else{
			appLog.error("not able to click on alert history cross icon");
			sa.assertTrue(false, "Not able to click on alert history cross icon");
		}		
		}else{
			appLog.error("Not able to click on alert history link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}
			}else{
				appLog.error("Not able to click on created Contact");
				sa.assertTrue(false, "Not able to click on created Contact");
			}
		}else{
			appLog.error("Not able to click on Contact tab");
			sa.assertTrue(false, "Not able to click on Contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();			
	}
	
	@Test
	public void M12tc054_VerifySortingAtFundPage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert saa=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.FundraisingWorkspace.toString() + " View.");
			SoftAssert	saa1=bp.verifySortingOnAllPagesInALert(PageName.FundsPage, Workspace.InvestorWorkspace);
				sa.combineAssertions(saa1);
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "Document Viewed")){
					if(bp.getActivityTypeSortIcon(20)!=null){
						appLog.info("Sorting icon is displaying at activity type coloumn");
						if(bp.checkSorting(SortOrder.Decending, bp.getActivityTypeColumnValue(PageName.FundsPage, Workspace.InvestorWorkspace))){
							appLog.info("Activity type coloumn is displaying in descending order");
						}else{
							appLog.error("Activity type coloumn is not displaying in descending order");
							saa.assertTrue(false, "Activity type coloumn is not displaying in descending order");
						}
					}else{
						appLog.error("Sorting icon is not displaying at activity type coloumn");
						saa.assertTrue(false, "Sorting icon is not displaying at activity type coloumn");
					}			
				}else{
					appLog.info("Not able to select show dropodwn value");
					sa.assertTrue(false, "Not able to select show dropdown value ");
				}
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupRangeDropdown(Workspace.InvestorWorkspace, 60), "Range dropdown", "All Time")){
					if(bp.getActivityTypeSortIcon(20)!=null){
						appLog.info("Sorting icon is displaying at activity type coloumn");
						if(bp.checkSorting(SortOrder.Decending, bp.getActivityTypeColumnValue(PageName.FundsPage, Workspace.InvestorWorkspace))){
							appLog.info("Activity type coloumn is displaying in descending order");
						}else{
							appLog.error("Activity type coloumn is not displaying in descending order");
							saa.assertTrue(false, "Activity type coloumn is not displaying in descending order");
						}
					}else{
						appLog.error("Sorting icon is not displaying at activity type coloumn");
						saa.assertTrue(false, "Sorting icon is not displaying at activity type coloumn");
					}			
				}else{
					appLog.info("Not able to select range dropodwn value");
					sa.assertTrue(false, "Not able to select range dropdown value ");
				}	
				if(click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN))	{
					appLog.info("CLicked on alert history cross icon");
				}else{
					appLog.error("Not able to click on alert history cross icon");
					saa.assertTrue(false, "Not able to click on alert history cross icon");
				}				
				}else{
					appLog.error("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}
			}else{
				appLog.error("Not able to click on created fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			saa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();			
	}
	
	@Test
	public void M12tc055_VerifySortingAtContactPage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert saa=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, cp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					SoftAssert	saa1=bp.verifySortingOnAllPagesInALert(PageName.ContactsPage, Workspace.InvestorWorkspace);
				sa.combineAssertions(saa1);
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropdown", "Document Viewed")){
					if(bp.getActivityTypeSortIcon(20)!=null){
						appLog.info("Sorting icon is displaying at activity type coloumn");
						if(bp.checkSorting(SortOrder.Decending, bp.getActivityTypeColumnValue(PageName.ContactsPage, Workspace.InvestorWorkspace))){
							appLog.info("Activity type coloumn is displaying in descending order");
						}else{
							appLog.error("Activity type coloumn is not displaying in descending order");
							saa.assertTrue(false, "Activity type coloumn is not displaying in descending order");
						}
					}else{
						appLog.error("Sorting icon is not displaying at activity type coloumn");
						saa.assertTrue(false, "Sorting icon is not displaying at activity type coloumn");
					}			
				}else{
					appLog.info("Not able to select show dropodwn value");
					sa.assertTrue(false, "Not able to select show dropdown value ");
				}
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupRangeDropdown(Workspace.InvestorWorkspace, 60), "Range dropdown", "All Time")){
					if(bp.getActivityTypeSortIcon(20)!=null){
						appLog.info("Sorting icon is displaying at activity type coloumn");
						if(bp.checkSorting(SortOrder.Decending, bp.getActivityTypeColumnValue(PageName.ContactsPage, Workspace.InvestorWorkspace))){
							appLog.info("Activity type coloumn is displaying in descending order");
						}else{
							appLog.error("Activity type coloumn is not displaying in descending order");
							saa.assertTrue(false, "Activity type coloumn is not displaying in descending order");
						}
					}else{
						appLog.error("Sorting icon is not displaying at activity type coloumn");
						saa.assertTrue(false, "Sorting icon is not displaying at activity type coloumn");
					}			
				}else{
					appLog.info("Not able to select range dropodwn value");
					sa.assertTrue(false, "Not able to select range dropdown value ");
				}	
				if(click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN))	{
					appLog.info("CLicked on alert history cross icon");
				}else{
					appLog.error("Not able to click on alert history cross icon");
					saa.assertTrue(false, "Not able to click on alert history cross icon");
				}				
				}else{
					appLog.error("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}
			}else{
				appLog.error("Not able to click on created Contact");
				saa.assertTrue(false, "Not able to click on created Contact");
			}
		}else{
			appLog.error("Not able to click on Contacts tab");
			saa.assertTrue(false, "Not able to click on Contacts tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();			
	}
	
	@Test
	public void M12tc056_DeleteContactUpdateEmailIDOfContactAndVerifyErrorMessage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert saa=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
		if(click(driver, bp.getEditButton(60), "Edit button", action.SCROLLANDBOOLEAN)){
			if(sendKeys(driver, cp.getEmailId(60), "test@gmail.com", "Contact1 email id", action.SCROLLANDBOOLEAN)){
				if(click(driver, bp.getSaveButton(60), "Save button", action.SCROLLANDBOOLEAN)){
					appLog.info("click on save button");
					if(cp.getEmailIdViewMode(60).getText().trim().contains("test@gmail.com")){
						appLog.info("Email id get changed successfully");
						switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
						scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
								Workspace.InvestorWorkspace.toString() + " View.");
						if (bp.verifyErrorMessageOnPage(
								ContactPageErrorMessage.errorMessageAfterAdminAndCRMUserRegistrationInvestorWorkspace,
								cp.getErrorMessageAfterAdminAndCRMUserRegistrationInvestorWorkspace(60),
								"Error Message after admin Registration on Contact page for Investor Workspace")) {
							appLog.info("Error Message is verified  on Contact page for Investor workspace");
						} else {
							saa.assertTrue(false,
									"Error Message is not verified on Contact page for fundraising workspace.Expected:"
											+ ContactPageErrorMessage.errorMessageAfterAdminAndCRMUserRegistrationInvestorWorkspace
											+ " Actual"
											+ getText(driver,
													cp.getErrorMessageAfterAdminAndCRMUserRegistrationInvestorWorkspace(60),
													"Error Message before admin registration on contact page", action.BOOLEAN));
						}					
					}else{
						appLog.info("Email id does not get changed successfully");
						saa.assertTrue(false, "Email id does not get changed successfully");
					}	
				}else{
					appLog.info("Not able to click on save button");
					saa.assertTrue(false, "Not able to click on save button");
				}			
				}else{
					appLog.info("Not able to enter value in email text box");
					saa.assertTrue(false, "Not able to enter value in email tetx box");
				}		
		}else{
			appLog.error("Not able to click on edit icon");
			saa.assertTrue(false, "Not able to click on edit icon");
		}
		}else{
				appLog.error("Not able to click on created contact");
				saa.assertTrue(false, "Not able to click on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");
			saa.assertTrue(false, "Not able to click on contact tab");
		}
	switchToDefaultContent(driver);
	if(bp.clickOnTab(TabName.ContactTab)){
		if(cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)){
		if (fp.clickUsingCssSelectorPath("input[value=Delete]", "delete button")) {
			//if(click(driver,cp.getDeleteButtonContactsPage(60), "Delete button", action.SCROLLANDBOOLEAN)){
			switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
			ThreadSleep(3000);
			if(cp.verifyDeletedContact(M12Contact2FirstName+" "+M12Contact2LastName)){
				appLog.info("Contact get deleted successfully ");
			}else{
				appLog.error("Contact does not get deleted successfully ");
				saa.assertTrue(false, "Contact does not get deleted successfully ");
			}			
		}else{
			appLog.error("Not able to click on delete button");
			saa.assertTrue(false, "Not able to click on delete button");
		}		
		}else{
			appLog.error("Not able to click on created contact");
			saa.assertTrue(false, "Not able to click on created contact");
		}
	}else{
		appLog.error("Not able to click on contact tab");
		saa.assertTrue(false, "Not able to click on contact tab");
	}
	if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					List<WebElement> ele=FindElements(driver, "//a[text()='"+M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName+"']", "Contact name");		
					//if(click(driver, ele.get(0), "Contact1 name", action.SCROLLANDBOOLEAN)){
					//List<WebElement> ele=BaseLib.edriver.findElements(By.cssSelector("a[title='"+M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName+"']"));
					scrollDownThroughWebelement(driver, ele.get(0), "contact name");
					boolean flag=true;
					try {
					clickUsingJavaScript(driver, ele.get(0), "contact name");
					}
					catch(Exception e) {
						flag=false;
						e.printStackTrace();
					}
					if(flag){
						String errorMessage=switchToAlertAndGetMessage(driver, 60, action.GETTEXT);   
						if(errorMessage.contains(ContactPageErrorMessage.ContactemailChangedErrorMessage)){
							appLog.info("Error Message is verified");
						}else{
							appLog.info("Error Message is not verified");
							sa.assertTrue(false, "Error Message is not verified");
						}
						switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
						if(isAlertPresent(driver)){
							appLog.error("Alert popup is displaying");
							saa.assertTrue(false, "Alert popup is displaying");
						}else{
							appLog.info("Alert popup get closed successfully");
						}
					}else{
						appLog.error("Not able to click on contact name");
						saa.assertTrue(false, "Not able to click on contact name");
					}	
					if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
						if(bp.clickOnActiivityTypeLinkBasedOnContact("Firm Profile Updated", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName)){
						//	if (fp.clickUsingCssSelectorPath("div#IDInvestorAccountACTALTINV a[title=\"Go to Firm\"]", "go to firm")) {
						if (clickUsingJavaScript(driver,  fp.getGoToFirmButton(PageName.FundsPage,Workspace.InvestorWorkspace,60), "Go to firm button")) {
						//if(click(driver, fp.getGoToFirmButton(PageName.FundsPage,Workspace.InvestorWorkspace,60), "Go to firm button", action.SCROLLANDBOOLEAN)){
						String errorMessage=switchToAlertAndGetMessage(driver, 60, action.GETTEXT);   
						if(errorMessage.contains(ContactPageErrorMessage.ContactemailChangedErrorMessage)){
							appLog.info("Error Message is verified");
						}else{
							appLog.info("Error Message is not verified");
							sa.assertTrue(false, "Error Message is not verified");
						}
						switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
						if(isAlertPresent(driver)){
							appLog.error("Alert popup is displaying");
							saa.assertTrue(false, "Alert popup is displaying");
						}else{
							appLog.info("ALert popup get closed successfully");
						}
						if(click(driver, hp.getFirmProfileUpdateCloseButton(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "CLose button", action.SCROLLANDBOOLEAN)){
							appLog.info("Clicked on firm profile updated popup close button");
						}else{
							appLog.error("Not able to click on firm profile updtaed popup close buton");
							saa.assertTrue(false, "Not able to click on firm profile updtaed popup close buton");
						}
					}else{
						appLog.error("Not able to click on go to firm button");
						saa.assertTrue(false, "Not able to click on go to firm button");
					}		
						}else{
							appLog.error("Not able to click on Firm profile updated link");
							saa.assertTrue(false, "Not able to click on Firm profile updated link");
						}
					}else{
						appLog.error("Not able to select value from the show dropdown");
						saa.assertTrue(false, "Not able to select value from the show dropdown");
					}
					if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
						if(bp.clickOnActiivityTypeLinkBasedOnContact("Contact Profile Updated", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName)){
						//if (fp.clickUsingCssSelectorPath("div#IDInvestorContactACTALTINV a[title='Go to Contact]", "go to contact")) {
						if (clickUsingJavaScript(driver, fp.getGoToContactButton(PageName.FundsPage,Workspace.InvestorWorkspace,60), "Go to Contact button")) {	
						//if(click(driver, fp.getGoToContactButton(PageName.FundsPage,Workspace.InvestorWorkspace,60), "Go to Contact button", action.SCROLLANDBOOLEAN)){
						String errorMessage=switchToAlertAndGetMessage(driver, 60, action.GETTEXT);   
						if(errorMessage.contains(ContactPageErrorMessage.ContactemailChangedErrorMessage)){
							appLog.info("Error Message is verified");
						}else{
							appLog.info("Error Message is not verified");
							sa.assertTrue(false, "Error Message is not verified");
						}
						switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
						if(isAlertPresent(driver)){
							appLog.error("Alert popup is displaying");
							saa.assertTrue(false, "Alert popup is displaying");
						}else{
							appLog.info("ALert popup get closed successfully");
						}
						if(click(driver, hp.getContactProfileUpdateCloseButton(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "CLose button", action.SCROLLANDBOOLEAN)){
							appLog.info("Clicked on Contact profile updated popup close button");
						}else{
							appLog.error("Not able to click on Contact profile updtaed popup close buton");
							saa.assertTrue(false, "Not able to click on Contact profile updtaed popup close buton");
						}
					}else{
						appLog.error("Not able to click on go to Contact button");
						saa.assertTrue(false, "Not able to click on go to Contact button");
					}		
						}else{
							appLog.error("Not able to click on contact profile updated link");
							saa.assertTrue(false, "Not able to click on contact profile updated link");
						}
					}else{
						appLog.error("Not able to select value from the show dropdown");
						saa.assertTrue(false, "Not able to select value from the show dropdown");
					}				
					if(click(driver, bp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN)){
						appLog.info("Clicked on alert history aross icon");
					}else{
						appLog.error("Not able to click on alert history cross icon");
						saa.assertTrue(false, "Not able to click on alert history cross icon");
					}				
				}else{
					appLog.error("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}				
			}else{
				appLog.error("Not able to click on fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}		
		}else{
			appLog.error("Not able ot click on funds tab");
			saa.assertTrue(false, "Not able ot click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
				if(click(driver, bp.getEditButton(60), "Edit button", action.SCROLLANDBOOLEAN)){
					if(sendKeys(driver, cp.getEmailId(60),M12Contact1EmailId, "Contact1 email id", action.SCROLLANDBOOLEAN)){
						if(click(driver, bp.getSaveButton(60), "Save button", action.SCROLLANDBOOLEAN)){
							appLog.info("click on save button");
							if(cp.getEmailIdViewMode(60).getText().trim().contains(M12Contact1EmailId)){
								appLog.info("Email id get changed successfully");
								}else{
								appLog.info("Email id does not get changed successfully");
								saa.assertTrue(false, "Email id does not get changed successfully");
							}	
						}else{
							appLog.info("Not able to click on save button");
							saa.assertTrue(false, "Not able to click on save button");
						}			
						}else{
							appLog.info("Not able to enter value in email text box");
							saa.assertTrue(false, "Not able to enter value in email tetx box");
						}		
				}else{
					appLog.error("Not able to click on edit icon");
					saa.assertTrue(false, "Not able to click on edit icon");
				}
				}else{
						appLog.error("Not able to click on created contact");
						saa.assertTrue(false, "Not able to click on created contact");
					}	
		}else{
			appLog.info("Not able ot click on contact tab");
			saa.assertTrue(false, "Not able ot click on contact tab");
		}
		if(bp.clickOnTab(TabName.HomeTab)){
			if(hp.restoreValuesFromRecycleBin(M12Contact2FirstName+" "+M12Contact2LastName)){
				appLog.info("Able to restore value from the recycle bin:"+M12Contact2FirstName+" "+M12Contact2LastName);
			}else{
				appLog.error("Not able to restore value from the recycle bin:"+M12Contact2FirstName+" "+M12Contact2LastName);
				saa.assertTrue(false,"Not able to restore value from the recycle bin:"+M12Contact2FirstName+" "+M12Contact2LastName);
			}			
		}else{
			appLog.info("Not able to click on home tab");
			saa.assertTrue(false, "Not able to click on home tab");
		}
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)){
				appLog.info("Contact get restored successfully");
			}else{			
				appLog.error("Contact does not restored");
				saa.assertTrue(false, "Contact does not get restore");
			}			
		}else{
			appLog.error("Not able to click on contact tab");
			saa.assertTrue(false, "Not able to click on contact tab");
		}
		lp.CRMlogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();		
	}
	
	@Test
	public void M12tc057_DeleteDocumentFromCRMSideAndVerifyErrorMessage(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert saa=new SoftAssert();
		String CommonfolderPath=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
		String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileCommon).split("<break>");
		String SharedfolderPath=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileShared).split("<break>");
		String StandardfolderPath=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
		String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
				excelLabel.UploadedFileStandard).split("<break>");
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
		if(fp.verifyFolderPathdummy(CommonfolderPath, null, null, M12FundName1+"UP", PageName.FundsPage, Workspace.InvestorWorkspace, 60)){
			if(bp.verifyDeleteViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, CommonDocument[1], 60, "Yes")){
				appLog.info(CommonDocument[1]+" file get deleted successfully");				
			}else{
				appLog.error(CommonDocument[1]+" file does not get deleted successfully");
				saa.assertTrue(false, CommonDocument[1]+" file does not get deleted successfully");
			}			
		}else{
			appLog.error("Folder path not verified");
			saa.assertTrue(false, "Folder path not verified");
		}
		if(fp.verifyFolderPathdummy(SharedfolderPath, null, null, M12FundName1+"UP", PageName.FundsPage, Workspace.InvestorWorkspace, 60)){
			if(bp.verifyDeleteViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, SharedDocument[1], 60, "Yes")){
				appLog.info(SharedDocument[1]+" file get deleted successfully");				
			}else{
				appLog.error(SharedDocument[1]+" file does not get deleted successfully");
				saa.assertTrue(false, SharedDocument[1]+" file does not get deleted successfully");
			}			
		}else{
			appLog.error("Folder path not verified");
			saa.assertTrue(false, "Folder path not verified");
		}		
		if(fp.verifyFolderPathdummy(StandardfolderPath, M12Institution1+"NUP", M12LimitedPartner1, M12FundName1+"UP", PageName.FundsPage, Workspace.InvestorWorkspace, 60)){
			if(bp.verifyDeleteViaDownArrow(PageName.FundsPage, Workspace.InvestorWorkspace, StandardDocument[1], 60, "Yes")){
				appLog.info(StandardDocument[1]+" file get deleted successfully");				
			}else{
				appLog.error(StandardDocument[1]+" file does not get deleted successfully");
				saa.assertTrue(false, StandardDocument[1]+" file does not get deleted successfully");
			}			
		}else{
			appLog.error("Folder path not verified");
			saa.assertTrue(false, "Folder path not verified");
		}		
			}else{
				appLog.error("Not able to click on fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}		
		}else{
			appLog.error("Not able ot click on funds tab");
			saa.assertTrue(false, "Not able ot click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",CommonDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")){
				appLog.info("Document Viewed Alert is displaying for doc:"+CommonDocument[1]);				
			}else{
				appLog.error("Document Viewed Alert is not displaying for doc:"+CommonDocument[1]);
				saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+CommonDocument[1]);
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor", CommonDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")){
				appLog.info("Document Downloaded Alert is displaying for doc:"+CommonDocument[1]);				
			}else{
				appLog.error("Document Downloaded Alert is not displaying for doc:"+CommonDocument[1]);
				saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+CommonDocument[1]);
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor", SharedDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")){
				appLog.info("Document Viewed Alert is displaying for doc:"+SharedDocument[1]);				
			}else{
				appLog.error("Document Viewed Alert is not displaying for doc:"+SharedDocument[1]);
				saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+SharedDocument[1]);
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor", SharedDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")){
				appLog.info("Document Downloaded Alert is displaying for doc:"+SharedDocument[1]);				
			}else{
				appLog.error("Document Downloaded Alert is not displaying for doc:"+SharedDocument[1]);
				saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+SharedDocument[1]);
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor", StandardDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")){
				appLog.info("Document Viewed Alert is displaying for doc:"+StandardDocument[1]);				
			}else{
				appLog.error("Document Viewed Alert is not displaying for doc:"+StandardDocument[1]);
				saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+StandardDocument[1]);
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor", StandardDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")){
				appLog.info("Document Downloaded Alert is displaying for doc:"+StandardDocument[1]);				
			}else{
				appLog.error("Document Downloaded Alert is not displaying for doc:"+StandardDocument[1]);
				saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+StandardDocument[1]);
			}
			if(bp.clickOnDocumentNameInAlert(CommonDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1+"UP", "Investor")){
				String ParentID = switchOnWindow(driver);
				if (ParentID != null) {
				if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
						"File not found") != null) {
					appLog.info("Document not found error is displaying");
				} else {
					appLog.error("Document not found error message is not displaying");
				saa.assertTrue(false, "Document not found error message is not displaying");
				}
				driver.close();
				driver.switchTo().window(ParentID);
		} else {
			appLog.info("No new window is open");
		saa.assertTrue(false, "No new window is open");
		}
			}else{
				appLog.error("Not able to click on document");
				saa.assertTrue(false, "Not able to click on document");
			}
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));
			if(bp.clickOnDocumentNameInAlert(SharedDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1+"UP", "Investor")){
				String ParentID = switchOnWindow(driver);
				if (ParentID != null) {
				if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
						"File not found") != null) {
					appLog.info("Document not found error is displaying");
				} else {
					appLog.error("Document not found error message is not displaying");
				saa.assertTrue(false, "Document not found error message is not displaying");
				}
				driver.close();
				driver.switchTo().window(ParentID);
		} else {
			appLog.info("No new window is open");
		saa.assertTrue(false, "No new window is open");
		}
			}else{
				appLog.error("Not able to click on document");
				saa.assertTrue(false, "Not able to click on document");
			}
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30,bp.getFrame( PageName.HomePage, 60));
			if(bp.clickOnDocumentNameInAlert(StandardDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1+"UP", "Investor")){
				String ParentID = switchOnWindow(driver);
				if (ParentID != null) {
				if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
						"File not found") != null) {
					appLog.info("Document not found error is displaying");
				} else {
					appLog.error("Document not found error message is not displaying");
				saa.assertTrue(false, "Document not found error message is not displaying");
				}
				driver.close();
				driver.switchTo().window(ParentID);
		} else {
			appLog.info("No new window is open");
		saa.assertTrue(false, "No new window is open");
		}
			}else{
				appLog.error("Not able to click on document");
				saa.assertTrue(false, "Not able to click on document");
			}
		}else{
			appLog.error("Not able to click on Home tab");
			saa.assertTrue(false, "Not able to click on Home tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null,CommonDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")){
						appLog.info("Document Viewed Alert is displaying for doc:"+CommonDocument[1]);				
					}else{
						appLog.error("Document Viewed Alert is not displaying for doc:"+CommonDocument[1]);
						saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+CommonDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,CommonDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")){
						appLog.info("Document Downloaded Alert is displaying for doc:"+CommonDocument[1]);				
					}else{
						appLog.error("Document Downloaded Alert is not displaying for doc:"+CommonDocument[1]);
						saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+CommonDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null,SharedDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")){
						appLog.info("Document Viewed Alert is displaying for doc:"+SharedDocument[1]);				
					}else{
						appLog.error("Document Viewed Alert is not displaying for doc:"+SharedDocument[1]);
						saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+SharedDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,SharedDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")){
						appLog.info("Document Downloaded Alert is displaying for doc:"+SharedDocument[1]);				
					}else{
						appLog.error("Document Downloaded Alert is not displaying for doc:"+SharedDocument[1]);
						saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+SharedDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null,StandardDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")){
						appLog.info("Document Viewed Alert is displaying for doc:"+StandardDocument[1]);				
					}else{
						appLog.error("Document Viewed Alert is not displaying for doc:"+StandardDocument[1]);
						saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+StandardDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,StandardDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")){
						appLog.info("Document Downloaded Alert is displaying for doc:"+StandardDocument[1]);				
					}else{
						appLog.error("Document Downloaded Alert is not displaying for doc:"+StandardDocument[1]);
						saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+StandardDocument[1]);
					}
					if(bp.clickOnDocumentNameInAlert(CommonDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
						if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
						saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}
					}else{
						appLog.error("Not able to click on document");
						saa.assertTrue(false, "Not able to click on document");
					}
					switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if(bp.clickOnDocumentNameInAlert(SharedDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
						if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
						saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}
					}else{
						appLog.error("Not able to click on document");
						saa.assertTrue(false, "Not able to click on document");
					}
				switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
					if(bp.clickOnDocumentNameInAlert(StandardDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
						if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
						saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}
					}else{
						appLog.error("Not able to click on document");
						saa.assertTrue(false, "Not able to click on document");
					}
					switchToFrame(driver, 30,bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if(click(driver, bp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN)){
						appLog.info("Clicked on alert history aross icon");
					}else{
						appLog.error("Not able to click on alert history cross icon");
						saa.assertTrue(false, "Not able to click on alert history cross icon");
					}				
				}else{
					appLog.error("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}				
			}else{
				appLog.error("Not able to click on fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}		
		}else{
			appLog.error("Not able to click on funds tab");
			saa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (click(driver, fp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60),
						"Alert History Link", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,CommonDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")){
						appLog.info("Document Viewed Alert is displaying for doc:"+CommonDocument[1]);				
					}else{
						appLog.error("Document Viewed Alert is not displaying for doc:"+CommonDocument[1]);
						saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+CommonDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,CommonDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")){
						appLog.info("Document Downloaded Alert is displaying for doc:"+CommonDocument[1]);				
					}else{
						appLog.error("Document Downloaded Alert is not displaying for doc:"+CommonDocument[1]);
						saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+CommonDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,SharedDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")){
						appLog.info("Document Viewed Alert is displaying for doc:"+SharedDocument[1]);				
					}else{
						appLog.error("Document Viewed Alert is not displaying for doc:"+SharedDocument[1]);
						saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+SharedDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,SharedDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")){
						appLog.info("Document Downloaded Alert is displaying for doc:"+SharedDocument[1]);				
					}else{
						appLog.error("Document Downloaded Alert is not displaying for doc:"+SharedDocument[1]);
						saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+SharedDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,StandardDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")){
						appLog.info("Document Viewed Alert is displaying for doc:"+StandardDocument[1]);				
					}else{
						appLog.error("Document Viewed Alert is not displaying for doc:"+StandardDocument[1]);
						saa.assertTrue(false, "Document Viewed Alert is not displaying for doc:"+StandardDocument[1]);
					}
					if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,StandardDocument[1],  M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")){
						appLog.info("Document Downloaded Alert is displaying for doc:"+StandardDocument[1]);				
					}else{
						appLog.error("Document Downloaded Alert is not displaying for doc:"+StandardDocument[1]);
						saa.assertTrue(false, "Document Downloaded Alert is not displaying for doc:"+StandardDocument[1]);
					}
					if(bp.clickOnDocumentNameInAlert(CommonDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
						if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
						saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}
					}else{
						appLog.error("Not able to click on document");
						saa.assertTrue(false, "Not able to click on document");
					}
					switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if(bp.clickOnDocumentNameInAlert(SharedDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
						if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
						saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}
					}else{
						appLog.error("Not able to click on document");
						saa.assertTrue(false, "Not able to click on document");
					}
					switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if(bp.clickOnDocumentNameInAlert(StandardDocument[1], "Document Viewed", M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.FundsPage, null, null)){
						String ParentID = switchOnWindow(driver);
						if (ParentID != null) {
						if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
						saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}
					}else{
						appLog.error("Not able to click on document");
						saa.assertTrue(false, "Not able to click on document");
					}
					switchToFrame(driver, 30,bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");
					if(click(driver, bp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN)){
						appLog.info("Clicked on alert history aross icon");
					}else{
						appLog.error("Not able to click on alert history cross icon");
						saa.assertTrue(false, "Not able to click on alert history cross icon");
					}				
				}else{
					appLog.error("Not able to click on alert history link");
					saa.assertTrue(false, "Not able to click on alert history link");
				}	
			}else{
				appLog.info("Not able ot click on created contact");
				saa.assertTrue(false,"Not able ot click on created contact");
			}					
		}else{
			appLog.error("Not able to click on contact tab");
			saa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		saa.assertAll();	
	}

	@Test
	public void M12tc058_1_VerifyNoNewDocumentViewedAlertWhenInvestorTriesToAccessAlreadyDeletedDocument(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		SoftAssert saa=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		saa = bp.writeAlertCountInExcel(M12FundName1+"NUP", M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP",
				Workspace.InvestorWorkspace, "M12Contact1","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(saa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		bp = new BasePageBusinessLayer(driver);
		InvestorFirmPageBusinesslayer ifp=new InvestorFirmPageBusinesslayer(driver);
		DisclaimerPageBussinessLayer dp=new DisclaimerPageBussinessLayer(driver);
		AllFirmsPageBusinesslayer ap=new AllFirmsPageBusinesslayer(driver);
		int i=0;
		lp.investorLogin(M12Contact1EmailId, adminPassword);
		ThreadSleep(3000);
		if(click(driver, ifp.getRecentActivitiesTab(60), "Recent activities tab", action.SCROLLANDBOOLEAN)){
			String[] CommonDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
					excelLabel.UploadedFileCommon).split("<break>");
			String[] SharedDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
					excelLabel.UploadedFileShared).split("<break>");
			String[] StandardDocument = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",
					excelLabel.UploadedFileStandard).split("<break>");
			if(dp.clickOnDocument("Current Investment", M12FundName1+"UP", CommonDocument[1], 60, ap.getScrollBox(60))){
				appLog.info("Clicked on document:"+CommonDocument[1]);
				String ParentID = switchOnWindow(driver);
				if (ParentID != null) {
					if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
							saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);				
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}				
			}else{
				appLog.error("Not able to click on document:"+CommonDocument[1]);
				saa.assertTrue(false,"Not able to click on document:"+CommonDocument[1]);
			}
			if(dp.clickOnDocument("Current Investment", M12FundName1+"UP", SharedDocument[1], 60, ap.getScrollBox(60))){
				appLog.info("Clicked on document:"+SharedDocument[1]);
				String ParentID = switchOnWindow(driver);
				if (ParentID != null) {
					if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
							saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);				
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}				
			}else{
				appLog.error("Not able to click on document:"+SharedDocument[1]);
				saa.assertTrue(false,"Not able to click on document:"+SharedDocument[1]);
			}
			if(dp.clickOnDocument("Current Investment", M12FundName1+"UP", StandardDocument[1], 60, ap.getScrollBox(60))){
				appLog.info("Clicked on document:"+StandardDocument[1]);
				String ParentID = switchOnWindow(driver);
				if (ParentID != null) {
					if (isDisplayed(driver, bp.getFileNotFoundErrorMessage(60), "Visibility", 60,
								"File not found") != null) {
							appLog.info("Document not found error is displaying");
						} else {
							appLog.error("Document not found error message is not displaying");
							saa.assertTrue(false, "Document not found error message is not displaying");
						}
						driver.close();
						driver.switchTo().window(ParentID);				
				} else {
					appLog.info("No new window is open");
				saa.assertTrue(false, "No new window is open");
				}				
			}else{
				appLog.error("Not able to click on document:"+StandardDocument[1]);
				saa.assertTrue(false,"Not able to click on document:"+StandardDocument[1]);
			}		
		}else{
			appLog.error("Not able to click on recent activities tab");
			saa.assertTrue(false, "Not able to click on recent activities tab");
		}
				int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
				int ContactAlertCount = Integer.parseInt(M12ContactPageALertCount) + i;
				int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
				ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,	"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
				ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,"M12Fund1", excelLabel.FundsPageALertCount);
				ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName,"M12Contact1", excelLabel.ContactPageALertCount);			
		lp.investorLogout();
		sa.combineAssertions(saa);
		sa.assertAll();
		saa.assertAll();	
		}
	
	@Test
	public void M12tc058_2_VerifyNoNewDocumentViewedAlertWhenInvestorTriesToAccessAlreadyDeletedDocument(){
	LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
	ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
	FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
	switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
	if (bp.matchALertRecordCOunt(
			ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,
					"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
			PageName.HomePage, null)) {
		appLog.info("Record count get matched at home page");
	} else {
		appLog.info("Record count not match at home page");
		sa.assertTrue(false, "Recoord count not matched at home page");
	}
	switchToDefaultContent(driver);
	scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M12FundName1+"NUP")) {
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
					Workspace.InvestorWorkspace.toString() + " View.");
			if (click(driver, fp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60),
					"Alert History Link", action.SCROLLANDBOOLEAN)) {
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
			if (bp.matchALertRecordCOunt(
						ExcelUtils.readData("FilePath", excelLabel.FundName,
								"M12Fund1", excelLabel.FundsPageALertCount),
						PageName.FundsPage, Workspace.InvestorWorkspace)) {
					appLog.info("Record count get matched at fund page");
				} else {
					appLog.info("Record count not match at fund page");
					sa.assertTrue(false, "Recoord count not matched at fund page");
				}
				if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
						"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
					appLog.info("Clicked on alert history cross icon");
				} else {
					appLog.info("Not able to click on alert history cross icon");
					sa.assertTrue(false, "Not able to click on alert history cross icon");
				}
			} else {
				appLog.info("Not able to click on alert history link");
				sa.assertTrue(false, "Not able to click on alert history link");
			}
		} else {
			appLog.info("Not able to click on created fund");
			sa.assertTrue(false, "Not able to click on created tab");
		}
	} else {
		appLog.info("Not able to click on funds tab");
		sa.assertTrue(false, "Not able to lcick on funds tab");
	}
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)) {
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
					Workspace.InvestorWorkspace.toString() + " View.");
			if (click(driver, cp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60),
					"ALert history link", action.SCROLLANDBOOLEAN)) {
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
			if (bp.matchALertRecordCOunt(
						ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact1",
								excelLabel.ContactPageALertCount),
						PageName.ContactsPage, Workspace.InvestorWorkspace)) {
					appLog.info("Record count get matched at Contact page");
				} else {
					appLog.info("Record count not match at Contact page");
					sa.assertTrue(false, "Recoord count not matched at Contact page");
				}
				if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
						"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
					appLog.info("Clicked on alert history cross icon");
				} else {
					appLog.info("Not able to click on alert history cross icon");
					sa.assertTrue(false, "Not able to click on alert history cross icon");
				}
			} else {
				appLog.info("Not able to click on alert history link");
				sa.assertTrue(false, "Not able to click on alert history link");
			}
		} else {
			appLog.info("Not able to click on created contact");
			sa.assertTrue(false, "Not able to click on created contact");
		}
	} else {
		appLog.info("Noit able to click on contact tab");
		sa.assertTrue(false, "Not able to click on contact tab");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();		
	}

	@Test
	public void M12tc059_UpdateDocumentFromCRMSideAndVerifyOpeningOfUpdatedDocumentFromAlerts(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		String CommonPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.CommonPath);
		String StdPath=ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.StandardPath);
		String SharedfileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileShared);
		String CommonfileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileCommon);
		String StandardfileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.UpdatedFileStandard);
		String[] update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.KeyWord_For_Search).split("<break>");
		SoftAssert saa=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");	
				if(fp.updateFile(CommonPath, CommonfileName, null, null, FolderType.Common,System.getProperty("user.dir")+"//UploadFiles/Module12/INV/ExistingUpdate/Common//"+update_fileName[0], null, null, ContentGridArrowKeyFunctions.Update,20, PageName.FundsPage,"Yes",null, Workspace.InvestorWorkspace)) {
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
							Workspace.InvestorWorkspace.toString() + " View.");	
					if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {
					List<String> returnlist = compareMultipleListOnBasisOfTitle(driver, update_fileName[0], fp.getContentGridDocNameListOnBasisOfTitle(Workspace.InvestorWorkspace, PageName.FundsPage));
						if (returnlist.isEmpty()) {
							appLog.info("updated file "+update_fileName[0]+" is successfully found");
						}
						else {
							appLog.error("the updated file's name is not found on content grid");
							saa.assertTrue(false, "the updated file's name is not found on content grid");
						}
					}else{
							appLog.error("Not able to click on refresh button");
							saa.assertTrue(false, "Not able to click on refresh button");
						}
				}else{
					appLog.error("Common folder file is not updated");
					saa.assertTrue(false, "Common folder  file is not updated");
				}
						if(fp.updateFile(shdPath, SharedfileName, null, null, FolderType.Shared,System.getProperty("user.dir")+"//UploadFiles/Module12/INV/ExistingUpdate/Shared//"+update_fileName[1], null, null, ContentGridArrowKeyFunctions.Update,20, PageName.FundsPage,"Yes",null, Workspace.InvestorWorkspace)) {
							switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
							scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
									Workspace.InvestorWorkspace.toString() + " View.");	
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {
							ThreadSleep(2000);
								List<String> returnlist = compareMultipleListOnBasisOfTitle(driver, update_fileName[1], fp.getContentGridDocNameListOnBasisOfTitle(Workspace.InvestorWorkspace, PageName.FundsPage));
								if (returnlist.isEmpty()) {
									appLog.info("updated file "+update_fileName[1]+" is successfully found");
								}
								else {
									appLog.error("the updated file's name is not found on content grid");
									saa.assertTrue(false, "the updated file's name is not found on content grid");
								}
							}else{
									appLog.error("Not able to click on refresh button");
									saa.assertTrue(false, "Not able to click on refresh button");
								}
						}else{
							appLog.error("Shared folder file is not updated");
							saa.assertTrue(false, "Shared folder  file is not updated");
						}
						if(fp.updateFile(StdPath, StandardfileName, M12Institution1+"NUP", M12LimitedPartner1, FolderType.Standard,System.getProperty("user.dir")+"//UploadFiles/Module12/INV/ExistingUpdate/Standard//"+update_fileName[2], multiInstance.AllInvestor, null, ContentGridArrowKeyFunctions.Update,20, PageName.FundsPage,"Yes",null, Workspace.InvestorWorkspace)) {
							switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
							scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
									Workspace.InvestorWorkspace.toString() + " View.");	
							if (click(driver, fp.ContentGridRefreshBtn(Workspace.InvestorWorkspace, 30), "refresh button on content grid", action.SCROLLANDBOOLEAN)) {
							List<String> returnlist = compareMultipleListOnBasisOfTitle(driver, update_fileName[2], fp.getContentGridDocNameListOnBasisOfTitle(Workspace.InvestorWorkspace, PageName.FundsPage));
								if (returnlist.isEmpty()) {
									appLog.info("updated file "+update_fileName[2]+" is successfully found");
								}
								else {
									appLog.error("the updated file's name is not found on content grid");
									saa.assertTrue(false, "the updated file's name is not found on content grid");
								}
							}else{
									appLog.error("Not able to click on refresh button");
									saa.assertTrue(false, "Not able to click on refresh button");
								}
						}else{
							appLog.error("Standard folder file is not updated");
							saa.assertTrue(false, "Standard folder  file is not updated");
						}		
			}else{
				appLog.error("Not able to click on created fund");
				saa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			saa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);		
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
			if(bp.clickOnDocumentNameInAlert(CommonfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1+"UP", "Investor")){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid) ) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid)  || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[0].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }   
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
			if(bp.clickOnDocumentNameInAlert(SharedfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1+"UP", "Investor")){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[1].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       } else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }  
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
			if(bp.clickOnDocumentNameInAlert(StandardfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, hp.getHomeAlertScrollBox(60), PageName.HomePage, M12FundName1+"UP", "Investor")){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[2].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[2] +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       } else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }  
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}
		}else{
			appLog.info("Not able to click on home tab");
			saa.assertTrue(false, "Not able to click on home tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");	
			if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");	
				if(bp.clickOnDocumentNameInAlert(CommonfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.FundsPage, null, null)){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[0].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }   else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
					Workspace.InvestorWorkspace.toString() + " View.");	
			if(bp.clickOnDocumentNameInAlert(SharedfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.FundsPage, null, null)){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[1].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[1] +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }   else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
					Workspace.InvestorWorkspace.toString() + " View.");	
			if(bp.clickOnDocumentNameInAlert(StandardfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.FundsPage, null, null)){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[2].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }   else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}		
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
					Workspace.InvestorWorkspace.toString() + " View.");	
			
			if(click(driver, bp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN)){
				appLog.info("Clicked on alert history cross icon");
			}else{
				appLog.error("Not able to click on alert history cross icon");
				saa.assertTrue(false, "Not able to click on alert history cross icon");
			}		
			}else{
				appLog.error("Not able ot click on alert history link");
				saa.assertTrue(false, "Not able ot click on alert history link");
			}
			}else{
				appLog.error("Not able to click on created fund");
				saa.assertTrue(false, "Not able ot click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			saa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)){
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");	
			if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if(bp.clickOnDocumentNameInAlert(CommonfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.ContactsPage, null, null)){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid)|| windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[0].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[0]  +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }   else{
				    	   appLog.error("Not able to click on Download Link");
					       saa.assertTrue(false, "Not able to click on Download Link");
				       }
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
					Workspace.InvestorWorkspace.toString() + " View.");	
			if(bp.clickOnDocumentNameInAlert(SharedfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.ContactsPage, null, null)){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[1].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[1]  +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }   
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
					Workspace.InvestorWorkspace.toString() + " View.");	
			if(bp.clickOnDocumentNameInAlert(StandardfileName, "Document Viewed", M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), PageName.FundsPage, null, null)){
				      String parentid=switchOnWindow(driver);
				      if(parentid!=null){
				    	  String childChildWindow=null;
				    	  String childWindowID=null;
				    	  Set<String> lst = driver.getWindowHandles();
							Iterator<String> I1 = lst.iterator();
							while (I1.hasNext()) {
								String windowID = I1.next();
								if (windowID.equalsIgnoreCase(parentid)) {
									appLog.info("Parent Id is Matched");
								} else {
									childWindowID = windowID;
									appLog.info("Stroged child Window Id");
									break;
								}
							}
				     if(click(driver, bp.getDownloadLink(60), "Download link", action.SCROLLANDBOOLEAN)){
				    	 Robot rob;
				    	    try {
				    	     rob = new Robot();
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_ENTER);
				    	     rob.keyRelease(KeyEvent.VK_ENTER);
				    	     ThreadSleep(10000);
				    	     rob.keyPress(KeyEvent.VK_CONTROL);
				    	     rob.keyPress(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_J);
				    	     rob.keyRelease(KeyEvent.VK_CONTROL);
				    	    } catch (AWTException e) {
				    	     // TODO Auto-generated catch block
				    	     e.printStackTrace();
				    	    }
				    	    // ele.sendKeys(Keys.CONTROL+"j");
				    	    ThreadSleep(10000);
				    	    Set<String> lst1 = driver.getWindowHandles();
				    	    Iterator<String> I2 = lst1.iterator();
				    	    while (I2.hasNext()) {
				    	     String windowID = I2.next();
				    	     if (windowID.equalsIgnoreCase(parentid) || windowID.equalsIgnoreCase(childWindowID)) {
				    	      appLog.info("Parent Id or child Id is Matched");
				    	     } else {
				    	      childChildWindow = windowID;
				    	      appLog.info("Stroged  child child Window Id");
				    	      driver.switchTo().window(childChildWindow);
				    	      break;
				    	     }
				    	    }
				    	    System.out.println(getURL(driver, 30));
				    	    if (childChildWindow == null) {
				    	     try {
				    	      rob = new Robot();
				    	      rob.keyPress(KeyEvent.VK_TAB);
				    	      rob.keyRelease(KeyEvent.VK_TAB);
				    	      rob.keyPress(KeyEvent.VK_ENTER);
				    	      rob.keyRelease(KeyEvent.VK_ENTER);
				    	      ThreadSleep(10000);
				    	      rob.keyPress(KeyEvent.VK_CONTROL);
				    	      rob.keyPress(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_J);
				    	      rob.keyRelease(KeyEvent.VK_CONTROL);
				    	      parentid = switchOnWindow(driver);
				    	     } catch (AWTException e) {
				    	      // TODO Auto-generated catch block
				    	      e.printStackTrace();
				    	     }
				    	    }
				        ThreadSleep(10000);
				      	   String fileName = bp.getDownloadedFileName();
				        	   if (fileName.contains(update_fileName[2].split("\\.")[0])) {
				        		   appLog.info("File name is matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        	   } else {
				        		   appLog.info("File name is not the matched. Expected: " + update_fileName[2] +"Actual"+fileName);
				        		   saa.assertTrue(false,"File name is not the matched. Expected: " + update_fileName[2]  +"Actual"+fileName);
				        	   }
				        	   driver.close();
				        	   driver.switchTo().window(childWindowID);
				       }   else{
				    	   appLog.error("Not able to click on Download Link");
					        saa.assertTrue(false, "Not able to click on Download Link");
				       }
				     driver.close();
				     driver.switchTo().window(parentid);
				      }else{
				    	  appLog.error("No new window is open");
				    	  saa.assertTrue(false, "No new window is open");
				      }
			}else{
				appLog.error("Not able to click on document name");
				saa.assertTrue(false, "Not able to click on document name");
			}		
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
					Workspace.InvestorWorkspace.toString() + " View.");	
			if(click(driver, bp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60), "Alert history cross icon", action.SCROLLANDBOOLEAN)){
				appLog.info("Clicked on alert history cross icon");
			}else{
				appLog.error("Not able to click on alert history cross icon");
				saa.assertTrue(false, "Not able to click on alert history cross icon");
			}		
			}else{
				appLog.error("Not able ot click on alert history link");
				saa.assertTrue(false, "Not able ot click on alert history link");
			}
			}else{
				appLog.error("Not able to click on created contact");
				saa.assertTrue(false, "Not able to click on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");
			saa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		saa.assertAll();		
	}
	
	@Test
	public void M12tc060_1_VerifyDocumentViewedDocumentDownloadedAlertForUpdatedFile(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		sa = bp.writeAlertCountInExcel(M12FundName1+"NUP", M12Contact2FirstName, M12Contact2LastName,
				Workspace.InvestorWorkspace, "M12Contact2","M12Fund1");
		lp.CRMlogout();
		sa.combineAssertions(sa);
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		DisclaimerPageBussinessLayer dp=new DisclaimerPageBussinessLayer(driver);
		AllFirmsPageBusinesslayer ap=new AllFirmsPageBusinesslayer(driver);
		InvestorFirmPageBusinesslayer ifp=new InvestorFirmPageBusinesslayer(driver);
		 sa=new SoftAssert();
		 int i=0;
		String[] update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, "M12tc059_UpdateDocumentFromCRMSideAndVerifyOpeningOfUpdatedDocumentFromAlerts", excelLabel.KeyWord_For_Search).split("<break>");
		System.err.println(update_fileName[0]);
		System.err.println(update_fileName[1]);
		System.err.println(update_fileName[2]);
		lp.investorLogin(M12Contact2EmailId, adminPassword);
		if (click(driver, ifp.getRecentActivitiesTab(60), "Recent Activities tab", action.SCROLLANDBOOLEAN)) {
			ThreadSleep(3000);
		if(dp.clickOnDocument("Current Investment", M12FundName1+"UP", update_fileName[0], 60, ap.getScrollBox(60))){
			String parentID = switchOnWindow(driver);
			if (parentID != null) {
				i++;
				if (click(driver, ap.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
					appLog.info("Clicked on download link");
					i++;
					bp.clickOnDownloadDocumentCancelButton();
				} else {
					appLog.info("Not able to click on download link");
					sa.assertTrue(false, "Not able to click on download ink");
				}
				driver.close();
				driver.switchTo().window(parentID);
			} else {
				appLog.error("No new window is opening after clicking on the document name link of '"
						+ update_fileName[0] + "'.");
				sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
						+ update_fileName[0] + "'.");
			}		
			}else{
				appLog.info("Not able to click on document name");
				sa.assertTrue(false, "Not able to click on document name");
			}
		if(dp.clickOnDocument("Current Investment", M12FundName1+"UP", update_fileName[1], 60, ap.getScrollBox(60))){
			String parentID = switchOnWindow(driver);
			if (parentID != null) {
				i++;
				if (click(driver, ap.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
					appLog.info("Clicked on download link");
					i++;
					bp.clickOnDownloadDocumentCancelButton();
				} else {
					appLog.info("Not able to click on download link");
					sa.assertTrue(false, "Not able to click on download ink");
				}
				driver.close();
				driver.switchTo().window(parentID);
			} else {
				appLog.error("No new window is opening after clicking on the document name link of '"
						+ update_fileName[1] + "'.");
				sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
						+ update_fileName[1] + "'.");
			}			
			}else{
				appLog.info("Not able to click on document name");
				sa.assertTrue(false, "Not able to click on document name");
			}
		ThreadSleep(2000);
		if(dp.clickOnDocument("Current Investment", M12FundName1+"UP", update_fileName[2], 60, ap.getScrollBox(60))){
			String parentID = switchOnWindow(driver);
			if (parentID != null) {
				i++;
				if (click(driver, ap.getDownloadLink(60), "Download button", action.SCROLLANDBOOLEAN)) {
					appLog.info("Clicked on download link");
					i++;
					bp.clickOnDownloadDocumentCancelButton();
				} else {
					appLog.info("Not able to click on download link");
					sa.assertTrue(false, "Not able to click on download ink");
				}
				driver.close();
				driver.switchTo().window(parentID);
			} else {
				appLog.error("No new window is opening after clicking on the document name link of '"
						+ update_fileName[2] + "'.");
				sa.assertTrue(false, "No new window is opening after clicking on the document name link of '"
						+ update_fileName[2] + "'.");
			}			
			}else{
				appLog.info("Not able to click on document name");
				sa.assertTrue(false, "Not able to click on document name");
			}
		ThreadSleep(2000);
		int homeAlertCount = Integer.parseInt(M12HomePageALertCount) + i;
		int ContactAlertCount = Integer.parseInt(M12Contact2PageAlertCount) + i;
		int FundAlertCount = Integer.parseInt(M12FundsPageALertCount) + i;
		System.out.println(ContactAlertCount);
		ExcelUtils.writeData(String.valueOf(homeAlertCount), "FilePath", excelLabel.TestCases_Name,
				"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount);
		ExcelUtils.writeData(String.valueOf(ContactAlertCount), "FilePath", excelLabel.ContactName, "M12Contact2",
				excelLabel.ContactPageALertCount);
		ExcelUtils.writeData(String.valueOf(FundAlertCount), "FilePath", excelLabel.FundName,
				"M12Fund1", excelLabel.FundsPageALertCount);
		}else{
			appLog.error("Not able to click on recent activities tab");
			sa.assertTrue(false, "Not able to click on recent activities tab");
		}
		lp.investorLogout();
		sa.assertAll();				
	}
	
	@Test
	public void M12tc060_2_VerifyDocumentViewedDocumentDownloadedAlertForUpdatedFile(){	
	LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
	SoftAssert sa = new SoftAssert();
	FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
	lp.CRMLogin(CRMUser1EmailID, adminPassword);
	String[] update_fileName = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, "M12tc059_UpdateDocumentFromCRMSideAndVerifyOpeningOfUpdatedDocumentFromAlerts", excelLabel.KeyWord_For_Search).split("<break>");
	scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
	switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
	if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
			update_fileName[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
			M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
		appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
				+ M12Contact2UpdatedLastName);
	} else {
		appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
				+ " " + M12Contact2UpdatedLastName);
		sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
				+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
	}
	if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
			update_fileName[1], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
			M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
		appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
				+ M12Contact2UpdatedLastName);
	} else {
		appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
				+ " " + M12Contact2UpdatedLastName);
		sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
				+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
	}
	if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UP", "Investor",
			update_fileName[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
			M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
		appLog.info("Grid data is verified for Document Viewed for contact " + M12Contact2UpdatedFirstName + " "
				+ M12Contact2UpdatedLastName);
	} else {
		appLog.error("Grid data is not verified for Document Viewed for contact " + M12Contact2UpdatedFirstName
				+ " " + M12Contact2UpdatedLastName);
		sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
				+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
	}
	if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
			update_fileName[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
			M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
		appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
				+ M12Contact2UpdatedLastName);
	} else {
		appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
				+ " " + M12Contact2UpdatedLastName);
		sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
				+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
	}
	if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
			update_fileName[1], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, 
			M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
		appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
				+ M12Contact2UpdatedLastName);
	} else {
		appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
				+ " " + M12Contact2UpdatedLastName);
		sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
				+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
	}
	if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UP", "Investor",
			update_fileName[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, 
			M12Contact2UpdatedFirmName,hp.getHomeAlertScrollBox(60),"Date")) {
		appLog.info("Grid data is verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName + " "
				+ M12Contact2UpdatedLastName);
	} else {
		appLog.error("Grid data is not verified for Document Downloaded for contact " + M12Contact2UpdatedFirstName
				+ " " + M12Contact2UpdatedLastName);
		sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
				+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
	}
	if (bp.matchALertRecordCOunt(ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,"M2tc025_CheckValuesInSelectboxesFirmProfilePage", excelLabel.HomePageAlertCount),
			PageName.HomePage, null)) {
		appLog.info("Record count get matched at home page");
	} else {
		appLog.info("Record count not match at home page");
		sa.assertTrue(false, "Recoord count not matched at home page");
	}
	switchToDefaultContent(driver);
	scrollDownThroughWebelement(driver, bp.getFundsTab(60), "Funds tab");
	if (bp.clickOnTab(TabName.FundsTab)) {
		if (fp.clickOnCreatedFund(M12FundName1+"NUP")) {
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
					Workspace.InvestorWorkspace.toString() + " View.");
			if (click(driver, fp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60),
					"Alert History Link", action.SCROLLANDBOOLEAN)) {
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, update_fileName[0],
						M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
						M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
					appLog.info("Grid data is verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				} else {
					appLog.error("Grid data is not verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				}
				if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, update_fileName[1],
						M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
						M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
					appLog.info("Grid data is verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				} else {
					appLog.error("Grid data is not verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				}
				if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, update_fileName[2],
						M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
						M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
					appLog.info("Grid data is verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				} else {
					appLog.error("Grid data is not verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				}
				if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
						update_fileName[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
						M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
					appLog.info("Grid data is verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				} else {
					appLog.error("Grid data is not verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				}
				if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
						update_fileName[1], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
						M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
					appLog.info("Grid data is verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				} else {
					appLog.error("Grid data is not verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				}
				if (bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null,
						update_fileName[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
						M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
					appLog.info("Grid data is verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				} else {
					appLog.error("Grid data is not verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				}
				if (bp.matchALertRecordCOunt(
						ExcelUtils.readData("FilePath", excelLabel.FundName,
								"M12Fund1", excelLabel.FundsPageALertCount),
						PageName.FundsPage, Workspace.InvestorWorkspace)) {
					appLog.info("Record count get matched at fund page");
				} else {
					appLog.info("Record count not match at fund page");
					sa.assertTrue(false, "Recoord count not matched at fund page");
				}
				if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
						"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
					appLog.info("Clicked on alert history cross icon");
				} else {
					appLog.info("Not able to click on alert history cross icon");
					sa.assertTrue(false, "Not able to click on alert history cross icon");
				}
			} else {
				appLog.info("Not able to click on alert history link");
				sa.assertTrue(false, "Not able to click on alert history link");
			}
		} else {
			appLog.info("Not able to click on created fund");
			sa.assertTrue(false, "Not able to click on created tab");
		}
	} else {
		appLog.info("Not able to click on funds tab");
		sa.assertTrue(false, "Not able to lcick on funds tab");
	}
	switchToDefaultContent(driver);
	if (bp.clickOnTab(TabName.ContactTab)) {
		if (cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)) {
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
					Workspace.InvestorWorkspace.toString() + " View.");
			if (click(driver, cp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60),
					"ALert history link", action.SCROLLANDBOOLEAN)) {
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60),
						Workspace.InvestorWorkspace.toString() + " View.");
				if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null,
						update_fileName[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
						M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
					appLog.info("Grid data is verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				} else {
					appLog.error("Grid data is not verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				}
				if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, update_fileName[1],
						M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
						M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
					appLog.info("Grid data is verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				} else {
					appLog.error("Grid data is not verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				}
				if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, update_fileName[2],
						M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
						M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
					appLog.info("Grid data is verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				} else {
					appLog.error("Grid data is not verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					sa.assertTrue(false, "Grid data is not verified for Document Viewed for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				}
				if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
						update_fileName[0], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
						M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
					appLog.info("Grid data is verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				} else {
					appLog.error("Grid data is not verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				}
				if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
						update_fileName[1], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
						M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
					appLog.info("Grid data is verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				} else {
					appLog.error("Grid data is not verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				}
				if (bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null,
						update_fileName[2], M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName,
						M12Contact2UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60),"Date")) {
					appLog.info("Grid data is verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				} else {
					appLog.error("Grid data is not verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
					sa.assertTrue(false, "Grid data is not verified for Document Downloaded for contact "
							+ M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName);
				}
				if (bp.matchALertRecordCOunt(
						ExcelUtils.readData("FilePath", excelLabel.ContactName, "M12Contact2",
								excelLabel.ContactPageALertCount),
						PageName.ContactsPage, Workspace.InvestorWorkspace)) {
					appLog.info("Record count get matched at Contact page");
				} else {
					appLog.info("Record count not match at Contact page");
					sa.assertTrue(false, "Recoord count not matched at Contact page");
				}
				if (click(driver, fp.getAlertHistoryCrossIcon(Workspace.InvestorWorkspace, 60),
						"Alert history cross icon", action.SCROLLANDBOOLEAN)) {
					appLog.info("Clicked on alert history cross icon");
				} else {
					appLog.info("Not able to click on alert history cross icon");
					sa.assertTrue(false, "Not able to click on alert history cross icon");
				}
			} else {
				appLog.info("Not able to click on alert history link");
				sa.assertTrue(false, "Not able to click on alert history link");
			}
		} else {
			appLog.info("Not able to click on created contact");
			sa.assertTrue(false, "Not able to click on created contact");
		}
	} else {
		appLog.info("Not able to click on contact tab");
		sa.assertTrue(false, "Not able to click on contact tab");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();	
}
	
	@Test
	public void M12tc061_UpdateInvestmentInfoCRMSideAndVerifyAlerts(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		WebElement ele=null;	
		SoftAssert saa1=new SoftAssert();
		SoftAssert saa2=new SoftAssert();
		SoftAssert saa3=new SoftAssert();
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				if (click(driver, fp.getInvestmentInfo(Workspace.InvestorWorkspace), "Investment info",
						action.SCROLLANDBOOLEAN)) {
					if (click(driver, fp.getInvestmentInfoEdit(60), "investment info edit button",
							action.SCROLLANDBOOLEAN)) {
						if (sendKeys(driver, fp.getInvestmentInfoFundNameTxtbox(60), M12FundName1+"UPINV","Fund name text box",
								action.BOOLEAN)) {
							if (click(driver, fp.getInvestmentInfoSaveBtn(40), "Investment Info save button",
									action.SCROLLANDBOOLEAN)) {
								System.out.println(">>>>>>>>>>>>>>>>>>>>"+fp.getFirmName(60).getText());
								if (getText(driver, fp.getFirmName(60), "Fund Name", action.SCROLLANDBOOLEAN).trim()
										.contains(M12FundName1+"UP")) {
									appLog.info("Fund Name is successfully updated and verfied.");
								} else {
									appLog.error("Fund Name is not Updated.");
									sa.assertTrue(false, "Fund Name is not Updated.");
								}
							} else {
								appLog.error("Save button is not clicked so ,Updated fund name is not able to save.");
								sa.assertTrue(false,"Save button is not clicked so ,Updated fund name is not able to save.");
							}
						} else {
							appLog.error(
									"fund name text box is not visible on Investment Info edit mode so, not able to enter value.");
							sa.assertTrue(false,"fund name text box is not visible on Investment Info edit mode so, not able to enter value.");
						}
					} else {
						appLog.error("Investment Info edit button is not clickable so, not able to enter value.");
						sa.assertTrue(false,"Investment Info edit button is not clickable so, not able to enter value.");
					}
					if(click(driver, fp.getInvestmentInfoCancelButton(60), "Investment info cancel button", action.SCROLLANDBOOLEAN)){
						appLog.info("Clicked on cancel button");
					}else{
						appLog.info("Not able to click on cancel button");
						sa.assertTrue(false, "Not able to click on cancel button");						
					}
				} else {
					appLog.info("Not able to click on investment info link");
					sa.assertTrue(false, "Not able to click on investment info link");
				}
				switchToDefaultContent(driver);
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		if(bp.clickOnTab(TabName.HomeTab)){
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
			 saa1=bp.verifyUpdatedNameinALerts(PageName.HomePage, M12FundName1+"UPINV",columnName.fundName, null);
			sa.combineAssertions(saa1);	
			ThreadSleep(3000);
			ele =FindElement(driver, "//span[text()='Contact']", "contact column", action.SCROLLANDBOOLEAN, 30);
			click(driver, ele, "", action.BOOLEAN);
			ThreadSleep(3000);
			 saa2=bp.verifyUpdatedNameinALerts(PageName.HomePage,M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName,columnName.contactName, null);
			sa.combineAssertions(saa2);	
			ThreadSleep(3000);
			 ele =FindElement(driver, "//span[text()='Firm']", "firm column", action.SCROLLANDBOOLEAN, 30);
			click(driver, ele, "", action.BOOLEAN);
			 saa3=bp.verifyUpdatedNameinALerts(PageName.HomePage,M12Contact1UpdatedFirmName,columnName.institutionName, null);
			sa.combineAssertions(saa3);
			}else{
				appLog.error("Not able to click on home tab");
				sa.assertTrue(false, "Not able to click on home tab");
			}
			switchToDefaultContent(driver);
			if(bp.clickOnTab(TabName.FundsTab)){
				if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor section view");
				if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
					ThreadSleep(2000);
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor section view");
					ThreadSleep(3000);
					ele =FindElement(driver, "//span[text()='Contact']", "contact column", action.SCROLLANDBOOLEAN, 30);
					click(driver, ele, "", action.BOOLEAN);
					 saa2=bp.verifyUpdatedNameinALerts(PageName.FundsPage,M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName,columnName.contactName, Workspace.InvestorWorkspace);
					sa.combineAssertions(saa2);	
					ThreadSleep(3000);
					ele =FindElement(driver, "//span[text()='Firm']", "firm column", action.SCROLLANDBOOLEAN, 30);
						click(driver, ele, "", action.BOOLEAN);
					 saa3=bp.verifyUpdatedNameinALerts(PageName.FundsPage,M12Contact1UpdatedFirmName,columnName.institutionName, Workspace.InvestorWorkspace);
					sa.combineAssertions(saa3);		
					
				}else{
					appLog.error("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}				
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}			
		}else{
			appLog.error("Not able ot click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP",M12Contact1LastName+"LNNP", null)){
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor section view");
				if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
					ThreadSleep(2000);
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor section view");
					ThreadSleep(3000);
					ele =FindElement(driver, "//span[text()='Contact']", "contact column", action.SCROLLANDBOOLEAN, 30);
					click(driver, ele, "", action.BOOLEAN);
					ThreadSleep(3000);
					 saa2=bp.verifyUpdatedNameinALerts(PageName.ContactsPage,M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName,columnName.contactName, Workspace.InvestorWorkspace);
					sa.combineAssertions(saa2);	
					ThreadSleep(3000);
					ele =FindElement(driver, "//span[text()='Firm']", "firm column", action.SCROLLANDBOOLEAN, 30);
					click(driver, ele, "", action.BOOLEAN);
					 saa3=bp.verifyUpdatedNameinALerts(PageName.ContactsPage,M12Contact1UpdatedFirmName,columnName.institutionName, Workspace.InvestorWorkspace);
					sa.combineAssertions(saa3);						
				}else{
					appLog.error("Not able to click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}				
			}else{
				appLog.error("Not able to click on created Contact");
				sa.assertTrue(false, "Not able to click on created Contact");
			}			
		}else{
			appLog.error("Not able ot click on Contact tab");
			sa.assertTrue(false, "Not able to click on Contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();				
	}
	
	@Test
	public void M12tc062_VerifyRemovalOfContactProfileUpdateAndFirmProfileUpdatedAlertAfterRemovingCompleteAccessForAContact(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert sa=new SoftAssert();
		String[] Document = ExcelUtils.readData("filepath", excelLabel.TestCases_Name,"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",excelLabel.UploadedFileStandard).split("<break>");
		WebElement ele=null;
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.ContactTab)){
		if(cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contacts Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
		if(click(driver, cp.getRemoveContactAccessButton(Workspace.InvestorWorkspace, 60), "Remove contact access button", action.SCROLLANDBOOLEAN)){
			if (fp.clickUsingCssSelectorPath("a[title=Remove]", "remove button")) {	
			//	ele=FindElement(driver,"//label[text()='"+M12FundName1+"UPINV"+"']/../..//a[@title='Remove']", "Fund 1 Remove link", action.SCROLLANDBOOLEAN, 60);
			//	if(click(driver, ele, "Remove Link", action.SCROLLANDBOOLEAN)){
				String ParentID=switchOnWindow(driver);
				if(ParentID!=null){
					ThreadSleep(5000);
					switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
					driver.switchTo().window(ParentID);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 30));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30), "Fundraising Workspace Section view");
					if(click(driver, cp.getRemoveContactAccessButton(Workspace.InvestorWorkspace, 60), "Remove contact access close button", action.SCROLLANDBOOLEAN)){
						List<WebElement> listOfWorkspace=FindElements(driver, "//span[contains(@id,'ContactDetail_grid1-cell-1-')]//label", "WorkspacesName");
						if(listOfWorkspace.contains(M12FundName1+"UPINV")){
							appLog.info("Contact access does not remove for fund "+M12FundName1+"UPINV");
							sa.assertTrue(false, "Contact access does not remove for fund "+M12FundName1+"UPINV");					
						}else{
							appLog.info("Contact access successfully remove for fund "+M12FundName1+"UPINV");
						}
						if(click(driver, cp.getRemoveContactAccessPopupCloseButton(Workspace.FundraisingWorkspace, 60), "Close button", action.SCROLLANDBOOLEAN)){
							appLog.info("Clicked on close button");
						}else{
							appLog.info("Not able to click on close button");
							sa.assertTrue(false, "Not able to click on close button");
						}
					}else{
						appLog.info("Not able to clcik on remove contact access close button");
						sa.assertTrue(false, "Not able to click on remove contact access close button");
					}	
			}else{
					appLog.info("No new window to switch");
					sa.assertTrue(false, "No new window to switch");
				}
				}else{
					appLog.info("Not bale ot click on remove link");
					sa.assertTrue(false, "Not able to click on remove link");
				}
		}else{
			appLog.error("Not able to clcik on remove contact access button");
			sa.assertTrue(false, "Not able to clcik on remove contact access button");
		}		
		}else{
			appLog.error("Not able to click on created contact");
			sa.assertTrue(false, "Not able ot click on created contact");
		}
		}else{
			appLog.error("Not able to click on contact tab so cannot remove contact access");
			sa.assertTrue(false, "Not able to click on contact tab so cannot remove contact access");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
			ThreadSleep(2000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			if(hp.verifyAlertOnHomePage("Contact Profile Updated", M12FundName1+"UPINV", "Investor", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact2 is displaying");
				sa.assertTrue(false, "Contact profile related alert for contact2 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact2 is not displaying");					
			}		
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		ThreadSleep(2000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			if(hp.verifyAlertOnHomePage("Firm Profile Updated", M12FundName1+"UPINV", "Investor", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact2 is displaying");
				sa.assertTrue(false, "Firm profile related alert for contact2 is  displaying");
			}else{
				appLog.error("Firm profile related alert for contact2 is not displaying");
			}		
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		ThreadSleep(2000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Document Viewed")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UPINV", "Investor", Document[2], M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, M12Contact2UpdatedFirmName, hp.getHomeAlertScrollBox(60), "date")){
				appLog.error("Document Viewed related alert for contact2 is displaying");
			}else{
				appLog.error("Document Viewed related alert for contact2 is not displaying");
				sa.assertTrue(false, "Document Viewed related alert for contact2 is not displaying");		
			}				
		}else{
			appLog.error("Not able to select Document Viewed option");
			sa.assertTrue(false, "Not able to select Document Viewed option");
		}
		ThreadSleep(2000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Document Downloaded")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UPINV", "Investor", Document[2], M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, M12Contact2UpdatedFirmName, hp.getHomeAlertScrollBox(60), "date")){
				appLog.error("Document Downloaded related alert for contact2 is displaying");
			}else{
				appLog.error("Document Downloaded related alert for contact2 is not displaying");
				sa.assertTrue(false, "Document Downloaded related alert for contact2 is not displaying");		
			}				
		}else{
			appLog.error("Not able to select Document Downloaded option");
			sa.assertTrue(false, "Not able to select Document Downloaded option");
		}
		}else{
			appLog.error("Not able to clcik on home tab");
			sa.assertTrue(false, "Not able to click on tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor section view");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "ALert history link", action.SCROLLANDBOOLEAN)){
					switchToDefaultContent(driver);
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor section view");
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact2 is displaying");
					sa.assertTrue(false, "Contact profile related alert for contact2 is displaying");
				}else{
					appLog.error("Contact profile related alert for contact2 is not displaying");
				}				
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
					ThreadSleep(2000);
					if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
						if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
							appLog.error("Firm profile related alert for contact 2 is displaying");
							sa.assertTrue(false, "Firm profile related alert for contact 2 is  displaying");	
						}else{
							appLog.error("Firm profile related alert for contact 2 is not displaying");
						}				
					}else{
						appLog.error("Not able to select firm profile updtaed option");
						sa.assertTrue(false, "Not able to select firm profile updtaed option");
					}
					ThreadSleep(2000);
					if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Document Viewed")){
						if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null, null, Document[2], M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, M12Contact2UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "date")){
							appLog.error("Document Viewed related alert for contact2 is displaying");
						}else{
							appLog.error("Document Viewed related alert for contact2 is not displaying");
							sa.assertTrue(false, "Document Viewed related alert for contact2 is not displaying");		
						}				
					}else{
						appLog.error("Not able to select Document Viewed option");
						sa.assertTrue(false, "Not able to select Document Viewed option");
					}
					ThreadSleep(3000);
					if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Document Downloaded")){
						if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, Document[2], M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, M12Contact2UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "date")){
							appLog.error("Document Downloaded related alert for contact2 is displaying");
						}else{
							appLog.error("Document Downloaded related alert for contact2 is not displaying");
							sa.assertTrue(false, "Document Downloaded related alert for contact2 is not displaying");		
						}				
					}else{
						appLog.error("Not able to select Document Downloaded option");
						sa.assertTrue(false, "Not able to select Document Downloaded option");
					}
				}else{
					appLog.error("Not able ot click on alert history link");
					sa.assertTrue(false, "Not able to click on alert history link");
				}
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact2FirstName, M12Contact2LastName, null)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contact Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				if (bp.verifyErrorMessageOnPage(ContactPageErrorMessage.errorMessageAfterAdminAndCRMUserRegistrationInvestorWorkspace,
						cp.getErrorMessageAfterAdminAndCRMUserRegistrationInvestorWorkspace(60),"Error Message after admin Registration on Contact page for Investor Workspace")) {
					appLog.info("Error Message is verified  on Contact page for Investor workspace");
				} else {
					sa.assertTrue(false,"Error Message is not verified on Contact page for Investor workspace.Expected:"+ ContactPageErrorMessage.errorMessageAfterAdminAndCRMUserRegistrationInvestorWorkspace
									+ " Actual"+ getText(driver,cp.getErrorMessageAfterAdminAndCRMUserRegistrationInvestorWorkspace(60),	"Error Message before admin registration on contact page", action.BOOLEAN));
				}				
			}else{
				appLog.error("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}				
		}else{
			appLog.error("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
	}
	
	@Test
	public void M12tc063_RemoveContactPartialAccessAndVerifyAlerts(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		SoftAssert sa=new SoftAssert();
		WebElement ele=null;
		String[] docNameFund1=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileShared).split("<break>");
		String[] docNameFund2=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileShared).split("<break>");
		String docNameInv=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc049_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.ContactTab)){
		if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.ContactsPage, 60), "Contacts Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
		if(click(driver, cp.getRemoveContactAccessButton(Workspace.InvestorWorkspace, 60), "Remove contact access button", action.SCROLLANDBOOLEAN)){
			if (fp.clickUsingCssSelectorPath("a[title=Remove]", "remove button")) {	
			//ele=FindElement(driver,"//label[text()='"+M12FundName2+"']/../..//a[@title='Remove']", "Fund 2 Remove link", action.SCROLLANDBOOLEAN, 60);
			//	if(click(driver, ele, "Remove Link", action.SCROLLANDBOOLEAN)){
				String ParentID=switchOnWindow(driver);
				if(ParentID!=null){
					ThreadSleep(5000);
					switchToAlertAndAcceptOrDecline(driver, 60, action.ACCEPT);
					driver.switchTo().window(ParentID);
					switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 30));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30), "Investor Workspace Section view");
					if(click(driver, cp.getRemoveContactAccessButton(Workspace.InvestorWorkspace, 60), "Remove contact access close button", action.SCROLLANDBOOLEAN)){
						List<WebElement> listOfWorkspace=FindElements(driver, "//span[contains(@id,'ContactDetail_grid1-cell-1-')]//label", "WorkspacesName");
						if(listOfWorkspace.contains(M12FundName2)){
							appLog.info("Contact access does not remove for fund "+M12FundName2);
							sa.assertTrue(false, "Contact access does not remove for fund "+M12FundName2);					
						}else{
							appLog.info("Contact access successfully remove for fund "+M12FundName2);
							}											
						if(click(driver, cp.getRemoveContactAccessPopupCloseButton(Workspace.FundraisingWorkspace, 60), "Close button", action.SCROLLANDBOOLEAN)){
							appLog.info("Clicked on close button");
						}else{
							appLog.info("Not able to click on close button");
							sa.assertTrue(false, "Not able to click on close button");
						}
					}else{
						appLog.info("Not able to clcik on remove contact access close button");
						sa.assertTrue(false, "Not able to click on remove contact access close button");
					}	
			}else{
					appLog.info("No new window to switch");
					sa.assertTrue(false, "No new window to switch");
				}
				}else{
					appLog.info("Not bale ot click on remove link");
					sa.assertTrue(false, "Not able to click on remove link");
				}
		}else{
			appLog.error("Not able to clcik on remove contact access button");
			sa.assertTrue(false, "Not able to clcik on remove contact access button");
		}		
		}else{
			appLog.error("Not able to click on created contact");
			sa.assertTrue(false, "Not able ot click on created contact");
		}
		}else{
			appLog.error("Not able to click on contact tab so cannot remove contact access");
			sa.assertTrue(false, "Not able to click on contact tab so cannot remove contact access");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 30));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30), "Investor Workspace Section view");
				if(fp.clickOnInstituionFolder(M12Institution1+"NUP", Workspace.InvestorWorkspace, 60)){
					if(fp.revokeContactAccess(M12Contact1EmailId, Workspace.InvestorWorkspace)){
						appLog.info("Remove contact access of contact1 successfully");					
					}else{
						appLog.error("Not able to remove contact access of contact1");
						sa.assertTrue(false, "Not able to remove contact access of contact1");
					}			
				}else{
					appLog.error("Not able to cick on institution name so cannot remove contact access");
					sa.assertTrue(false, "Not able to cick on institution name so cannot remove contact access");
				}
			}else{
				appLog.error("Not ableto click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			ThreadSleep(3000);
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");
				sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
			}				
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			ThreadSleep(3000);
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 1 is not displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
			}
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Document Viewed")){
			ThreadSleep(3000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UPINV", "Investor", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 1");
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Investor", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 and fund 2");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 and fund 2");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 2");
			}		
		}else{
			appLog.error("Not able to select Document Viewed option");
			sa.assertTrue(false, "Not able to select Document Viewed option");
		}
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Document Downloaded")){
			ThreadSleep(3000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UPINV", "Investor", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document Downloaded alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document  Downloaded alerts are not displaying for contact 1 and fund 1");
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Investor", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 and fund 2");
			}else{
				appLog.error("Document Downloaded alerts are not displaying for contact 1 and fund 2");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 and fund 2");
			}				
		}else{
			appLog.error("Not able to select Document Downloaded option");
			sa.assertTrue(false, "Not able to select Document Downloaded option");
		}
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Document Updated")){
			ThreadSleep(3000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UPINV", "Investor", docNameInv, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document  Updated alerts are not displaying for contact 1 and fund 1");
			}
		}else{
			appLog.error("Not able to select Document Updated option");
			sa.assertTrue(false, "Not able to select Document Updated option");
		}
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Document Uploaded")){
			ThreadSleep(3000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UPINV", "Investor", docNameInv, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document  Uploaded alerts are not displaying for contact 1 and fund 1");
			}
		}else{
			appLog.error("Not able to select Document Uploaded option");
			sa.assertTrue(false, "Not able to select Document Uploaded option");
		}
		}else{
			appLog.error("Not able to click on home tab");
			sa.assertTrue(false, "Not able to click on home tab");
		}		
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30), "Investor Workspace Section view");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
				switchToDefaultContent(driver);
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 30), "Investor Workspace Section view");
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
					ThreadSleep(3000);
					if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Contact profile related alert for contact 1 is displaying");
					}else{
						appLog.error("Contact profile related alert for contact 1 is not displaying");
						sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
					}	
				}else{
					appLog.error("Not able to select contact profile updtaed option");
					sa.assertTrue(false, "Not able to select contact profile updtaed option");
				}
				ThreadSleep(3000);
				if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					ThreadSleep(3000);
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}						
				}else{
					appLog.error("Not able to select Firm profile updtaed option");
					sa.assertTrue(false, "Not able to select Firm profile updtaed option");
				}	
				ThreadSleep(3000);
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Document Viewed")){
					ThreadSleep(3000);
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
						appLog.info("Document alerts are displaying for contact 1 and fund 1");
					}else{
						appLog.error("Document alerts are not displaying for contact 1 and fund 1");
						sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 1");
					}								
				}else{
					appLog.error("Not able to select Document Viewed option");
					sa.assertTrue(false, "Not able to select Document Viewed option");
				}	
				ThreadSleep(3000);
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Document Downloaded")){
					ThreadSleep(3000);
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
						appLog.info("Document alerts are displaying for contact 1 and fund 1");
					}else{
						appLog.error("Document alerts are not displaying for contact 1 and fund 1");
						sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 1");
					}								
				}else{
					appLog.error("Not able to select Document Downloaded option");
					sa.assertTrue(false, "Not able to select Document Downloaded option");
				}
				ThreadSleep(3000);
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Document Updated")){
					ThreadSleep(3000);
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated", null,null, docNameInv, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
						appLog.info("Document Updated alerts are displaying for contact 1 and fund 1");
					}else{
						appLog.error("Document Updated alerts are not displaying for contact 1 and fund 1");
						sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 and fund 1");
					}								
				}else{
					appLog.error("Not able to select Document Updated option");
					sa.assertTrue(false, "Not able to select Document Updated option");
				}
				ThreadSleep(3000);
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Document Uploaded")){
					ThreadSleep(3000);
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null,null, docNameInv, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
						appLog.info("Document Uploaded alerts are displaying for contact 1 and fund 1");
					}else{
						appLog.error("Document Uploaded alerts are not displaying for contact 1 and fund 1");
						sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 and fund 1");
					}								
				}else{
					appLog.error("Not able to select Document Uploaded option");
					sa.assertTrue(false, "Not able to select Document Uploaded option");
				}
			}else{
				appLog.error("Not able to click on alert history link");
				sa.assertTrue(false, "Not able to click on alert history link");
			}				
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName2)){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
			if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
				if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
						String errMsg = hp.getErrorMessage(60).getText().trim();
						if (errMsg.equalsIgnoreCase(HomePageErrorMessage.nodataToDisplayErroMessage)) {
							appLog.info("Contact profile related alerts are not displaying");
						} else {
							appLog.info("Contact profile related alerts are  displaying");
							sa.assertTrue(false, "Contact profile related alerts are  displaying");
						}
				}else{
					appLog.error("Not able to select contact profile updtaed option");
					sa.assertTrue(false, "Not able to select contact profile updtaed option");
				}
				if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
						String errMsg = hp.getErrorMessage(60).getText().trim();
						if (errMsg.equalsIgnoreCase(HomePageErrorMessage.nodataToDisplayErroMessage)) {
							appLog.info("Firm profile related alerts are not displaying");
						} else {
							appLog.info("Firm profile related alerts are  displaying");
							sa.assertTrue(false, "Firm profile related alerts are  displaying");
						}					
				}else{
					appLog.error("Not able to select Firm profile updtaed option");
					sa.assertTrue(false, "Not able to select Firm profile updtaed option");
				}		
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Document Viewed")){
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
						appLog.info("Document alerts are displaying for contact 1 and fund 2");
					}else{
						appLog.error("Document alerts are not displaying for contact 1 and fund 2");
						sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 2");
					}								
				}else{
					appLog.error("Not able to select Document viewed option");
					sa.assertTrue(false, "Not able to select Document viewed option");
				}	
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Document Downloaded")){
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null,null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
						appLog.info("Document Downloaded alerts are displaying for contact 1 and fund 2");
					}else{
						appLog.error("Document  Downloaded alerts are not displaying for contact 1 and fund 2");
						sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 and fund 2");
					}								
				}else{
					appLog.error("Not able to select Document Downloaded option");
					sa.assertTrue(false, "Not able to select Document Downloaded option");
				}		
			}else{
				appLog.error("Not able to click on alert history link");
				sa.assertTrue(false, "Not able to click on alert history link");
			}				
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
			if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN)){
				switchToDefaultContent(driver);
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
				ThreadSleep(3000);
				if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
					ThreadSleep(3000);
					if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Contact profile related alert for contact 1 is displaying");
					}else{
						appLog.error("Contact profile related alert for contact 1 is not displaying");
						sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
					}	
				}else{
					appLog.error("Not able to select contact profile updtaed option");
					sa.assertTrue(false, "Not able to select contact profile updtaed option");
				}
				ThreadSleep(3000);
				if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					ThreadSleep(3000);
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}		
				}else{
					appLog.error("Not able to select Firm profile updtaed option");
					sa.assertTrue(false, "Not able to select Firm profile updtaed option");
				}	
				ThreadSleep(3000);
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Document Viewed")){
					ThreadSleep(3000);
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
						appLog.info("Document alerts are displaying for contact 1 and fund 1");
					}else{
						appLog.error("Document alerts are not displaying for contact 1 and fund 1");
						sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 1");
					}	
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
						appLog.info("Document alerts are displaying for contact 1 and fund 2");
					}else{
						appLog.error("Document alerts are not displaying for contact 1 and fund 2");
						sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 2");
					}	
				}else{
					appLog.error("Not able to select Document Viewed option");
					sa.assertTrue(false, "Not able to select Document Viewed option");
				}	
				if(selectVisibleTextFromDropDown(driver,fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Document Downloaded")){
					ThreadSleep(3000);
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
						appLog.info("Document alerts are displaying for contact 1 and fund 1");
					}else{
						appLog.error("Document alerts are not displaying for contact 1 and fund 1");
						sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 1");
					}	
					if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null,null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
						appLog.info("Document Downloaded alerts are displaying for contact 1 and fund 2");
					}else{
						appLog.error("Document Downloaded alerts are not displaying for contact 1 and fund 2");
						sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 and fund 2");
					}	
				}else{
					appLog.error("Not able to select Document Downloaded option");
					sa.assertTrue(false, "Not able to select Document Downloaded option");
				}
			}else{
				appLog.error("Not able to click on alert history link");
				sa.assertTrue(false, "Not able to click on alert history link");
			}				
			}else{
				appLog.error("Not able to click on created contact");
				sa.assertTrue(false, "Not able to click on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");
			sa.assertTrue(false, "Not able to click on contact tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
		}
	
	@Test
	public void M12tc064_DeleteLastInvitedFolderAndVerifyAlerts(){
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		SoftAssert sa=new SoftAssert();
		String[] docNameFund1=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc049_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor section view");
			if(click(driver, fp.getManageFolderIcon(Workspace.InvestorWorkspace, 60), "Manage folder icon", action.SCROLLANDBOOLEAN)){
				String id=fp.getCreatedFolderId(shdPath, PageName.FundsPage,60);
				if(id!=null) {
					if(fp.clickOnDeleteFolderButton(id)) {
						ThreadSleep(2000);
						if(click(driver, fp.getFolderDeleteYesBtn(Workspace.InvestorWorkspace,PageName.ContactsPage, 60), "folder delete yes button", action.SCROLLANDBOOLEAN)) {
							appLog.info("clicked on "+shdPath+" folder delete yes button");
							if(click(driver, fp.getManageFolderCloseButton(Workspace.InvestorWorkspace, 30), "manage folder close icon", action.SCROLLANDBOOLEAN)) {
								appLog.info("clicked on manage folder close icon");
							}else {
								appLog.error("Not able to click on manage folder close icon");
								sa.assertTrue(false, "Not able to click on manage folder close icon");
							}
						}else {
							appLog.error("Not able to click on folder delete Yes button so cannot delete foler: "+shdPath);
							sa.assertTrue(false, "Not able to click on folder delete Yes button so cannot delete foler: "+shdPath);
						}
					}else {
						appLog.error("Not able to click on folder : "+shdPath+" delete icon so cannot delete folder in Investor workspace");
						sa.assertTrue(false, "Not able to click on folder : "+shdPath+" delete icon so cannot delete folder in Investor workspace");
					}
				}else {
					appLog.error("Not able to get child folder: "+shdPath+" id cannot delete it");
					sa.assertTrue(false, "Not able to get child folder: "+shdPath+" id cannot delete it");
				}			
			}else{
				appLog.error("Not able to click on manage folder icon");
				sa.assertTrue(false, "Not able to click on manage folder icon");
			}	
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on craeted fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
			switchToDefaultContent(driver);
			if(bp.clickOnTab(TabName.HomeTab)){
				scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
				switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
			if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			ThreadSleep(3000);
				if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 1 is displaying");
					sa.assertTrue(false, "Contact profile related alert for contact 1 is  displaying");
				}else{
					appLog.error("Contact profile related alert for contact 1 is not displaying");		
				}	
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
				ThreadSleep(3000);
				if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Firm profile related alert for contact 1 is displaying");
					sa.assertTrue(false, "Firm profile related alert for contact 1 is displaying");
				}else{
					appLog.error("Firm profile related alert for contact 1 is not displaying");		
				}
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")){
				ThreadSleep(3000);
				if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UPINV", "Investor", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Investor", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
					appLog.info("Document alerts are displaying for contact 1");
				}else{
					appLog.error("Document alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document alerts are not  displaying for contact 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UPINV", "Investor", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Investor", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1");
				}else{
					appLog.error("Document Downloaded alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1");
				}
				if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UPINV", "Investor", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UPINV", "Investor", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1");
				}			
			}else{
				appLog.error("Not able to select All Alerts  option");
				sa.assertTrue(false, "Not able to select All Alerts  option");
			}		
			}else{
				appLog.error("Not ableot click on home tab");
				sa.assertTrue(false, "Not able to click on home tabs");
			}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
		if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
				ThreadSleep(3000);
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 1 is displaying");
					sa.assertTrue(false, "Contact profile related alert for contact 1 is  not displaying");
				}else{
					appLog.error("Contact profile related alert for contact 1 is not displaying");	
				}	
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
				ThreadSleep(3000);
				if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Firm profile related alert for contact 1 is displaying");
					sa.assertTrue(false, "Firm profile related alert for contact 1 is displaying");
				}else{
					appLog.error("Firm profile related alert for contact 1 is not displaying");	
				}	
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "All Alerts")){
				ThreadSleep(3000);
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
		}
	
	@Test
	public void M12tc065_AgainInviteContactAndVerifyAlerts(){
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		SoftAssert sa=new SoftAssert();
		String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		String[] docNameFund1=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc049_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
				ThreadSleep(5000);
				if(click(driver, fp.getManageFolderIcon(Workspace.InvestorWorkspace, 60), "Manage folder", action.SCROLLANDBOOLEAN)){
					if(click(driver, fp.getAllFolderAddIcon(Workspace.InvestorWorkspace, 30), "Add folder button", action.BOOLEAN)){
					if(click(driver, fp.getFolderTypeRadioButton(FolderType.Shared, Workspace.InvestorWorkspace, PageName.ManageFolderPopUp, 30),"Shared radio button",action.BOOLEAN)) {
						appLog.info("Shared folder radio button is verified.");
					if(sendKeys(driver, fp.getParentFolderNameTextBox(Workspace.InvestorWorkspace, PageName.ManageFolderPopUp, 30), shdPath.split("\\(")[0], "Parent folder name text box", action.BOOLEAN)){
							if(click(driver, fp.getParentFolderSaveButton(Workspace.InvestorWorkspace, PageName.ManageFolderPopUp, 30), "Save button", action.BOOLEAN)){
							if (click(driver, fp.getManageFolderCloseButton(Workspace.InvestorWorkspace, 30), "close button on manage folder window", action.SCROLLANDBOOLEAN)) {
								appLog.info("close button on manage folder window is clicked");
									}else {
										appLog.error("close button is not clickable");
										sa.assertTrue(false, "close button is not clickable");
									}
								}else {
									appLog.error("save button on manage approvals window is not clickable");
									sa.assertTrue(false, "save button on manage approvals window is not clickable");
								}
							}else {
							appLog.error("folder name text box is not visible on manage folder window");
							sa.assertTrue(false, "folder name text box is not visible on manage folder window");
						}
						}else {
							appLog.error("radio button for Shared folder is not clickable");
							sa.assertTrue(false, "radio button for Shared folder is not clickable");
						}
					}else {
						appLog.error("add icon for all folders is not clickable");
						sa.assertTrue(false, "add icon for all folders is not clickable");
					}
				}else{
					appLog.error("Not able to click on mange folder");
					sa.assertTrue(false, "Not able to cretaed shared folder");
				}
				switchToDefaultContent(driver);
				if (fp.inviteContact(environment, mode, M12Institution1+"NUP", M12Contact1EmailId, shdPath,
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution2, M12Contact2EmailId, shdPath,
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				}else{
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");			
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");			
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 1 is not  displaying");
			}	
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 2 is displaying");			
			}else{
				appLog.error("Contact profile related alert for contact 2 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 2 is not  displaying");
			}
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 1 is not displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
			}
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 2 is not displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
			}
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")){
			ThreadSleep(2000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UPINV", "Investor", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Investor", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 2");
			}	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UPINV", "Investor", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Investor", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document Downloaded alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 2");
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UPINV", "Investor", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund 1");
			}	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UPINV", "Investor", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1" );
				sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 for fund 1");
			}			
		}else{
			appLog.error("Not able to select All Alerts option");
			sa.assertTrue(false, "Not able to select All Alerts option");
		}		
		}else{
			appLog.error("Not able to click on home tab");
			sa.assertTrue(false, "Not able to click on home tabs");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
		if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 1 is displaying");
				}else{
					appLog.error("Contact profile related alert for contact 1 is not displaying");	
					sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
				}				
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 2 is displaying");
				}else{
					appLog.error("Contact profile related alert for contact 2 is not displaying");	
					sa.assertTrue(false, "Contact profile related alert for contact 2 is not displaying");
				}
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 2 is displaying");
					}else{
						appLog.error("Firm profile related alert for contact 2 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
					}
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
		if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Contact profile related alert for contact 1 is displaying");
					}else{
						appLog.error("Contact profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
					}							
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}				
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1");
				}
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1");
				}
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 ");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1");
					sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}				
			}else{
				appLog.error("Not able to clcik on created contact");
				sa.assertTrue(false, "Not able to clcik on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");			
			sa.assertTrue(false, "Not able to click on contact tab");			
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
	}
	
	@Test
	public void M12tc066_CloseWorkspaceAndVerifyAlerts(){
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		SoftAssert sa=new SoftAssert();
		lp.CRMLogin(superAdminUserName, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				String expandIcon = getAttribute(driver, bp.getWorkspaceExpandIcon(60), "WorkspaceIcon", "title");
				if (expandIcon.equalsIgnoreCase("Show Section - Workspace")) {
					if (click(driver, bp.getWorkspaceExpandIcon(60), "Workspace Expand Icon",
							action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on workspace expand icon");
					} else {
						appLog.info("Not able to click on workspace expand icon");
						sa.assertTrue(false, "Not able to click on workspace expand icon");
					}
				} else {
					appLog.info("Workspace is in expanded form");
				}
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
			ThreadSleep(5000);
		if(fp.closeWorkSpace(Workspace.InvestorWorkspace, 60)){
			appLog.error("Workspace get closed successfully");
		}else{
			appLog.error("Not able to close the workspace");
			sa.assertTrue(false, "Not able to close the workspace");
		}
		}else{
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");			
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		driver.close();
		config(browserToLaunch);
		 fp=new FundsPageBusinessLayer(driver);
		 bp=new BasePageBusinessLayer(driver);
		 hp=new HomePageBusineesLayer(driver);
		 lp=new LoginPageBusinessLayer(driver);
		 sa=new SoftAssert();
		 lp.CRMLogin(CRMUser1EmailID, adminPassword);
		String[] docNameFund1=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc049_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			ThreadSleep(3000);
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");
				sa.assertTrue(false, "Contact profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");
			}	
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 2 is displaying");
				sa.assertTrue(false, "Contact profile related alert for contact 2 is displaying");
			}else{
				appLog.info("Contact profile related alert for contact 2 is not displaying");
			}	
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			ThreadSleep(3000);
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 1 is displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 1 is displaying");
			}else{
				appLog.info("Firm profile related alert for contact 1 is not displaying");		
			}
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 2 is displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 2 is  displaying");
			}else{
				appLog.error("Firm profile related alert for contact 2 is not displaying");	
			}
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")){
			ThreadSleep(3000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UPINV", "Investor", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UPINV", "Investor", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 and fund 1");
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Investor", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 and fund 2");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 and fund 2");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 and fund 2");
			}	
			ThreadSleep(10000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Investor", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 and fund 2");
			}else{
				appLog.error("Document Downloaded alerts are not displaying for contact 1 and fund 2");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 and fund 2");
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UPINV", "Investor", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 and fund 1");
			}	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UPINV", "Investor", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Updated alerts are  displaying for contact 1 and fund 1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 and fund 1");
				sa.assertTrue(false, "Document Updated alerts are  not displaying for contact 1 and fund 1");
			}			
		}else{
			appLog.error("Not able to select All Alerts option");
			sa.assertTrue(false, "Not able to select All Alerts option");
		}		
		switchToDefaultContent(driver);
	if(bp.clickOnTab(TabName.FundsTab)){
		if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
	if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
		scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
		if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
			ThreadSleep(3000);
			if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");
				sa.assertTrue(false, "Contact profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");		
			}
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 2 is displaying");
					sa.assertTrue(false, "Contact profile related alert for contact 2 is  displaying");
				}else{
					appLog.error("Contact profile related alert for contact 2 is not displaying");		
				}
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
			ThreadSleep(3000);
			if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 1 is displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 1 is not displaying");		
			}
			if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 2 is displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 2 is not displaying");	
			}
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "All Alerts")){
			ThreadSleep(3000);
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 1");
			}								
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Uploaded alerts are not  displaying for contact 1 for fund 1");
			}	
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 for fund 1");
			}			
		}else{
			appLog.error("Not able to select All ALerts option");
			sa.assertTrue(false, "Not able to select All ALerts  option");
		}				
	}else{
		appLog.error("Not able to click on alert histoy link");
		sa.assertTrue(false, "Not able to click on alert history link");
	}
		}else{
			appLog.error("Not able to click on created fund");
			sa.assertTrue(false, "Not able to click on created fund");
		}
	}else{
		appLog.error("Not able to click on funds tab");
		sa.assertTrue(false, "Not able to click on funds tab");
	}
	switchToDefaultContent(driver);
	lp.CRMlogout();
	sa.assertAll();					
	}
	
	@Test
	public void M12tc067_AgainInviteContactAfterCloseWorkspaceAndVerifyAlerts(){
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		SoftAssert sa=new SoftAssert();
		String shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath);
		String[] docNameFund1=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc049_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				if (fp.inviteContact(environment, mode, M12Institution2, M12Contact2EmailId, shdPath,
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution1+"NUP", M12Contact1EmailId, null, FolderType.Standard,
						"Upload", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution2, M12Contact2EmailId, null, FolderType.Standard,
						"Upload", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
					sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact2FirstName + " "
						+ M12Contact2LastName + "'.");
				}
				}else{
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");			
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");			
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 1 is not  displaying");
			}	
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 2 is displaying");			
			}else{
				appLog.error("Contact profile related alert for contact 2 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 2 is not  displaying");
			}
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 1 is not displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
			}
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 2 is not displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
			}
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UPINV", "Investor", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UPINV", "Investor", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
			}			
			ThreadSleep(5000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Investor", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document alerts are not  displaying for contact 1 for fund 2");
			}	
			ThreadSleep(10000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Investor", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document Downloaded alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 2");
			}
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UPINV", "Investor", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1 ");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund 1");
			}	
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UPINV", "Investor", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Updated alerts are not  displaying for contact 1 for fund 1");
			}			
		}else{
			appLog.error("Not able to select All Alerts option");
			sa.assertTrue(false, "Not able to select All Alerts option");
		}		
		}else{
			appLog.error("Not ableot click on home tab");
			sa.assertTrue(false, "Not able to click on home tabs");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
		if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 1 is displaying ");
				}else{
					appLog.error("Contact profile related alert for contact 1 is not displaying");	
					sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
				}
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 2 is displaying ");
				}else{
					appLog.error("Contact profile related alert for contact 2 is not displaying");	
					sa.assertTrue(false, "Contact profile related alert for contact 2 is not displaying");
				}
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 2 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 2 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
					}			
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact  1 for fund 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Updated alerts are not  displaying for contact 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
		if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Contact profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Contact profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
					}			
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}	
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
				}
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 for fund 2");
				}else{
					appLog.error("Document alerts are not displaying for contact 1 for fund 2");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 2");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 2");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 2");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 2");
				}
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 for fund 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}				
			}else{
				appLog.error("Not able to clcik on created contact");
				sa.assertTrue(false, "Not able to clcik on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");			
			sa.assertTrue(false, "Not able to click on contact tab");			
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
	}
	
	@Test
	public void M12tc068_RemoveInvestorFromManageInvestorAndVerifyAlerts(){
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		SoftAssert sa=new SoftAssert();
		String[] docNameFund1=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc049_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
		if(click(driver, fp.getManageInvestorIcon(Workspace.InvestorWorkspace, 60), "Mange investor", action.SCROLLANDBOOLEAN)){
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
			if (fp.verifyLPStructureInManageInvestor(M12Institution1+"NUP",M12LimitedPartner1)) {
				if (click(driver,fp.getLimitedPartnerCheckBox(M12Institution1+"NUP", M12LimitedPartner1,Workspace.InvestorWorkspace, 60),"LP 1 Checkbox", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
					if (click(driver,fp.getManageInvestorDeletedPopupCrossIcon(Workspace.InvestorWorkspace, 60),"Cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on Cross icon");
						ThreadSleep(2000);
						if(click(driver, fp.getManageInvestorDoneButton(Workspace.InvestorWorkspace, 60), "Done button", action.SCROLLANDBOOLEAN)){
							appLog.info("Clicked on done button");
						}else{
							appLog.error("Not able to click on done button");
							sa.assertTrue(false, "Not able to click on done button");
						}
					} else {
						appLog.info("Not able to click on Cross icon");
						sa.assertTrue(false, "Not able to click on Cross icon");
					}
				} else {
					appLog.info("Not able to click on LP1 checkbox");
					sa.assertTrue(false, "Not able to click on LP1 checkbox");
				}
			}else{
				appLog.error("LP structure is not verified in manage investor");
				sa.assertTrue(false, "LP structure is not verified in manage investor");				
			}
		}else{
			appLog.error("Not able to click on manage investor icon");
			sa.assertTrue(false, "Not able to click on manage investor icon");
		}
			}else{
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");			
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");
				sa.assertTrue(false, "Contact profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");		
			}	
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact 2 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 2 is not displaying");
			}
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 1 is displaying");
				sa.assertTrue(false, "Firm profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 1 is not displaying");		
			}
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 2 is not displaying");		
				sa.assertTrue(false, "Firm profile related alert for contact 2 is displaying");
			}
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UPINV", "Investor", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund1");
			}				
			ThreadSleep(3000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Investor", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 2");
			}
			ThreadSleep(3000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UPINV", "Investor", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund1");
			}	
			ThreadSleep(3000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Investor", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document Downloaded alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 2" );
			}
			ThreadSleep(3000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UPINV", "Investor", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 for fund1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund1");
				sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund1");
			}	
			ThreadSleep(3000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UPINV", "Investor", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 for fund1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 for fund1");
				sa.assertTrue(false, "Document Updated alerts are  not displaying for contact 1 for fund1");
			}			
		}else{
			appLog.error("Not able to select All Alerts option");
			sa.assertTrue(false, "Not able to select All Alerts option");
		}		
		}else{
			appLog.error("Not able to click on home tab");
			sa.assertTrue(false, "Not able to click on home tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Manage investor section view");
	if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
		scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Manage investor section view");
		if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
			ThreadSleep(2000);
			if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");
				sa.assertTrue(false, "Contact profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");
			}	
			if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact 2 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 2 is  not displaying");
			}	
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
			ThreadSleep(2000);
			if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Firm profile related alert for contact 1 is displaying");
					sa.assertTrue(false, "Firm profile related alert for contact 1 is  displaying");
				}else{
					appLog.error("Firm profile related alert for contact 1 is not displaying");	
				}	
				if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
					appLog.error("Firm profile related alert for contact 2 is displaying");
				}else{
					appLog.error("Firm profile related alert for contact 2 is not displaying");	
					sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
				}	
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		ThreadSleep(3000);
		if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "All Alerts")){
			ThreadSleep(2000);
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 1");
			}								
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
			}				
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Uploaded alerts are not  displaying for contact 1 for fund 1");
			}	
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 for fund 1");
			}			
		}else{
			appLog.error("Not able to select All ALerts option");
			sa.assertTrue(false, "Not able to select All ALerts  option");
		}				
	}else{
		appLog.error("Not able to click on alert histoy link");
		sa.assertTrue(false, "Not able to click on alert history link");
	}
		}else{
			appLog.error("Not able to click on created fund");
			sa.assertTrue(false, "Not able to click on created fund");
		}			
		}else{
			appLog.error("Not able to click on fund tab");
			sa.assertTrue(false, "Not able to click on fund tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();		
	}
	
	@Test
	public void M12tc069_AgainAddInvestorThroughManageInvestorInTheContactAndVerifyAlerts(){
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer bp=new BasePageBusinessLayer(driver);
		HomePageBusineesLayer hp=new HomePageBusineesLayer(driver);
		LoginPageBusinessLayer lp=new LoginPageBusinessLayer(driver);
		ContactPageBusinessLayer cp=new ContactPageBusinessLayer(driver);
		SoftAssert sa=new SoftAssert();
		String[] docNameFund1=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage", excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc=ExcelUtils.readData("FilePath", excelLabel.TestCases_Name, "M12tc049_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
		if(click(driver, fp.getManageInvestorIcon(Workspace.InvestorWorkspace, 60), "Mange investor", action.SCROLLANDBOOLEAN)){
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
			if (fp.verifyLPStructureInManageInvestor(M12Institution1+"NUP",M12LimitedPartner1)) {
				if (click(driver,fp.getLimitedPartnerCheckBox(M12Institution1+"NUP", M12LimitedPartner1,Workspace.InvestorWorkspace, 60),"LP 1 Checkbox", action.SCROLLANDBOOLEAN)) {
					switchToDefaultContent(driver);
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
					if (click(driver,fp.getManageInvestorAddedPopupCrossIcon(Workspace.InvestorWorkspace, 60),"Cross icon", action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on Cross icon");
						ThreadSleep(2000);
						if(click(driver, fp.getManageInvestorDoneButton(Workspace.InvestorWorkspace, 60), "Done button", action.SCROLLANDBOOLEAN)){
							appLog.info("Clicked on done button");
							switchToDefaultContent(driver);
							if (fp.inviteContact(environment, mode, M12Institution1+"NUP", M12Contact1EmailId, null, FolderType.Standard,"Upload", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
								appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "+ M12Contact1LastName + "'.");
							} else {
								appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "+ M12Contact1LastName + "'.");
								sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "+ M12Contact1LastName + "'.");
							}	
						}else{
							appLog.error("Not able to click on done button");
							sa.assertTrue(false, "Not able to click on done button");
						}
					} else {
						appLog.info("Not able to click on Cross icon");
						sa.assertTrue(false, "Not able to click on Cross icon");
					}
				} else {
					appLog.info("Not able to click on LP1 checkbox");
					sa.assertTrue(false, "Not able to click on LP1 checkbox");
				}
			}else{
				appLog.error("LP structure is not verified in manage investor");
				sa.assertTrue(false, "LP structure is not verified in manage investor");				
			}
		}else{
			appLog.error("Not able to click on manage investor icon");
			sa.assertTrue(false, "Not able to click on manage investor icon");
		}
			}else{
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		}else{
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");			
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Contact Profile Updated")){
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");		
				sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
			}	
			if(hp.verifyAlertOnHomePage("Contact Profile Updated",null,null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact 2 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 2 is not displaying");
			}
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		ThreadSleep(2000);
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "Firm Profile Updated")){
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 1 is not displaying");		
				sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
			}
			if(hp.verifyAlertOnHomePage("Firm Profile Updated",null, null, null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Firm profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Firm profile related alert for contact 2 is not displaying");		
				sa.assertTrue(false, "Firm profile related alert for contact 2 is displaying");
			}
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}		
		if(selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")){
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1+"UPINV", "Investor", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund1");
			}				
			ThreadSleep(10000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Investor", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 2");
			}
			ThreadSleep(10000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1+"UPINV", "Investor", docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund1");
			}	
			ThreadSleep(10000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Investor", docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 2");
			}else{
				appLog.error("Document Downloaded alerts are not displaying for contact 1 for fund 2");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 2" );
			}
			ThreadSleep(10000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1+"UPINV", "Investor", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 for fund1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund1");
				sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund1");
			}	
			ThreadSleep(10000);
			if(bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1+"UPINV", "Investor", uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 for fund1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 for fund1");
				sa.assertTrue(false, "Document Updated alerts are  not displaying for contact 1 for fund1");
			}			
		}else{
			appLog.error("Not able to select All Alerts option");
			sa.assertTrue(false, "Not able to select All Alerts option");
		}		
		}else{
			appLog.error("Not able to click on home tab");
			sa.assertTrue(false, "Not able to click on home tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Manage investor section view");
	if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
		switchToDefaultContent(driver);
		switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
		scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Manage investor section view");
		ThreadSleep(2000);
		if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
			if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 1 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact 1 is not displaying");
				sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
			}	
			if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
				appLog.error("Contact profile related alert for contact 2 is displaying");
			}else{
				appLog.error("Contact profile related alert for contact 2 is not displaying");	
				sa.assertTrue(false, "Contact profile related alert for contact 2 is  not displaying");
			}	
		}else{
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		ThreadSleep(2000);
		if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
				if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Firm profile related alert for contact 1 is displaying");
				}else{
					appLog.error("Firm profile related alert for contact 1 is not displaying");	
					sa.assertTrue(false, "Firm profile related alert for contact 1 is  displaying");
				}	
				if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
					appLog.error("Firm profile related alert for contact 2 is displaying");
				}else{
					appLog.error("Firm profile related alert for contact 2 is not displaying");	
					sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
				}	
		}else{
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}
		ThreadSleep(2000);
		if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "All Alerts")){
				ThreadSleep(5000);
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
				appLog.info("Document alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 1");
			}	
				ThreadSleep(5000);
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
				appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
			}	
				ThreadSleep(5000);
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
				appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Uploaded alerts are not  displaying for contact 1 for fund 1");
			}	
			ThreadSleep(5000);
			if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
				appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
			}else{
				appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
				sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 for fund 1");
			}	
		}else{
			appLog.error("Not able to select All ALerts option");
			sa.assertTrue(false, "Not able to select All ALerts  option");
		}				
	}else{
		appLog.error("Not able to click on alert histoy link");
		sa.assertTrue(false, "Not able to click on alert history link");
	}
		}else{
			appLog.error("Not able to click on created fund");
			sa.assertTrue(false, "Not able to click on created fund");
		}			
		}else{
			appLog.error("Not able to click on fund tab");
			sa.assertTrue(false, "Not able to click on fund tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
		if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
			ThreadSleep(2000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Contact profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Contact profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
					}					
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			ThreadSleep(2000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}	
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}		
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document alerts are not displaying for contact 1 for fund 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null, null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Viewed alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Viewed  alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Viewed alerts are not displaying for contact 1 for fund 1");
				}
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null, docNameFund2[0], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Downloaded alerts are not displaying for contact 1 for fund 1");
				}
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 for fund 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}				
			}else{
				appLog.error("Not able to clcik on created contact");
				sa.assertTrue(false, "Not able to clcik on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");			
			sa.assertTrue(false, "Not able to click on contact tab");			
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();			
	}
	
	@Test
	public void M12tc070_ClearWorkspaceAndVerifyAlerts(){
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		SoftAssert sa = new SoftAssert();
		lp.CRMLogin(superAdminUserName, adminPassword);
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1 + "NUP")) {
				String expandIcon = getAttribute(driver, bp.getWorkspaceExpandIcon(60), "WorkspaceIcon", "title");
				if (expandIcon.equalsIgnoreCase("Show Section - Workspace")) {
					if (click(driver, bp.getWorkspaceExpandIcon(60), "Workspace Expand Icon",
							action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on workspace expand icon");
					} else {
						appLog.info("Not able to click on workspace expand icon");
						sa.assertTrue(false, "Not able to click on workspace expand icon");
					}
				} else {
					appLog.info("Workspace is in expanded form");
				}
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace view");
				ThreadSleep(5000);
				click(driver, fp.getWorkSpaceClearBtn(Workspace.InvestorWorkspace, 10), "workspace clear button", action.SCROLLANDBOOLEAN);
				
				String parentID=switchOnWindow(driver);
				if(parentID!=null) {
					if (fp.clickUsingCssSelectorPath("#create_savebtn a[title=Yes]", "yes button")) {
					//if(click(driver, getCloseAndClearWorkSpaceYesBtn(timeOut), "workspace clear pop up Yes button ", action.SCROLLANDBOOLEAN)) {
						ThreadSleep(8000);
						if (isAlertPresent(driver)) {
							appLog.info("workspace has been successfully clear");
							String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
							switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
							if(msg.contains(FundsPageErrorMessage.clearWorkSpaceMsg)) {
								appLog.info(FundsPageErrorMessage.clearWorkSpaceMsg);
								driver.switchTo().window(parentID);
							}else {
								appLog.error("clear Workspace Error Message is not matched. Expected: "+FundsPageErrorMessage.closeWorkspaceMsg);
							}
							driver.switchTo().window(parentID);
						} else {
							driver.close();
							appLog.error(" clear Workspace alert message is not displayed");
							driver.switchTo().window(parentID);
						}
					}else {
						driver.close();
						appLog.error("Not able to click on clear workspace Yes button so cannot clear workspace");
						driver.switchTo().window(parentID);
					}
					driver.navigate().refresh();
					scrollDownThroughWebelement(driver, bp.getFrame( PageName.FundsPage, 60), "Fund Page alert Frame");
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					if (isDisplayed(driver, fp.getBuildInvestorWorkspace(60), "Visibility", 60,
							"Build Investor workspace button") != null) {
						appLog.info("workspace get cleared successfully");
					} else {
						appLog.error("Workspace not get cleared successfully");
						sa.assertTrue(false, "Workspace not get cleared successfully");
					}
				} else {
					appLog.error("Not able to clear the workspace");
					sa.assertTrue(false, "Not able to clear the workspace");
				}
			} else {
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		} else {
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName2)) {
				String expandIcon = getAttribute(driver, bp.getWorkspaceExpandIcon(60), "WorkspaceIcon", "title");
				if (expandIcon.equalsIgnoreCase("Show Section - Workspace")) {
					if (click(driver, bp.getWorkspaceExpandIcon(60), "Workspace Expand Icon",
							action.SCROLLANDBOOLEAN)) {
						appLog.info("Clicked on workspace expand icon");
					} else {
						appLog.info("Not able to click on workspace expand icon");
						sa.assertTrue(false, "Not able to click on workspace expand icon");
					}
				} else {
					appLog.info("Workspace is in expanded form");
				}
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
				ThreadSleep(5000);
				click(driver, fp.getWorkSpaceClearBtn(Workspace.InvestorWorkspace, 10), "workspace clear button", action.SCROLLANDBOOLEAN);
				
				String parentID=switchOnWindow(driver);
				if(parentID!=null) {
					if (fp.clickUsingCssSelectorPath("#create_savebtn a[title=Yes]", "yes button")) {
					//if(click(driver, getCloseAndClearWorkSpaceYesBtn(timeOut), "workspace clear pop up Yes button ", action.SCROLLANDBOOLEAN)) {
						ThreadSleep(8000);
						if (isAlertPresent(driver)) {
							appLog.info("workspace has been successfully clear");
							String msg = switchToAlertAndGetMessage(driver, 30, action.GETTEXT);
							switchToAlertAndAcceptOrDecline(driver, 30, action.ACCEPT);
							if(msg.contains(FundsPageErrorMessage.clearWorkSpaceMsg)) {
								appLog.info(FundsPageErrorMessage.clearWorkSpaceMsg);
								driver.switchTo().window(parentID);
							}else {
								appLog.error("clear Workspace Error Message is not matched. Expected: "+FundsPageErrorMessage.closeWorkspaceMsg);
							}
							driver.switchTo().window(parentID);
						} else {
							driver.close();
							appLog.error(" clear Workspace alert message is not displayed");
							driver.switchTo().window(parentID);
						}
					}else {
						driver.close();
						appLog.error("Not able to click on clear workspace Yes button so cannot clear workspace");
						driver.switchTo().window(parentID);
					}
					driver.navigate().refresh();
					switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
					scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
					if (isDisplayed(driver, fp.getBuildInvestorWorkspace(60), "Visibility", 60,
							"Build Investor workspace button") != null) {
						appLog.info("workspace get cleared successfully");
					} else {
						appLog.error("Workspace not get cleared successfully");
						sa.assertTrue(false, "Workspace not get cleared successfully");
					}
				} else {
					appLog.error("Not able to clear the workspace");
					sa.assertTrue(false, "Not able to clear the workspace");
				}
			} else {
				appLog.error("Not able to clcik on created fund");
				sa.assertTrue(false, "Not able to clcik on created fund");
			}
		} else {
			appLog.error("Not able to click on funds tab");
			sa.assertTrue(false, "Not able to click on funds tab");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		driver.close();
		config(browserToLaunch);
		lp = new LoginPageBusinessLayer(driver);
		bp = new BasePageBusinessLayer(driver);
		sa = new SoftAssert();
		HomePageBusineesLayer hp = new HomePageBusineesLayer(driver);
		String[] docNameFund1 = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2 = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,"M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,"M12tc049_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
		switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
		ThreadSleep(2000);
		if (selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn","Contact Profile Updated")) {
				if (hp.verifyAlertOnHomePage("Contact Profile Updated", null, null, null, M12Contact1UpdatedFirmName,
						M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
					appLog.error("Contact profile related alert for contact 1 is displaying");
					sa.assertTrue(false, "Contact profile related alert for contact 1 is displaying");
				} else { 	
					appLog.error("Contact profile related alert for contact 1 is not displaying");
				}
				if (hp.verifyAlertOnHomePage("Contact Profile Updated", null, null, null, M12Contact2UpdatedFirmName,
						M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, "date")) {
					appLog.error("Contact profile related alert for contact 2 is displaying");
					sa.assertTrue(false, "Contact profile related alert for contact 2 is displaying");
				} else {
					appLog.error("Contact profile related alert for contact 2 is not displaying");
				}
		} else {
			appLog.error("Not able to select contact profile updtaed option");
			sa.assertTrue(false, "Not able to select contact profile updtaed option");
		}
		ThreadSleep(2000);
		if (selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn","Firm Profile Updated")) {
				if (hp.verifyAlertOnHomePage("Firm Profile Updated", null, null, null, M12Contact1UpdatedFirmName,M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
					appLog.error("Firm profile related alert for contact 1 is displaying");
					sa.assertTrue(false, "Firm profile related alert for contact 1 is displaying");
				} else {
					appLog.error("Firm profile related alert for contact 1 is not displaying");
				}
				if (hp.verifyAlertOnHomePage("Firm Profile Updated", null, null, null, M12Contact2UpdatedFirmName,M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, "date")) {
					appLog.error("Firm profile related alert for contact 2 is displaying");
					sa.assertTrue(false, "Firm profile related alert for contact 2 is  displaying");
				} else {
					appLog.error("Firm profile related alert for contact 2 is not displaying");
				}
		} else {
			appLog.error("Not able to select Firm profile updtaed option");
			sa.assertTrue(false, "Not able to select Firm profile updtaed option");
		}
		ThreadSleep(2000);
		if (selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")) {
				ThreadSleep(10000);
				if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1 + "UPINV", "Investor",docNameFund1[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
					appLog.info("Document Viewed alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Viewed alerts are  displaying for contact 1 for fund 1");
				} else {
					appLog.error("Document Viewed alerts are not displaying for contact 1 for fund 1");
				}
				ThreadSleep(10000);
				if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1 + "UPINV","Investor", docNameFund1[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Downloaded alerts are displaying for contact 1 for fund 1");
				} else {
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				}
				ThreadSleep(10000);
				if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Investor",docNameFund2[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 2");
					sa.assertTrue(false, "Document Downloaded alerts are  displaying for contact 1 for fund 2");
				} else {
					appLog.error("Document Downloaded alerts are not displaying for contact 1 for fund 2");
				}
				ThreadSleep(10000);
				if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Investor",docNameFund2[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,	M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
					appLog.info("Document Viewed alerts are displaying for contact 1 for fund 2");
					sa.assertTrue(false, "Document  Viewed alerts are  displaying for contact 1 for fund 2");
				} else {
					appLog.error("Document alerts are not displaying for contact 1 for fund 2");
				}
				ThreadSleep(10000);
				if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1 + "UPINV", "Investor",uploadedDoc, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
					appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Uploaded alerts are  displaying for contact 1 for fund 1");
				} else {
					appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}
				ThreadSleep(10000);
				if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1 + "UPINV", "Investor",	uploadedDoc, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
					appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Updated alerts are  displaying for contact 1 for fund 1");
				} else {
					appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
				}
		} else {
			appLog.error("Not able to select All Alerts option");
			sa.assertTrue(false, "Not able to select All Alerts option");
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();
		sa.assertAll();	
	}
	
	@Test
	public void M12tc071_BuildWorkspaceAgainAndInviteContactAndVerifyAlerts(){
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		ContactPageBusinessLayer cp = new ContactPageBusinessLayer(driver);
		lp.CRMLogin(CRMUser1EmailID, adminPassword);
		HomePageBusineesLayer hp = new HomePageBusineesLayer(driver);
		String[] docNameFund1 = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,"M12tc042_BuildInvestorWorkspaceAndInviteContactAndVerifyAlertHistoryAtFundPageContactPage",excelLabel.UploadedFileStandard).split("<break>");
		String[] docNameFund2 = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,"M12tc047_CreateInvestorWorkspaceForFund2AndInviteSameContact", excelLabel.UploadedFileStandard).split("<break>");
		String uploadedDoc = ExcelUtils.readData("FilePath", excelLabel.TestCases_Name,	"M12tc049_1_UploadDocumentFromInvestorSide", excelLabel.UploadedFileStandard);
		SoftAssert sa = new SoftAssert();
		String[] shdPath = ExcelUtils.readData("filepath", excelLabel.TestCases_Name, currentlyExecutingTC, excelLabel.SharedPath).split(",");
		String[] step1of3 = { ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Size),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_VintageYear),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Contact),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Phone),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Email),
				ExcelUtils.readData("Funds", excelLabel.Variable_Name, "M12Fund1", excelLabel.Fund_Description) };
		if (bp.clickOnTab(TabName.FundsTab)) {
			if (fp.clickOnCreatedFund(M12FundName1+"NUP")) {
				if (fp.buildWorkspace(step1of3, WorkSpaceAction.IMPORTFOLDERTEMPLATE, folderTemplateName, null,
						M12Institution1+"NUP"+"/"+M12LimitedPartner1 + "<break>" + M12Institution2+"/"+M12LimitedPartner2, Workspace.InvestorWorkspace, 60)) {
					appLog.info("Investor Workspace is created successfully");
				} else {
					appLog.info("Investor workspace is not created successfully");
					sa.assertTrue(false, " Investor workspace is not craeted successfully");
				}
				if (fp.inviteContact(environment, mode, M12Institution1+"NUP", M12Contact1EmailId, null, FolderType.Standard,
						"Upload", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution2, M12Contact2EmailId, null, FolderType.Standard,
						"Upload", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
					sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact2FirstName + " "
							+ M12Contact2LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution1+"NUP", M12Contact1EmailId, shdPath[0],
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}
				if (fp.inviteContact(environment, mode, M12Institution2, M12Contact2EmailId, shdPath[0],
						FolderType.Shared, "Download", "Yes", "No", null, Workspace.InvestorWorkspace, null)) {
					appLog.info("Successfully provided access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				} else {
					appLog.error("Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
					sa.assertTrue(false, "Not able to provide access to contact '" + M12Contact1FirstName + " "
							+ M12Contact1LastName + "'.");
				}		
			}else{
				appLog.error("Not able to click on created fund");
				sa.assertTrue(false, "Not able to click on created fund");
			}
		}else{
			appLog.error("Not able ot click on funds tab");
			sa.assertTrue(false, "Not able ot click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.HomeTab)){
			scrollDownThroughWebelement(driver, bp.getFrame( PageName.HomePage, 60), "Home Page alert Frame");
			switchToFrame(driver, 30, bp.getFrame( PageName.HomePage, 60));
			ThreadSleep(2000);
			if (selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn",
					"Contact Profile Updated")) {
					if (hp.verifyAlertOnHomePage("Contact Profile Updated", null, null, null, M12Contact1UpdatedFirmName,
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
						appLog.error("Contact profile related alert for contact 1 is displaying");
					} else {
						appLog.error("Contact profile related alert for contact 1 is not displaying");
						sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
					}
					if (hp.verifyAlertOnHomePage("Contact Profile Updated", null, null, null, M12Contact2UpdatedFirmName,
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, "date")) {
						appLog.error("Contact profile related alert for contact 2 is displaying");
					} else {
						appLog.error("Contact profile related alert for contact 2 is not displaying");
						sa.assertTrue(false, "Contact profile related alert for contact 2 is not displaying");
					}
			} else {
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			ThreadSleep(2000);
			if (selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn",
					"Firm Profile Updated")) {
					if (hp.verifyAlertOnHomePage("Firm Profile Updated", null, null, null, M12Contact1UpdatedFirmName,
							M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName, "date")) {
						appLog.error("Firm profile related alert for contact 1 is displaying");
					} else {
						appLog.error("Firm profile related alert for contact 1 is not displaying");
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}
					if (hp.verifyAlertOnHomePage("Firm Profile Updated", null, null, null, M12Contact2UpdatedFirmName,
							M12Contact2UpdatedFirstName + " " + M12Contact2UpdatedLastName, "date")) {
						appLog.error("Firm profile related alert for contact 2 is displaying");
					} else {
						appLog.error("Firm profile related alert for contact 2 is not displaying");
						sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
					}
			} else {
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}
			ThreadSleep(2000);
			if (selectVisibleTextFromDropDown(driver, hp.getShowDropdownOnHomeAlert(60), "Show dropodwn", "All Alerts")) {
					ThreadSleep(10000);
					if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName1 + "UPINV", "Investor",
							docNameFund1[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
						appLog.info("Document Viewed alerts are displaying for contact 1 for fund 1");
						sa.assertTrue(false, "Document Viewed alerts are  displaying for contact 1 for fund 1");
					} else {
						appLog.error("Document Viewed alerts are not displaying for contact 1 for fund 1");
					}
					ThreadSleep(10000);
					if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName1 + "UPINV",
							"Investor", docNameFund1[1], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
						appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
						sa.assertTrue(false, "Document Downloaded alerts are displaying for contact 1 for fund 1");
					} else {
						appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
					}
					ThreadSleep(10000);
					if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Viewed", M12FundName2, "Investor",
							docNameFund2[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
						appLog.info("Document Viewed alerts are displaying for contact 1 for fund 2");
						sa.assertTrue(false, "Document  Viewed alerts are  displaying for contact 1 for fund 2");
					} else {
						appLog.error("Document alerts are not displaying for contact 1 for fund 2");
					}				
					ThreadSleep(10000);
					if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Downloaded", M12FundName2, "Investor",
							docNameFund2[0], M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
						appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 2");
						sa.assertTrue(false, "Document Downloaded alerts are  displaying for contact 1 for fund 2");
					} else {
						appLog.error("Document Downloaded alerts are not displaying for contact 1 for fund 2");
					}
					ThreadSleep(10000);
					if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Uploaded", M12FundName1 + "UPINV", "Investor",
							uploadedDoc, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
						appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
						sa.assertTrue(false, "Document Uploaded alerts are  displaying for contact 1 for fund 1");
					} else {
						appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
					}
					ThreadSleep(10000);
					if (bp.verifyDocumentAlerts(PageName.HomePage, "Document Updated", M12FundName1 + "UPINV", "Investor",
							uploadedDoc, M12Contact1UpdatedFirstName + " " + M12Contact1UpdatedLastName,
							M12Contact1UpdatedFirmName, hp.getHomeAlertScrollBox(60), "Date")) {
						appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
						sa.assertTrue(false, "Document Updated alerts are  displaying for contact 1 for fund 1");
					} else {
						appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
					}
			} else {
				appLog.error("Not able to select All Alerts option");
				sa.assertTrue(false, "Not able to select All Alerts option");
			}
		}else{
			appLog.error("Not able ot click on home tab");
			sa.assertTrue(false, "Not able to click on home tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.FundsTab)){
			if(fp.clickOnCreatedFund(M12FundName1+"NUP")){
				switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
		if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.FundsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, bp.getFrame( PageName.FundsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
			ThreadSleep(2000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 1 is displaying ");
				}else{
					appLog.error("Contact profile related alert for contact 1 is not displaying");	
					sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
				}
				if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
					appLog.error("Contact profile related alert for contact 2 is displaying ");
				}else{
					appLog.error("Contact profile related alert for contact 2 is not displaying");	
					sa.assertTrue(false, "Contact profile related alert for contact 2 is not displaying");
				}
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			ThreadSleep(2000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact2UpdatedFirmName, M12Contact2UpdatedFirstName+" "+M12Contact2UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 2 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 2 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 2 is not displaying");
					}
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}
			ThreadSleep(2000);
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document alerts are displaying for contact  1 for fund 1");
				}else{
					appLog.error("Document alerts are not displaying for contact 1 for fund 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Downloaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				}				
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Uploaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.FundsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Updated alerts are displaying for contact 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}
		}else{
				appLog.error("Not able ot click on creted fund");
				sa.assertTrue(false, "Not able ot click on creted fund");
			}
		}else{
			appLog.error("Not able ot click on funds tab");
			sa.assertTrue(false, "Not able ot click on funds tab");
		}
		switchToDefaultContent(driver);
		if(bp.clickOnTab(TabName.ContactTab)){
			if(cp.clickOnCreatedContact(M12Contact1FirstName+"FNNP", M12Contact1LastName+"LNNP", null)){
				switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
				scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
		if(click(driver, bp.getAlertHistoryLink(Workspace.InvestorWorkspace, PageName.ContactsPage, 60), "Alert history link", action.SCROLLANDBOOLEAN))	{
			switchToDefaultContent(driver);
			switchToFrame(driver, 30, bp.getFrame( PageName.ContactsPage, 60));
			scrollDownThroughWebelement(driver, bp.getWorkspaceSectionView(Workspace.InvestorWorkspace, 60), "Investor workspace section view");
			ThreadSleep(2000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Contact Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Contact Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Contact profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Contact profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Contact profile related alert for contact 1 is not displaying");
					}			
			}else{
				appLog.error("Not able to select contact profile updtaed option");
				sa.assertTrue(false, "Not able to select contact profile updtaed option");
			}
			ThreadSleep(2000);
			if(selectVisibleTextFromDropDown(driver, fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "Firm Profile Updated")){
					if(fp.verifyAlertHistoryGrid("Firm Profile Updated", null, M12Contact1UpdatedFirmName, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, "date")){
						appLog.error("Firm profile related alert for contact 1 is displaying ");
					}else{
						appLog.error("Firm profile related alert for contact 1 is not displaying");	
						sa.assertTrue(false, "Firm profile related alert for contact 1 is not displaying");
					}
			}else{
				appLog.error("Not able to select Firm profile updtaed option");
				sa.assertTrue(false, "Not able to select Firm profile updtaed option");
			}
			ThreadSleep(2000);
			if(selectVisibleTextFromDropDown(driver,  fp.getAlertHistoryPopupShowDropdown(Workspace.InvestorWorkspace, 60), "Show dropodwn", "All Alerts")){
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Viewed", null,null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document alerts are not displaying for contact 1 for fund 1");
				}								
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Downloaded", null, null, docNameFund1[1], M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName,fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Downloaded alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Downloaded alerts are displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Downloaded  alerts are not displaying for contact 1 for fund 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Uploaded", null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Uploaded alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Uploaded alerts are not displaying for contact 1 for fund 1");
				}	
				if(bp.verifyDocumentAlerts(PageName.ContactsPage, "Document Updated",null, null, uploadedDoc, M12Contact1UpdatedFirstName+" "+M12Contact1UpdatedLastName, M12Contact1UpdatedFirmName, fp.getAlertHistoryScrollbox(Workspace.InvestorWorkspace, 60), "Date")){
					appLog.info("Document Updated alerts are displaying for contact 1 for fund 1");
					sa.assertTrue(false, "Document Updated alerts are not displaying for contact 1 for fund 1");
				}else{
					appLog.error("Document Updated alerts are not displaying for contact 1 for fund 1");
				}			
			}else{
				appLog.error("Not able to select All ALerts option");
				sa.assertTrue(false, "Not able to select All ALerts  option");
			}				
		}else{
			appLog.error("Not able to click on alert histoy link");
			sa.assertTrue(false, "Not able to click on alert history link");
		}				
			}else{
				appLog.error("Not able to clcik on created contact");
				sa.assertTrue(false, "Not able to clcik on created contact");
			}
		}else{
			appLog.error("Not able to click on contact tab");			
			sa.assertTrue(false, "Not able to click on contact tab");			
		}
		switchToDefaultContent(driver);
		lp.CRMlogout();		
		sa.assertAll();	
}

	@Test
	public void M12tc072_postCondition(){
	LoginPageBusinessLayer	 lp = new LoginPageBusinessLayer(driver);
	BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
	SoftAssert saa1 = new SoftAssert();
	lp.CRMLogin(superAdminUserName, adminPassword);
	saa1=bp.postCondition();
	sa.combineAssertions(saa1);
	lp.CRMlogout();
	sa.assertAll();		
	}

		
}